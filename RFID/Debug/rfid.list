
rfid.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b64  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000034c  08005c70  08005c70  00006c70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005fbc  08005fbc  00007028  2**0
                  CONTENTS
  4 .ARM          00000000  08005fbc  08005fbc  00007028  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005fbc  08005fbc  00007028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005fbc  08005fbc  00006fbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005fc0  08005fc0  00006fc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000028  20000000  08005fc4  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000160  20000028  08005fec  00007028  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000188  08005fec  00007188  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00007028  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c1a3  00000000  00000000  00007051  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000239f  00000000  00000000  000131f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e40  00000000  00000000  00015598  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000afa  00000000  00000000  000163d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018424  00000000  00000000  00016ed2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f318  00000000  00000000  0002f2f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ac38  00000000  00000000  0003e60e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c9246  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ae0  00000000  00000000  000c928c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007f  00000000  00000000  000ccd6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000028 	.word	0x20000028
 8000128:	00000000 	.word	0x00000000
 800012c:	08005c58 	.word	0x08005c58

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000002c 	.word	0x2000002c
 8000148:	08005c58 	.word	0x08005c58

0800014c <Flash_Erase>:
 */


#include <flash.h>

void Flash_Erase(uint32_t address){
 800014c:	b580      	push	{r7, lr}
 800014e:	b088      	sub	sp, #32
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	HAL_FLASH_Unlock();
 8000154:	f003 ff4a 	bl	8003fec <HAL_FLASH_Unlock>
	FLASH_EraseInitTypeDef	EraseInit;
	EraseInit.Banks  = 1;
 8000158:	2301      	movs	r3, #1
 800015a:	617b      	str	r3, [r7, #20]
	EraseInit.NbPages = 1;
 800015c:	2301      	movs	r3, #1
 800015e:	61fb      	str	r3, [r7, #28]
	EraseInit.PageAddress = address;
 8000160:	687b      	ldr	r3, [r7, #4]
 8000162:	61bb      	str	r3, [r7, #24]
	EraseInit.TypeErase = FLASH_TYPEERASE_PAGES;
 8000164:	2300      	movs	r3, #0
 8000166:	613b      	str	r3, [r7, #16]
	uint32_t pageerr;
	HAL_FLASHEx_Erase(&EraseInit ,&pageerr );
 8000168:	f107 020c 	add.w	r2, r7, #12
 800016c:	f107 0310 	add.w	r3, r7, #16
 8000170:	4611      	mov	r1, r2
 8000172:	4618      	mov	r0, r3
 8000174:	f004 f822 	bl	80041bc <HAL_FLASHEx_Erase>
	HAL_FLASH_Lock();
 8000178:	f003 ff5e 	bl	8004038 <HAL_FLASH_Lock>
}
 800017c:	bf00      	nop
 800017e:	3720      	adds	r7, #32
 8000180:	46bd      	mov	sp, r7
 8000182:	bd80      	pop	{r7, pc}

08000184 <Flash_Write_2Byte>:
void Flash_Write_2Byte(uint32_t address , uint16_t data){
 8000184:	b5b0      	push	{r4, r5, r7, lr}
 8000186:	b082      	sub	sp, #8
 8000188:	af00      	add	r7, sp, #0
 800018a:	6078      	str	r0, [r7, #4]
 800018c:	460b      	mov	r3, r1
 800018e:	807b      	strh	r3, [r7, #2]
	HAL_FLASH_Unlock();
 8000190:	f003 ff2c 	bl	8003fec <HAL_FLASH_Unlock>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address, data);
 8000194:	887b      	ldrh	r3, [r7, #2]
 8000196:	2200      	movs	r2, #0
 8000198:	461c      	mov	r4, r3
 800019a:	4615      	mov	r5, r2
 800019c:	4622      	mov	r2, r4
 800019e:	462b      	mov	r3, r5
 80001a0:	6879      	ldr	r1, [r7, #4]
 80001a2:	2001      	movs	r0, #1
 80001a4:	f003 feb2 	bl	8003f0c <HAL_FLASH_Program>
	HAL_FLASH_Lock();
 80001a8:	f003 ff46 	bl	8004038 <HAL_FLASH_Lock>
}
 80001ac:	bf00      	nop
 80001ae:	3708      	adds	r7, #8
 80001b0:	46bd      	mov	sp, r7
 80001b2:	bdb0      	pop	{r4, r5, r7, pc}

080001b4 <Flash_Write_Array>:
void Flash_Write_4Byte(uint32_t address , uint32_t data){
	HAL_FLASH_Unlock();
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address, data);
	HAL_FLASH_Lock();
}
void Flash_Write_Array(uint32_t address , uint8_t *data , uint16_t length){
 80001b4:	b580      	push	{r7, lr}
 80001b6:	b086      	sub	sp, #24
 80001b8:	af00      	add	r7, sp, #0
 80001ba:	60f8      	str	r0, [r7, #12]
 80001bc:	60b9      	str	r1, [r7, #8]
 80001be:	4613      	mov	r3, r2
 80001c0:	80fb      	strh	r3, [r7, #6]
	HAL_FLASH_Unlock();
 80001c2:	f003 ff13 	bl	8003fec <HAL_FLASH_Unlock>
	for( uint16_t i = 0 ; i< length ; i = i+2){
 80001c6:	2300      	movs	r3, #0
 80001c8:	82fb      	strh	r3, [r7, #22]
 80001ca:	e00c      	b.n	80001e6 <Flash_Write_Array+0x32>
		Flash_Write_2Byte(address +i,*(uint16_t *)(data +i) );
 80001cc:	8afa      	ldrh	r2, [r7, #22]
 80001ce:	68fb      	ldr	r3, [r7, #12]
 80001d0:	18d0      	adds	r0, r2, r3
 80001d2:	8afb      	ldrh	r3, [r7, #22]
 80001d4:	68ba      	ldr	r2, [r7, #8]
 80001d6:	4413      	add	r3, r2
 80001d8:	881b      	ldrh	r3, [r3, #0]
 80001da:	4619      	mov	r1, r3
 80001dc:	f7ff ffd2 	bl	8000184 <Flash_Write_2Byte>
	for( uint16_t i = 0 ; i< length ; i = i+2){
 80001e0:	8afb      	ldrh	r3, [r7, #22]
 80001e2:	3302      	adds	r3, #2
 80001e4:	82fb      	strh	r3, [r7, #22]
 80001e6:	8afa      	ldrh	r2, [r7, #22]
 80001e8:	88fb      	ldrh	r3, [r7, #6]
 80001ea:	429a      	cmp	r2, r3
 80001ec:	d3ee      	bcc.n	80001cc <Flash_Write_Array+0x18>
	}
	HAL_FLASH_Lock();
 80001ee:	f003 ff23 	bl	8004038 <HAL_FLASH_Lock>
}
 80001f2:	bf00      	nop
 80001f4:	3718      	adds	r7, #24
 80001f6:	46bd      	mov	sp, r7
 80001f8:	bd80      	pop	{r7, pc}

080001fa <Flash_Read_Byte>:

uint8_t  Flash_Read_Byte(uint32_t address){
 80001fa:	b480      	push	{r7}
 80001fc:	b083      	sub	sp, #12
 80001fe:	af00      	add	r7, sp, #0
 8000200:	6078      	str	r0, [r7, #4]
	return *(__IO uint8_t *)(address);
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	781b      	ldrb	r3, [r3, #0]
 8000206:	b2db      	uxtb	r3, r3
}
 8000208:	4618      	mov	r0, r3
 800020a:	370c      	adds	r7, #12
 800020c:	46bd      	mov	sp, r7
 800020e:	bc80      	pop	{r7}
 8000210:	4770      	bx	lr

08000212 <Flash_Read_2Byte>:
uint16_t Flash_Read_2Byte(uint32_t address){
 8000212:	b480      	push	{r7}
 8000214:	b083      	sub	sp, #12
 8000216:	af00      	add	r7, sp, #0
 8000218:	6078      	str	r0, [r7, #4]
	return *(__IO uint16_t *)(address);
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	881b      	ldrh	r3, [r3, #0]
 800021e:	b29b      	uxth	r3, r3
}
 8000220:	4618      	mov	r0, r3
 8000222:	370c      	adds	r7, #12
 8000224:	46bd      	mov	sp, r7
 8000226:	bc80      	pop	{r7}
 8000228:	4770      	bx	lr

0800022a <Flash_Read_8Byte>:
uint32_t Flash_Read_4Byte(uint32_t address){
	return *(__IO uint32_t *)(address);
}
uint64_t Flash_Read_8Byte(uint32_t address){
 800022a:	b480      	push	{r7}
 800022c:	b083      	sub	sp, #12
 800022e:	af00      	add	r7, sp, #0
 8000230:	6078      	str	r0, [r7, #4]
	return *(__IO uint64_t *)(address);
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	e9d3 2300 	ldrd	r2, r3, [r3]
}
 8000238:	4610      	mov	r0, r2
 800023a:	4619      	mov	r1, r3
 800023c:	370c      	adds	r7, #12
 800023e:	46bd      	mov	sp, r7
 8000240:	bc80      	pop	{r7}
 8000242:	4770      	bx	lr

08000244 <Flash_Read_Array>:
void  Flash_Read_Array(uint32_t address, uint8_t *data , uint16_t length){
 8000244:	b480      	push	{r7}
 8000246:	b087      	sub	sp, #28
 8000248:	af00      	add	r7, sp, #0
 800024a:	60f8      	str	r0, [r7, #12]
 800024c:	60b9      	str	r1, [r7, #8]
 800024e:	4613      	mov	r3, r2
 8000250:	80fb      	strh	r3, [r7, #6]
	for(uint16_t i = 0; i< length ; i++){
 8000252:	2300      	movs	r3, #0
 8000254:	82fb      	strh	r3, [r7, #22]
 8000256:	e00c      	b.n	8000272 <Flash_Read_Array+0x2e>
		*(data +i) = *(__IO uint8_t *)(address+i);
 8000258:	8afa      	ldrh	r2, [r7, #22]
 800025a:	68fb      	ldr	r3, [r7, #12]
 800025c:	4413      	add	r3, r2
 800025e:	4619      	mov	r1, r3
 8000260:	8afb      	ldrh	r3, [r7, #22]
 8000262:	68ba      	ldr	r2, [r7, #8]
 8000264:	4413      	add	r3, r2
 8000266:	780a      	ldrb	r2, [r1, #0]
 8000268:	b2d2      	uxtb	r2, r2
 800026a:	701a      	strb	r2, [r3, #0]
	for(uint16_t i = 0; i< length ; i++){
 800026c:	8afb      	ldrh	r3, [r7, #22]
 800026e:	3301      	adds	r3, #1
 8000270:	82fb      	strh	r3, [r7, #22]
 8000272:	8afa      	ldrh	r2, [r7, #22]
 8000274:	88fb      	ldrh	r3, [r7, #6]
 8000276:	429a      	cmp	r2, r3
 8000278:	d3ee      	bcc.n	8000258 <Flash_Read_Array+0x14>
	}
}
 800027a:	bf00      	nop
 800027c:	bf00      	nop
 800027e:	371c      	adds	r7, #28
 8000280:	46bd      	mov	sp, r7
 8000282:	bc80      	pop	{r7}
 8000284:	4770      	bx	lr

08000286 <CLCD_Delay>:
#include "lcd.h"


//************************ Low Level Function *****************************************//
static void CLCD_Delay(uint16_t Time)
{
 8000286:	b580      	push	{r7, lr}
 8000288:	b082      	sub	sp, #8
 800028a:	af00      	add	r7, sp, #0
 800028c:	4603      	mov	r3, r0
 800028e:	80fb      	strh	r3, [r7, #6]
	HAL_Delay(Time);
 8000290:	88fb      	ldrh	r3, [r7, #6]
 8000292:	4618      	mov	r0, r3
 8000294:	f003 fd08 	bl	8003ca8 <HAL_Delay>

}
 8000298:	bf00      	nop
 800029a:	3708      	adds	r7, #8
 800029c:	46bd      	mov	sp, r7
 800029e:	bd80      	pop	{r7, pc}

080002a0 <CLCD_Write8>:
static void CLCD_Write8(CLCD_Name* LCD, uint8_t Data, uint8_t Mode)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b082      	sub	sp, #8
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	6078      	str	r0, [r7, #4]
 80002a8:	460b      	mov	r3, r1
 80002aa:	70fb      	strb	r3, [r7, #3]
 80002ac:	4613      	mov	r3, r2
 80002ae:	70bb      	strb	r3, [r7, #2]
	if(Mode == CLCD_COMMAND)
 80002b0:	78bb      	ldrb	r3, [r7, #2]
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d108      	bne.n	80002c8 <CLCD_Write8+0x28>
	{
		HAL_GPIO_WritePin(LCD->RS_PORT, LCD->RS_PIN, GPIO_PIN_RESET);// RS = 0, write cmd
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	6858      	ldr	r0, [r3, #4]
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	891b      	ldrh	r3, [r3, #8]
 80002be:	2200      	movs	r2, #0
 80002c0:	4619      	mov	r1, r3
 80002c2:	f004 f9be 	bl	8004642 <HAL_GPIO_WritePin>
 80002c6:	e00a      	b.n	80002de <CLCD_Write8+0x3e>
	}
	else if(Mode == CLCD_DATA)
 80002c8:	78bb      	ldrb	r3, [r7, #2]
 80002ca:	2b01      	cmp	r3, #1
 80002cc:	d107      	bne.n	80002de <CLCD_Write8+0x3e>
	{
		HAL_GPIO_WritePin(LCD->RS_PORT, LCD->RS_PIN, GPIO_PIN_SET);// RS = 1, write data
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	6858      	ldr	r0, [r3, #4]
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	891b      	ldrh	r3, [r3, #8]
 80002d6:	2201      	movs	r2, #1
 80002d8:	4619      	mov	r1, r3
 80002da:	f004 f9b2 	bl	8004642 <HAL_GPIO_WritePin>
	}
	HAL_GPIO_WritePin(LCD->D0_PORT, LCD->D0_PIN, Data&0x01?GPIO_PIN_SET:GPIO_PIN_RESET);
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	6958      	ldr	r0, [r3, #20]
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	8b19      	ldrh	r1, [r3, #24]
 80002e6:	78fb      	ldrb	r3, [r7, #3]
 80002e8:	f003 0301 	and.w	r3, r3, #1
 80002ec:	b2db      	uxtb	r3, r3
 80002ee:	461a      	mov	r2, r3
 80002f0:	f004 f9a7 	bl	8004642 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD->D1_PORT, LCD->D1_PIN, Data>>1&0x01?GPIO_PIN_SET:GPIO_PIN_RESET);
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	69d8      	ldr	r0, [r3, #28]
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	8c19      	ldrh	r1, [r3, #32]
 80002fc:	78fb      	ldrb	r3, [r7, #3]
 80002fe:	085b      	lsrs	r3, r3, #1
 8000300:	b2db      	uxtb	r3, r3
 8000302:	f003 0301 	and.w	r3, r3, #1
 8000306:	b2db      	uxtb	r3, r3
 8000308:	461a      	mov	r2, r3
 800030a:	f004 f99a 	bl	8004642 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD->D2_PORT, LCD->D2_PIN, Data>>2&0x01?GPIO_PIN_SET:GPIO_PIN_RESET);
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	8d19      	ldrh	r1, [r3, #40]	@ 0x28
 8000316:	78fb      	ldrb	r3, [r7, #3]
 8000318:	089b      	lsrs	r3, r3, #2
 800031a:	b2db      	uxtb	r3, r3
 800031c:	f003 0301 	and.w	r3, r3, #1
 8000320:	b2db      	uxtb	r3, r3
 8000322:	461a      	mov	r2, r3
 8000324:	f004 f98d 	bl	8004642 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD->D3_PORT, LCD->D3_PIN, Data>>3&0x01?GPIO_PIN_SET:GPIO_PIN_RESET);
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	8e19      	ldrh	r1, [r3, #48]	@ 0x30
 8000330:	78fb      	ldrb	r3, [r7, #3]
 8000332:	08db      	lsrs	r3, r3, #3
 8000334:	b2db      	uxtb	r3, r3
 8000336:	f003 0301 	and.w	r3, r3, #1
 800033a:	b2db      	uxtb	r3, r3
 800033c:	461a      	mov	r2, r3
 800033e:	f004 f980 	bl	8004642 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD->D4_PORT, LCD->D4_PIN, Data>>4&0x01?GPIO_PIN_SET:GPIO_PIN_RESET);
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	8f19      	ldrh	r1, [r3, #56]	@ 0x38
 800034a:	78fb      	ldrb	r3, [r7, #3]
 800034c:	091b      	lsrs	r3, r3, #4
 800034e:	b2db      	uxtb	r3, r3
 8000350:	f003 0301 	and.w	r3, r3, #1
 8000354:	b2db      	uxtb	r3, r3
 8000356:	461a      	mov	r2, r3
 8000358:	f004 f973 	bl	8004642 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD->D5_PORT, LCD->D5_PIN, Data>>5&0x01?GPIO_PIN_SET:GPIO_PIN_RESET);
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	f8b3 1040 	ldrh.w	r1, [r3, #64]	@ 0x40
 8000366:	78fb      	ldrb	r3, [r7, #3]
 8000368:	095b      	lsrs	r3, r3, #5
 800036a:	b2db      	uxtb	r3, r3
 800036c:	f003 0301 	and.w	r3, r3, #1
 8000370:	b2db      	uxtb	r3, r3
 8000372:	461a      	mov	r2, r3
 8000374:	f004 f965 	bl	8004642 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD->D6_PORT, LCD->D6_PIN, Data>>6&0x01?GPIO_PIN_SET:GPIO_PIN_RESET);
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	f8b3 1048 	ldrh.w	r1, [r3, #72]	@ 0x48
 8000382:	78fb      	ldrb	r3, [r7, #3]
 8000384:	099b      	lsrs	r3, r3, #6
 8000386:	b2db      	uxtb	r3, r3
 8000388:	f003 0301 	and.w	r3, r3, #1
 800038c:	b2db      	uxtb	r3, r3
 800038e:	461a      	mov	r2, r3
 8000390:	f004 f957 	bl	8004642 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD->D7_PORT, LCD->D7_PIN, Data>>7&0x01?GPIO_PIN_SET:GPIO_PIN_RESET);
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	f8b3 1050 	ldrh.w	r1, [r3, #80]	@ 0x50
 800039e:	78fb      	ldrb	r3, [r7, #3]
 80003a0:	09db      	lsrs	r3, r3, #7
 80003a2:	b2db      	uxtb	r3, r3
 80003a4:	461a      	mov	r2, r3
 80003a6:	f004 f94c 	bl	8004642 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LCD->EN_PORT, LCD->EN_PIN, GPIO_PIN_RESET);
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	68d8      	ldr	r0, [r3, #12]
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	8a1b      	ldrh	r3, [r3, #16]
 80003b2:	2200      	movs	r2, #0
 80003b4:	4619      	mov	r1, r3
 80003b6:	f004 f944 	bl	8004642 <HAL_GPIO_WritePin>
	CLCD_Delay(1);
 80003ba:	2001      	movs	r0, #1
 80003bc:	f7ff ff63 	bl	8000286 <CLCD_Delay>
	HAL_GPIO_WritePin(LCD->EN_PORT, LCD->EN_PIN, GPIO_PIN_SET);
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	68d8      	ldr	r0, [r3, #12]
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	8a1b      	ldrh	r3, [r3, #16]
 80003c8:	2201      	movs	r2, #1
 80003ca:	4619      	mov	r1, r3
 80003cc:	f004 f939 	bl	8004642 <HAL_GPIO_WritePin>
	CLCD_Delay(1);
 80003d0:	2001      	movs	r0, #1
 80003d2:	f7ff ff58 	bl	8000286 <CLCD_Delay>
	HAL_GPIO_WritePin(LCD->EN_PORT, LCD->EN_PIN, GPIO_PIN_RESET);
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	68d8      	ldr	r0, [r3, #12]
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	8a1b      	ldrh	r3, [r3, #16]
 80003de:	2200      	movs	r2, #0
 80003e0:	4619      	mov	r1, r3
 80003e2:	f004 f92e 	bl	8004642 <HAL_GPIO_WritePin>
	CLCD_Delay(1);
 80003e6:	2001      	movs	r0, #1
 80003e8:	f7ff ff4d 	bl	8000286 <CLCD_Delay>
}
 80003ec:	bf00      	nop
 80003ee:	3708      	adds	r7, #8
 80003f0:	46bd      	mov	sp, r7
 80003f2:	bd80      	pop	{r7, pc}

080003f4 <CLCD_Write4>:
static void CLCD_Write4(CLCD_Name* LCD, uint8_t Data, uint8_t Mode)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b084      	sub	sp, #16
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	6078      	str	r0, [r7, #4]
 80003fc:	460b      	mov	r3, r1
 80003fe:	70fb      	strb	r3, [r7, #3]
 8000400:	4613      	mov	r3, r2
 8000402:	70bb      	strb	r3, [r7, #2]
	uint8_t Data_H = Data >>4;
 8000404:	78fb      	ldrb	r3, [r7, #3]
 8000406:	091b      	lsrs	r3, r3, #4
 8000408:	73fb      	strb	r3, [r7, #15]
	uint8_t Data_L = Data;
 800040a:	78fb      	ldrb	r3, [r7, #3]
 800040c:	73bb      	strb	r3, [r7, #14]
	if(Mode == CLCD_COMMAND)
 800040e:	78bb      	ldrb	r3, [r7, #2]
 8000410:	2b00      	cmp	r3, #0
 8000412:	d108      	bne.n	8000426 <CLCD_Write4+0x32>
	{
		HAL_GPIO_WritePin(LCD->RS_PORT, LCD->RS_PIN, GPIO_PIN_RESET);// RS = 0, write cmd
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	6858      	ldr	r0, [r3, #4]
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	891b      	ldrh	r3, [r3, #8]
 800041c:	2200      	movs	r2, #0
 800041e:	4619      	mov	r1, r3
 8000420:	f004 f90f 	bl	8004642 <HAL_GPIO_WritePin>
 8000424:	e00a      	b.n	800043c <CLCD_Write4+0x48>
	}
	else if(Mode == CLCD_DATA)
 8000426:	78bb      	ldrb	r3, [r7, #2]
 8000428:	2b01      	cmp	r3, #1
 800042a:	d107      	bne.n	800043c <CLCD_Write4+0x48>
	{
		HAL_GPIO_WritePin(LCD->RS_PORT, LCD->RS_PIN, GPIO_PIN_SET);// RS = 1, write data
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	6858      	ldr	r0, [r3, #4]
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	891b      	ldrh	r3, [r3, #8]
 8000434:	2201      	movs	r2, #1
 8000436:	4619      	mov	r1, r3
 8000438:	f004 f903 	bl	8004642 <HAL_GPIO_WritePin>
	}
	HAL_GPIO_WritePin(LCD->D4_PORT, LCD->D4_PIN, Data_H&0x01?GPIO_PIN_SET:GPIO_PIN_RESET);
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	8f19      	ldrh	r1, [r3, #56]	@ 0x38
 8000444:	7bfb      	ldrb	r3, [r7, #15]
 8000446:	f003 0301 	and.w	r3, r3, #1
 800044a:	b2db      	uxtb	r3, r3
 800044c:	461a      	mov	r2, r3
 800044e:	f004 f8f8 	bl	8004642 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD->D5_PORT, LCD->D5_PIN, Data_H>>1&0x01?GPIO_PIN_SET:GPIO_PIN_RESET);
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	f8b3 1040 	ldrh.w	r1, [r3, #64]	@ 0x40
 800045c:	7bfb      	ldrb	r3, [r7, #15]
 800045e:	085b      	lsrs	r3, r3, #1
 8000460:	b2db      	uxtb	r3, r3
 8000462:	f003 0301 	and.w	r3, r3, #1
 8000466:	b2db      	uxtb	r3, r3
 8000468:	461a      	mov	r2, r3
 800046a:	f004 f8ea 	bl	8004642 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD->D6_PORT, LCD->D6_PIN, Data_H>>2&0x01?GPIO_PIN_SET:GPIO_PIN_RESET);
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	f8b3 1048 	ldrh.w	r1, [r3, #72]	@ 0x48
 8000478:	7bfb      	ldrb	r3, [r7, #15]
 800047a:	089b      	lsrs	r3, r3, #2
 800047c:	b2db      	uxtb	r3, r3
 800047e:	f003 0301 	and.w	r3, r3, #1
 8000482:	b2db      	uxtb	r3, r3
 8000484:	461a      	mov	r2, r3
 8000486:	f004 f8dc 	bl	8004642 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD->D7_PORT, LCD->D7_PIN, Data_H>>3&0x01?GPIO_PIN_SET:GPIO_PIN_RESET);
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	f8b3 1050 	ldrh.w	r1, [r3, #80]	@ 0x50
 8000494:	7bfb      	ldrb	r3, [r7, #15]
 8000496:	08db      	lsrs	r3, r3, #3
 8000498:	b2db      	uxtb	r3, r3
 800049a:	f003 0301 	and.w	r3, r3, #1
 800049e:	b2db      	uxtb	r3, r3
 80004a0:	461a      	mov	r2, r3
 80004a2:	f004 f8ce 	bl	8004642 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LCD->EN_PORT, LCD->EN_PIN, GPIO_PIN_RESET);
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	68d8      	ldr	r0, [r3, #12]
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	8a1b      	ldrh	r3, [r3, #16]
 80004ae:	2200      	movs	r2, #0
 80004b0:	4619      	mov	r1, r3
 80004b2:	f004 f8c6 	bl	8004642 <HAL_GPIO_WritePin>
	CLCD_Delay(1);
 80004b6:	2001      	movs	r0, #1
 80004b8:	f7ff fee5 	bl	8000286 <CLCD_Delay>
	HAL_GPIO_WritePin(LCD->EN_PORT, LCD->EN_PIN, GPIO_PIN_SET);
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	68d8      	ldr	r0, [r3, #12]
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	8a1b      	ldrh	r3, [r3, #16]
 80004c4:	2201      	movs	r2, #1
 80004c6:	4619      	mov	r1, r3
 80004c8:	f004 f8bb 	bl	8004642 <HAL_GPIO_WritePin>
	CLCD_Delay(1);
 80004cc:	2001      	movs	r0, #1
 80004ce:	f7ff feda 	bl	8000286 <CLCD_Delay>
	HAL_GPIO_WritePin(LCD->EN_PORT, LCD->EN_PIN, GPIO_PIN_RESET);
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	68d8      	ldr	r0, [r3, #12]
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	8a1b      	ldrh	r3, [r3, #16]
 80004da:	2200      	movs	r2, #0
 80004dc:	4619      	mov	r1, r3
 80004de:	f004 f8b0 	bl	8004642 <HAL_GPIO_WritePin>
	CLCD_Delay(1);
 80004e2:	2001      	movs	r0, #1
 80004e4:	f7ff fecf 	bl	8000286 <CLCD_Delay>

	HAL_GPIO_WritePin(LCD->D4_PORT, LCD->D4_PIN, Data_L&0x01?GPIO_PIN_SET:GPIO_PIN_RESET);
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	8f19      	ldrh	r1, [r3, #56]	@ 0x38
 80004f0:	7bbb      	ldrb	r3, [r7, #14]
 80004f2:	f003 0301 	and.w	r3, r3, #1
 80004f6:	b2db      	uxtb	r3, r3
 80004f8:	461a      	mov	r2, r3
 80004fa:	f004 f8a2 	bl	8004642 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD->D5_PORT, LCD->D5_PIN, Data_L>>1&0x01?GPIO_PIN_SET:GPIO_PIN_RESET);
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	f8b3 1040 	ldrh.w	r1, [r3, #64]	@ 0x40
 8000508:	7bbb      	ldrb	r3, [r7, #14]
 800050a:	085b      	lsrs	r3, r3, #1
 800050c:	b2db      	uxtb	r3, r3
 800050e:	f003 0301 	and.w	r3, r3, #1
 8000512:	b2db      	uxtb	r3, r3
 8000514:	461a      	mov	r2, r3
 8000516:	f004 f894 	bl	8004642 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD->D6_PORT, LCD->D6_PIN, Data_L>>2&0x01?GPIO_PIN_SET:GPIO_PIN_RESET);
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	f8b3 1048 	ldrh.w	r1, [r3, #72]	@ 0x48
 8000524:	7bbb      	ldrb	r3, [r7, #14]
 8000526:	089b      	lsrs	r3, r3, #2
 8000528:	b2db      	uxtb	r3, r3
 800052a:	f003 0301 	and.w	r3, r3, #1
 800052e:	b2db      	uxtb	r3, r3
 8000530:	461a      	mov	r2, r3
 8000532:	f004 f886 	bl	8004642 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD->D7_PORT, LCD->D7_PIN, Data_L>>3&0x01?GPIO_PIN_SET:GPIO_PIN_RESET);
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	f8b3 1050 	ldrh.w	r1, [r3, #80]	@ 0x50
 8000540:	7bbb      	ldrb	r3, [r7, #14]
 8000542:	08db      	lsrs	r3, r3, #3
 8000544:	b2db      	uxtb	r3, r3
 8000546:	f003 0301 	and.w	r3, r3, #1
 800054a:	b2db      	uxtb	r3, r3
 800054c:	461a      	mov	r2, r3
 800054e:	f004 f878 	bl	8004642 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LCD->EN_PORT, LCD->EN_PIN, GPIO_PIN_RESET);
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	68d8      	ldr	r0, [r3, #12]
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	8a1b      	ldrh	r3, [r3, #16]
 800055a:	2200      	movs	r2, #0
 800055c:	4619      	mov	r1, r3
 800055e:	f004 f870 	bl	8004642 <HAL_GPIO_WritePin>
	CLCD_Delay(1);
 8000562:	2001      	movs	r0, #1
 8000564:	f7ff fe8f 	bl	8000286 <CLCD_Delay>
	HAL_GPIO_WritePin(LCD->EN_PORT, LCD->EN_PIN, GPIO_PIN_SET);
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	68d8      	ldr	r0, [r3, #12]
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	8a1b      	ldrh	r3, [r3, #16]
 8000570:	2201      	movs	r2, #1
 8000572:	4619      	mov	r1, r3
 8000574:	f004 f865 	bl	8004642 <HAL_GPIO_WritePin>
	CLCD_Delay(1);
 8000578:	2001      	movs	r0, #1
 800057a:	f7ff fe84 	bl	8000286 <CLCD_Delay>
	HAL_GPIO_WritePin(LCD->EN_PORT, LCD->EN_PIN, GPIO_PIN_RESET);
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	68d8      	ldr	r0, [r3, #12]
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	8a1b      	ldrh	r3, [r3, #16]
 8000586:	2200      	movs	r2, #0
 8000588:	4619      	mov	r1, r3
 800058a:	f004 f85a 	bl	8004642 <HAL_GPIO_WritePin>
	CLCD_Delay(1);
 800058e:	2001      	movs	r0, #1
 8000590:	f7ff fe79 	bl	8000286 <CLCD_Delay>
}
 8000594:	bf00      	nop
 8000596:	3710      	adds	r7, #16
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}

0800059c <CLCD_4BIT_Init>:

void CLCD_4BIT_Init(CLCD_Name* LCD, uint8_t Colum, uint8_t Row,
									GPIO_TypeDef* RS_PORT, uint16_t RS_PIN, GPIO_TypeDef* EN_PORT, uint16_t EN_PIN,
									GPIO_TypeDef* D4_PORT, uint16_t D4_PIN, GPIO_TypeDef* D5_PORT, uint16_t D5_PIN,
									GPIO_TypeDef* D6_PORT, uint16_t D6_PIN, GPIO_TypeDef* D7_PORT, uint16_t D7_PIN)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b084      	sub	sp, #16
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	60f8      	str	r0, [r7, #12]
 80005a4:	607b      	str	r3, [r7, #4]
 80005a6:	460b      	mov	r3, r1
 80005a8:	72fb      	strb	r3, [r7, #11]
 80005aa:	4613      	mov	r3, r2
 80005ac:	72bb      	strb	r3, [r7, #10]
	LCD->MODE = LCD_4BITMODE;
 80005ae:	68fb      	ldr	r3, [r7, #12]
 80005b0:	2200      	movs	r2, #0
 80005b2:	701a      	strb	r2, [r3, #0]
	LCD->COLUMS = Colum;
 80005b4:	68fb      	ldr	r3, [r7, #12]
 80005b6:	7afa      	ldrb	r2, [r7, #11]
 80005b8:	705a      	strb	r2, [r3, #1]
	LCD->ROWS = Row;
 80005ba:	68fb      	ldr	r3, [r7, #12]
 80005bc:	7aba      	ldrb	r2, [r7, #10]
 80005be:	709a      	strb	r2, [r3, #2]
	LCD->RS_PORT = RS_PORT;
 80005c0:	68fb      	ldr	r3, [r7, #12]
 80005c2:	687a      	ldr	r2, [r7, #4]
 80005c4:	605a      	str	r2, [r3, #4]
	LCD->RS_PIN = RS_PIN;
 80005c6:	68fb      	ldr	r3, [r7, #12]
 80005c8:	8b3a      	ldrh	r2, [r7, #24]
 80005ca:	811a      	strh	r2, [r3, #8]
	LCD->EN_PORT = EN_PORT;
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	69fa      	ldr	r2, [r7, #28]
 80005d0:	60da      	str	r2, [r3, #12]
	LCD->EN_PIN = EN_PIN;
 80005d2:	68fb      	ldr	r3, [r7, #12]
 80005d4:	8c3a      	ldrh	r2, [r7, #32]
 80005d6:	821a      	strh	r2, [r3, #16]
	LCD->D4_PORT = D4_PORT;
 80005d8:	68fb      	ldr	r3, [r7, #12]
 80005da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80005dc:	635a      	str	r2, [r3, #52]	@ 0x34
	LCD->D4_PIN = D4_PIN;
 80005de:	68fb      	ldr	r3, [r7, #12]
 80005e0:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80005e2:	871a      	strh	r2, [r3, #56]	@ 0x38
	LCD->D5_PORT = D5_PORT;
 80005e4:	68fb      	ldr	r3, [r7, #12]
 80005e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80005e8:	63da      	str	r2, [r3, #60]	@ 0x3c
	LCD->D5_PIN = D5_PIN;
 80005ea:	68fb      	ldr	r3, [r7, #12]
 80005ec:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 80005ee:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
	LCD->D6_PORT = D6_PORT;
 80005f2:	68fb      	ldr	r3, [r7, #12]
 80005f4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80005f6:	645a      	str	r2, [r3, #68]	@ 0x44
	LCD->D6_PIN = D6_PIN;
 80005f8:	68fb      	ldr	r3, [r7, #12]
 80005fa:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 80005fc:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
	LCD->D7_PORT = D7_PORT;
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000604:	64da      	str	r2, [r3, #76]	@ 0x4c
	LCD->D7_PIN = D7_PIN;
 8000606:	68fb      	ldr	r3, [r7, #12]
 8000608:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 800060c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
	LCD->FUNCTIONSET = LCD_FUNCTIONSET|LCD_4BITMODE|LCD_2LINE|LCD_5x8DOTS;
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	2228      	movs	r2, #40	@ 0x28
 8000614:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55
	LCD->ENTRYMODE = LCD_ENTRYMODESET|LCD_ENTRYLEFT|LCD_ENTRYSHIFTDECREMENT;
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	2206      	movs	r2, #6
 800061c:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
	LCD->DISPLAYCTRL = LCD_DISPLAYCONTROL|LCD_DISPLAYON|LCD_CURSOROFF|LCD_BLINKOFF;
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	220c      	movs	r2, #12
 8000624:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
	LCD->CURSORSHIFT = LCD_CURSORSHIFT|LCD_CURSORMOVE|LCD_MOVERIGHT;
 8000628:	68fb      	ldr	r3, [r7, #12]
 800062a:	2214      	movs	r2, #20
 800062c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

	CLCD_Delay(50);
 8000630:	2032      	movs	r0, #50	@ 0x32
 8000632:	f7ff fe28 	bl	8000286 <CLCD_Delay>
	CLCD_Write4(LCD, 0x33, CLCD_COMMAND);
 8000636:	2200      	movs	r2, #0
 8000638:	2133      	movs	r1, #51	@ 0x33
 800063a:	68f8      	ldr	r0, [r7, #12]
 800063c:	f7ff feda 	bl	80003f4 <CLCD_Write4>
	CLCD_Delay(5);
 8000640:	2005      	movs	r0, #5
 8000642:	f7ff fe20 	bl	8000286 <CLCD_Delay>
	CLCD_Write4(LCD, 0x33, CLCD_COMMAND);
 8000646:	2200      	movs	r2, #0
 8000648:	2133      	movs	r1, #51	@ 0x33
 800064a:	68f8      	ldr	r0, [r7, #12]
 800064c:	f7ff fed2 	bl	80003f4 <CLCD_Write4>
	CLCD_Delay(5);
 8000650:	2005      	movs	r0, #5
 8000652:	f7ff fe18 	bl	8000286 <CLCD_Delay>
	CLCD_Write4(LCD, 0x32, CLCD_COMMAND);
 8000656:	2200      	movs	r2, #0
 8000658:	2132      	movs	r1, #50	@ 0x32
 800065a:	68f8      	ldr	r0, [r7, #12]
 800065c:	f7ff feca 	bl	80003f4 <CLCD_Write4>
	CLCD_Delay(5);
 8000660:	2005      	movs	r0, #5
 8000662:	f7ff fe10 	bl	8000286 <CLCD_Delay>

	CLCD_Write4(LCD, LCD->ENTRYMODE,CLCD_COMMAND);
 8000666:	68fb      	ldr	r3, [r7, #12]
 8000668:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 800066c:	2200      	movs	r2, #0
 800066e:	4619      	mov	r1, r3
 8000670:	68f8      	ldr	r0, [r7, #12]
 8000672:	f7ff febf 	bl	80003f4 <CLCD_Write4>
	CLCD_Write4(LCD, LCD->DISPLAYCTRL,CLCD_COMMAND);
 8000676:	68fb      	ldr	r3, [r7, #12]
 8000678:	f893 3053 	ldrb.w	r3, [r3, #83]	@ 0x53
 800067c:	2200      	movs	r2, #0
 800067e:	4619      	mov	r1, r3
 8000680:	68f8      	ldr	r0, [r7, #12]
 8000682:	f7ff feb7 	bl	80003f4 <CLCD_Write4>
	CLCD_Write4(LCD, LCD->CURSORSHIFT,CLCD_COMMAND);
 8000686:	68fb      	ldr	r3, [r7, #12]
 8000688:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800068c:	2200      	movs	r2, #0
 800068e:	4619      	mov	r1, r3
 8000690:	68f8      	ldr	r0, [r7, #12]
 8000692:	f7ff feaf 	bl	80003f4 <CLCD_Write4>
	CLCD_Write4(LCD, LCD->FUNCTIONSET,CLCD_COMMAND);
 8000696:	68fb      	ldr	r3, [r7, #12]
 8000698:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 800069c:	2200      	movs	r2, #0
 800069e:	4619      	mov	r1, r3
 80006a0:	68f8      	ldr	r0, [r7, #12]
 80006a2:	f7ff fea7 	bl	80003f4 <CLCD_Write4>

	CLCD_Write4(LCD, LCD_CLEARDISPLAY,CLCD_COMMAND);
 80006a6:	2200      	movs	r2, #0
 80006a8:	2101      	movs	r1, #1
 80006aa:	68f8      	ldr	r0, [r7, #12]
 80006ac:	f7ff fea2 	bl	80003f4 <CLCD_Write4>
	CLCD_Write4(LCD, LCD_RETURNHOME,CLCD_COMMAND);
 80006b0:	2200      	movs	r2, #0
 80006b2:	2102      	movs	r1, #2
 80006b4:	68f8      	ldr	r0, [r7, #12]
 80006b6:	f7ff fe9d 	bl	80003f4 <CLCD_Write4>
}
 80006ba:	bf00      	nop
 80006bc:	3710      	adds	r7, #16
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
	...

080006c4 <CLCD_SetCursor>:
void CLCD_SetCursor(CLCD_Name* LCD, uint8_t Xpos, uint8_t Ypos)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b084      	sub	sp, #16
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
 80006cc:	460b      	mov	r3, r1
 80006ce:	70fb      	strb	r3, [r7, #3]
 80006d0:	4613      	mov	r3, r2
 80006d2:	70bb      	strb	r3, [r7, #2]

	uint8_t DRAM_ADDRESS = 0x00;
 80006d4:	2300      	movs	r3, #0
 80006d6:	73fb      	strb	r3, [r7, #15]
	uint8_t DRAM_OFFSET[4] = {0x00, 0x40, 0x14, 0x54};
 80006d8:	4b1d      	ldr	r3, [pc, #116]	@ (8000750 <CLCD_SetCursor+0x8c>)
 80006da:	60bb      	str	r3, [r7, #8]
	if(Xpos >= LCD->COLUMS)
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	785b      	ldrb	r3, [r3, #1]
 80006e0:	78fa      	ldrb	r2, [r7, #3]
 80006e2:	429a      	cmp	r2, r3
 80006e4:	d303      	bcc.n	80006ee <CLCD_SetCursor+0x2a>
	{
		Xpos = LCD->COLUMS - 1;
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	785b      	ldrb	r3, [r3, #1]
 80006ea:	3b01      	subs	r3, #1
 80006ec:	70fb      	strb	r3, [r7, #3]
	}
	if(Ypos >= LCD->ROWS)
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	789b      	ldrb	r3, [r3, #2]
 80006f2:	78ba      	ldrb	r2, [r7, #2]
 80006f4:	429a      	cmp	r2, r3
 80006f6:	d303      	bcc.n	8000700 <CLCD_SetCursor+0x3c>
	{
		Ypos = LCD->ROWS -1;
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	789b      	ldrb	r3, [r3, #2]
 80006fc:	3b01      	subs	r3, #1
 80006fe:	70bb      	strb	r3, [r7, #2]
	}
	DRAM_ADDRESS = DRAM_OFFSET[Ypos] + Xpos;
 8000700:	78bb      	ldrb	r3, [r7, #2]
 8000702:	3310      	adds	r3, #16
 8000704:	443b      	add	r3, r7
 8000706:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 800070a:	78fb      	ldrb	r3, [r7, #3]
 800070c:	4413      	add	r3, r2
 800070e:	73fb      	strb	r3, [r7, #15]
	if(LCD->MODE == LCD_8BITMODE)
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	2b10      	cmp	r3, #16
 8000716:	d109      	bne.n	800072c <CLCD_SetCursor+0x68>
	{
		CLCD_Write8(LCD, LCD_SETDDRAMADDR|DRAM_ADDRESS, CLCD_COMMAND);
 8000718:	7bfb      	ldrb	r3, [r7, #15]
 800071a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800071e:	b2db      	uxtb	r3, r3
 8000720:	2200      	movs	r2, #0
 8000722:	4619      	mov	r1, r3
 8000724:	6878      	ldr	r0, [r7, #4]
 8000726:	f7ff fdbb 	bl	80002a0 <CLCD_Write8>
	}
	else if(LCD->MODE == LCD_4BITMODE)
	{
		CLCD_Write4(LCD, LCD_SETDDRAMADDR|DRAM_ADDRESS, CLCD_COMMAND);
	}
}
 800072a:	e00c      	b.n	8000746 <CLCD_SetCursor+0x82>
	else if(LCD->MODE == LCD_4BITMODE)
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	2b00      	cmp	r3, #0
 8000732:	d108      	bne.n	8000746 <CLCD_SetCursor+0x82>
		CLCD_Write4(LCD, LCD_SETDDRAMADDR|DRAM_ADDRESS, CLCD_COMMAND);
 8000734:	7bfb      	ldrb	r3, [r7, #15]
 8000736:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800073a:	b2db      	uxtb	r3, r3
 800073c:	2200      	movs	r2, #0
 800073e:	4619      	mov	r1, r3
 8000740:	6878      	ldr	r0, [r7, #4]
 8000742:	f7ff fe57 	bl	80003f4 <CLCD_Write4>
}
 8000746:	bf00      	nop
 8000748:	3710      	adds	r7, #16
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	54144000 	.word	0x54144000

08000754 <CLCD_WriteChar>:
void CLCD_WriteChar(CLCD_Name* LCD, char character)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
 800075c:	460b      	mov	r3, r1
 800075e:	70fb      	strb	r3, [r7, #3]
	if(LCD->MODE == LCD_8BITMODE)
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	781b      	ldrb	r3, [r3, #0]
 8000764:	2b10      	cmp	r3, #16
 8000766:	d106      	bne.n	8000776 <CLCD_WriteChar+0x22>
	{
		CLCD_Write8(LCD, character, CLCD_DATA);
 8000768:	78fb      	ldrb	r3, [r7, #3]
 800076a:	2201      	movs	r2, #1
 800076c:	4619      	mov	r1, r3
 800076e:	6878      	ldr	r0, [r7, #4]
 8000770:	f7ff fd96 	bl	80002a0 <CLCD_Write8>
	}
	else if(LCD->MODE == LCD_4BITMODE)
	{
		CLCD_Write4(LCD, character, CLCD_DATA);
	}
}
 8000774:	e009      	b.n	800078a <CLCD_WriteChar+0x36>
	else if(LCD->MODE == LCD_4BITMODE)
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	781b      	ldrb	r3, [r3, #0]
 800077a:	2b00      	cmp	r3, #0
 800077c:	d105      	bne.n	800078a <CLCD_WriteChar+0x36>
		CLCD_Write4(LCD, character, CLCD_DATA);
 800077e:	78fb      	ldrb	r3, [r7, #3]
 8000780:	2201      	movs	r2, #1
 8000782:	4619      	mov	r1, r3
 8000784:	6878      	ldr	r0, [r7, #4]
 8000786:	f7ff fe35 	bl	80003f4 <CLCD_Write4>
}
 800078a:	bf00      	nop
 800078c:	3708      	adds	r7, #8
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}

08000792 <CLCD_WriteString>:
void CLCD_WriteString(CLCD_Name* LCD, char *String)
{
 8000792:	b580      	push	{r7, lr}
 8000794:	b082      	sub	sp, #8
 8000796:	af00      	add	r7, sp, #0
 8000798:	6078      	str	r0, [r7, #4]
 800079a:	6039      	str	r1, [r7, #0]
	while(*String){
 800079c:	e007      	b.n	80007ae <CLCD_WriteString+0x1c>
		CLCD_WriteChar(LCD, *String++);
 800079e:	683b      	ldr	r3, [r7, #0]
 80007a0:	1c5a      	adds	r2, r3, #1
 80007a2:	603a      	str	r2, [r7, #0]
 80007a4:	781b      	ldrb	r3, [r3, #0]
 80007a6:	4619      	mov	r1, r3
 80007a8:	6878      	ldr	r0, [r7, #4]
 80007aa:	f7ff ffd3 	bl	8000754 <CLCD_WriteChar>
	while(*String){
 80007ae:	683b      	ldr	r3, [r7, #0]
 80007b0:	781b      	ldrb	r3, [r3, #0]
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d1f3      	bne.n	800079e <CLCD_WriteString+0xc>
//		HAL_Delay(100);
	}
}
 80007b6:	bf00      	nop
 80007b8:	bf00      	nop
 80007ba:	3708      	adds	r7, #8
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}

080007c0 <CLCD_Clear>:
void CLCD_Clear(CLCD_Name* LCD)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
	if(LCD->MODE == LCD_8BITMODE)
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	781b      	ldrb	r3, [r3, #0]
 80007cc:	2b10      	cmp	r3, #16
 80007ce:	d105      	bne.n	80007dc <CLCD_Clear+0x1c>
	{
		CLCD_Write8(LCD, LCD_CLEARDISPLAY, CLCD_COMMAND);
 80007d0:	2200      	movs	r2, #0
 80007d2:	2101      	movs	r1, #1
 80007d4:	6878      	ldr	r0, [r7, #4]
 80007d6:	f7ff fd63 	bl	80002a0 <CLCD_Write8>
 80007da:	e008      	b.n	80007ee <CLCD_Clear+0x2e>
	}
	else if(LCD->MODE == LCD_4BITMODE)
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d104      	bne.n	80007ee <CLCD_Clear+0x2e>
	{
		CLCD_Write4(LCD, LCD_CLEARDISPLAY, CLCD_COMMAND);
 80007e4:	2200      	movs	r2, #0
 80007e6:	2101      	movs	r1, #1
 80007e8:	6878      	ldr	r0, [r7, #4]
 80007ea:	f7ff fe03 	bl	80003f4 <CLCD_Write4>
	}
	CLCD_Delay(5);
 80007ee:	2005      	movs	r0, #5
 80007f0:	f7ff fd49 	bl	8000286 <CLCD_Delay>
}
 80007f4:	bf00      	nop
 80007f6:	3708      	adds	r7, #8
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}

080007fc <HAL_TIM_PeriodElapsedCallback>:
uint8_t CheckUID(uint8_t *data, uint32_t address);
uint8_t CheckListUID(uint8_t *data);
uint8_t checkbuton(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin);

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b082      	sub	sp, #8
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000804:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000808:	480a      	ldr	r0, [pc, #40]	@ (8000834 <HAL_TIM_PeriodElapsedCallback+0x38>)
 800080a:	f003 ff32 	bl	8004672 <HAL_GPIO_TogglePin>
	if(exitmenu > 0)
 800080e:	4b0a      	ldr	r3, [pc, #40]	@ (8000838 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000810:	781b      	ldrb	r3, [r3, #0]
 8000812:	2b00      	cmp	r3, #0
 8000814:	d006      	beq.n	8000824 <HAL_TIM_PeriodElapsedCallback+0x28>
		exitmenu --;
 8000816:	4b08      	ldr	r3, [pc, #32]	@ (8000838 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000818:	781b      	ldrb	r3, [r3, #0]
 800081a:	3b01      	subs	r3, #1
 800081c:	b2da      	uxtb	r2, r3
 800081e:	4b06      	ldr	r3, [pc, #24]	@ (8000838 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000820:	701a      	strb	r2, [r3, #0]
	else exitmenu = 0;
}
 8000822:	e002      	b.n	800082a <HAL_TIM_PeriodElapsedCallback+0x2e>
	else exitmenu = 0;
 8000824:	4b04      	ldr	r3, [pc, #16]	@ (8000838 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000826:	2200      	movs	r2, #0
 8000828:	701a      	strb	r2, [r3, #0]
}
 800082a:	bf00      	nop
 800082c:	3708      	adds	r7, #8
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	40011000 	.word	0x40011000
 8000838:	20000000 	.word	0x20000000

0800083c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b08e      	sub	sp, #56	@ 0x38
 8000840:	af0c      	add	r7, sp, #48	@ 0x30
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000842:	f003 f9cf 	bl	8003be4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000846:	f000 f955 	bl	8000af4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800084a:	f000 fa1d 	bl	8000c88 <MX_GPIO_Init>
  MX_SPI1_Init();
 800084e:	f000 f997 	bl	8000b80 <MX_SPI1_Init>
  MX_TIM2_Init();
 8000852:	f000 f9cb 	bl	8000bec <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

	TM_MFRC522_Init();
 8000856:	f002 fe4d 	bl	80034f4 <TM_MFRC522_Init>

	CLCD_4BIT_Init(&LCD1, 16, 2, RS_GPIO_Port, RS_Pin, EN_GPIO_Port, EN_Pin,
 800085a:	2308      	movs	r3, #8
 800085c:	930a      	str	r3, [sp, #40]	@ 0x28
 800085e:	4b97      	ldr	r3, [pc, #604]	@ (8000abc <main+0x280>)
 8000860:	9309      	str	r3, [sp, #36]	@ 0x24
 8000862:	2310      	movs	r3, #16
 8000864:	9308      	str	r3, [sp, #32]
 8000866:	4b95      	ldr	r3, [pc, #596]	@ (8000abc <main+0x280>)
 8000868:	9307      	str	r3, [sp, #28]
 800086a:	2320      	movs	r3, #32
 800086c:	9306      	str	r3, [sp, #24]
 800086e:	4b93      	ldr	r3, [pc, #588]	@ (8000abc <main+0x280>)
 8000870:	9305      	str	r3, [sp, #20]
 8000872:	2340      	movs	r3, #64	@ 0x40
 8000874:	9304      	str	r3, [sp, #16]
 8000876:	4b91      	ldr	r3, [pc, #580]	@ (8000abc <main+0x280>)
 8000878:	9303      	str	r3, [sp, #12]
 800087a:	2380      	movs	r3, #128	@ 0x80
 800087c:	9302      	str	r3, [sp, #8]
 800087e:	4b8f      	ldr	r3, [pc, #572]	@ (8000abc <main+0x280>)
 8000880:	9301      	str	r3, [sp, #4]
 8000882:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000886:	9300      	str	r3, [sp, #0]
 8000888:	4b8c      	ldr	r3, [pc, #560]	@ (8000abc <main+0x280>)
 800088a:	2202      	movs	r2, #2
 800088c:	2110      	movs	r1, #16
 800088e:	488c      	ldr	r0, [pc, #560]	@ (8000ac0 <main+0x284>)
 8000890:	f7ff fe84 	bl	800059c <CLCD_4BIT_Init>
				   D6_GPIO_Port, D6_Pin, D7_GPIO_Port, D7_Pin);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	HAL_TIM_Base_Start_IT(&htim2);
 8000894:	488b      	ldr	r0, [pc, #556]	@ (8000ac4 <main+0x288>)
 8000896:	f004 fe09 	bl	80054ac <HAL_TIM_Base_Start_IT>
	if (checkcountUID() == 0)
 800089a:	f002 fa39 	bl	8002d10 <checkcountUID>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d101      	bne.n	80008a8 <main+0x6c>
	{
		startadd();
 80008a4:	f002 fc66 	bl	8003174 <startadd>
	{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		CLCD_SetCursor(&LCD1, 0, 0);
 80008a8:	2200      	movs	r2, #0
 80008aa:	2100      	movs	r1, #0
 80008ac:	4884      	ldr	r0, [pc, #528]	@ (8000ac0 <main+0x284>)
 80008ae:	f7ff ff09 	bl	80006c4 <CLCD_SetCursor>
		CLCD_WriteString(&LCD1, " MOI QUET THE ");
 80008b2:	4985      	ldr	r1, [pc, #532]	@ (8000ac8 <main+0x28c>)
 80008b4:	4882      	ldr	r0, [pc, #520]	@ (8000ac0 <main+0x284>)
 80008b6:	f7ff ff6c 	bl	8000792 <CLCD_WriteString>
		if (checkbuton(MENU_GPIO_Port, MENU_Pin) != 0)
 80008ba:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80008be:	4883      	ldr	r0, [pc, #524]	@ (8000acc <main+0x290>)
 80008c0:	f000 fa82 	bl	8000dc8 <checkbuton>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	f000 8081 	beq.w	80009ce <main+0x192>
		{
			exitmenu = 15;
 80008cc:	4b80      	ldr	r3, [pc, #512]	@ (8000ad0 <main+0x294>)
 80008ce:	220f      	movs	r2, #15
 80008d0:	701a      	strb	r2, [r3, #0]
			CLCD_SetCursor(&LCD1, 0, 1);
 80008d2:	2201      	movs	r2, #1
 80008d4:	2100      	movs	r1, #0
 80008d6:	487a      	ldr	r0, [pc, #488]	@ (8000ac0 <main+0x284>)
 80008d8:	f7ff fef4 	bl	80006c4 <CLCD_SetCursor>
			CLCD_WriteString(&LCD1, "THE NGUOI LON");
 80008dc:	497d      	ldr	r1, [pc, #500]	@ (8000ad4 <main+0x298>)
 80008de:	4878      	ldr	r0, [pc, #480]	@ (8000ac0 <main+0x284>)
 80008e0:	f7ff ff57 	bl	8000792 <CLCD_WriteString>
			uint8_t key = 0;
 80008e4:	2300      	movs	r3, #0
 80008e6:	71fb      	strb	r3, [r7, #7]
			uint8_t stat ;
			while (exitmenu )
 80008e8:	e046      	b.n	8000978 <main+0x13c>
			{
				if (TM_MFRC522_Check(CardID) == MI_OK)
 80008ea:	487b      	ldr	r0, [pc, #492]	@ (8000ad8 <main+0x29c>)
 80008ec:	f002 fe26 	bl	800353c <TM_MFRC522_Check>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d125      	bne.n	8000942 <main+0x106>
				{
					HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 1);
 80008f6:	2201      	movs	r2, #1
 80008f8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80008fc:	486f      	ldr	r0, [pc, #444]	@ (8000abc <main+0x280>)
 80008fe:	f003 fea0 	bl	8004642 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LOA_GPIO_Port, LOA_Pin, 1);
 8000902:	2201      	movs	r2, #1
 8000904:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000908:	486c      	ldr	r0, [pc, #432]	@ (8000abc <main+0x280>)
 800090a:	f003 fe9a 	bl	8004642 <HAL_GPIO_WritePin>
					HAL_Delay(delayloa);
 800090e:	4b73      	ldr	r3, [pc, #460]	@ (8000adc <main+0x2a0>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	4618      	mov	r0, r3
 8000914:	f003 f9c8 	bl	8003ca8 <HAL_Delay>
					HAL_GPIO_WritePin(LOA_GPIO_Port, LOA_Pin, 0);
 8000918:	2200      	movs	r2, #0
 800091a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800091e:	4867      	ldr	r0, [pc, #412]	@ (8000abc <main+0x280>)
 8000920:	f003 fe8f 	bl	8004642 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);
 8000924:	2200      	movs	r2, #0
 8000926:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800092a:	4864      	ldr	r0, [pc, #400]	@ (8000abc <main+0x280>)
 800092c:	f003 fe89 	bl	8004642 <HAL_GPIO_WritePin>
					key = CheckListUID(CardID);
 8000930:	4869      	ldr	r0, [pc, #420]	@ (8000ad8 <main+0x29c>)
 8000932:	f002 f9bd 	bl	8002cb0 <CheckListUID>
 8000936:	4603      	mov	r3, r0
 8000938:	71fb      	strb	r3, [r7, #7]
					key = key >> 4;
 800093a:	79fb      	ldrb	r3, [r7, #7]
 800093c:	091b      	lsrs	r3, r3, #4
 800093e:	71fb      	strb	r3, [r7, #7]
					break;
 8000940:	e01e      	b.n	8000980 <main+0x144>
				}
				stat = checkbuton(MENU_GPIO_Port, MENU_Pin);
 8000942:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000946:	4861      	ldr	r0, [pc, #388]	@ (8000acc <main+0x290>)
 8000948:	f000 fa3e 	bl	8000dc8 <checkbuton>
 800094c:	4603      	mov	r3, r0
 800094e:	71bb      	strb	r3, [r7, #6]
				switch(stat){
 8000950:	79bb      	ldrb	r3, [r7, #6]
 8000952:	2b00      	cmp	r3, #0
 8000954:	d00f      	beq.n	8000976 <main+0x13a>
 8000956:	2b03      	cmp	r3, #3
 8000958:	d107      	bne.n	800096a <main+0x12e>
				case 0:
					break;
				case 3:
					password();
 800095a:	f002 fccf 	bl	80032fc <password>
					key = 99;
 800095e:	2363      	movs	r3, #99	@ 0x63
 8000960:	71fb      	strb	r3, [r7, #7]
					exitmenu = 0;
 8000962:	4b5b      	ldr	r3, [pc, #364]	@ (8000ad0 <main+0x294>)
 8000964:	2200      	movs	r2, #0
 8000966:	701a      	strb	r2, [r3, #0]
					break;
 8000968:	e006      	b.n	8000978 <main+0x13c>
				default :
					key = 2;
 800096a:	2302      	movs	r3, #2
 800096c:	71fb      	strb	r3, [r7, #7]
					exitmenu = 0;
 800096e:	4b58      	ldr	r3, [pc, #352]	@ (8000ad0 <main+0x294>)
 8000970:	2200      	movs	r2, #0
 8000972:	701a      	strb	r2, [r3, #0]
					break;
 8000974:	e000      	b.n	8000978 <main+0x13c>
					break;
 8000976:	bf00      	nop
			while (exitmenu )
 8000978:	4b55      	ldr	r3, [pc, #340]	@ (8000ad0 <main+0x294>)
 800097a:	781b      	ldrb	r3, [r3, #0]
 800097c:	2b00      	cmp	r3, #0
 800097e:	d1b4      	bne.n	80008ea <main+0xae>
				}
			}
			switch (key){
 8000980:	79fb      	ldrb	r3, [r7, #7]
 8000982:	2b01      	cmp	r3, #1
 8000984:	d002      	beq.n	800098c <main+0x150>
 8000986:	2b63      	cmp	r3, #99	@ 0x63
 8000988:	d020      	beq.n	80009cc <main+0x190>
 800098a:	e002      	b.n	8000992 <main+0x156>
			case 1:
				seclectmenu();
 800098c:	f000 fa6a 	bl	8000e64 <seclectmenu>
				break;
 8000990:	e01d      	b.n	80009ce <main+0x192>
			case 99:
				break;
			default:
				CLCD_Clear(&LCD1);
 8000992:	484b      	ldr	r0, [pc, #300]	@ (8000ac0 <main+0x284>)
 8000994:	f7ff ff14 	bl	80007c0 <CLCD_Clear>
				CLCD_SetCursor(&LCD1, 0, 0);
 8000998:	2200      	movs	r2, #0
 800099a:	2100      	movs	r1, #0
 800099c:	4848      	ldr	r0, [pc, #288]	@ (8000ac0 <main+0x284>)
 800099e:	f7ff fe91 	bl	80006c4 <CLCD_SetCursor>
				CLCD_WriteString(&LCD1, "      SAI ");
 80009a2:	494f      	ldr	r1, [pc, #316]	@ (8000ae0 <main+0x2a4>)
 80009a4:	4846      	ldr	r0, [pc, #280]	@ (8000ac0 <main+0x284>)
 80009a6:	f7ff fef4 	bl	8000792 <CLCD_WriteString>
				CLCD_SetCursor(&LCD1, 0, 1);
 80009aa:	2201      	movs	r2, #1
 80009ac:	2100      	movs	r1, #0
 80009ae:	4844      	ldr	r0, [pc, #272]	@ (8000ac0 <main+0x284>)
 80009b0:	f7ff fe88 	bl	80006c4 <CLCD_SetCursor>
				CLCD_WriteString(&LCD1, "KHONG CO QUYEN");
 80009b4:	494b      	ldr	r1, [pc, #300]	@ (8000ae4 <main+0x2a8>)
 80009b6:	4842      	ldr	r0, [pc, #264]	@ (8000ac0 <main+0x284>)
 80009b8:	f7ff feeb 	bl	8000792 <CLCD_WriteString>
				HAL_Delay(1000);
 80009bc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80009c0:	f003 f972 	bl	8003ca8 <HAL_Delay>
				CLCD_Clear(&LCD1);
 80009c4:	483e      	ldr	r0, [pc, #248]	@ (8000ac0 <main+0x284>)
 80009c6:	f7ff fefb 	bl	80007c0 <CLCD_Clear>
				break;
 80009ca:	e000      	b.n	80009ce <main+0x192>
				break;
 80009cc:	bf00      	nop
			}
		}
		if (TM_MFRC522_Check(CardID) == MI_OK)
 80009ce:	4842      	ldr	r0, [pc, #264]	@ (8000ad8 <main+0x29c>)
 80009d0:	f002 fdb4 	bl	800353c <TM_MFRC522_Check>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	f47f af66 	bne.w	80008a8 <main+0x6c>
		{
//			sprintf(str, "ID: 0x%02X%02X%02X%02X%02X", CardID[0], CardID[1], CardID[2], CardID[3], CardID[4]);
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 1);
 80009dc:	2201      	movs	r2, #1
 80009de:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80009e2:	4836      	ldr	r0, [pc, #216]	@ (8000abc <main+0x280>)
 80009e4:	f003 fe2d 	bl	8004642 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LOA_GPIO_Port, LOA_Pin, 1);
 80009e8:	2201      	movs	r2, #1
 80009ea:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80009ee:	4833      	ldr	r0, [pc, #204]	@ (8000abc <main+0x280>)
 80009f0:	f003 fe27 	bl	8004642 <HAL_GPIO_WritePin>
			HAL_Delay(delayloa);
 80009f4:	4b39      	ldr	r3, [pc, #228]	@ (8000adc <main+0x2a0>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	4618      	mov	r0, r3
 80009fa:	f003 f955 	bl	8003ca8 <HAL_Delay>
			HAL_GPIO_WritePin(LOA_GPIO_Port, LOA_Pin, 0);
 80009fe:	2200      	movs	r2, #0
 8000a00:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000a04:	482d      	ldr	r0, [pc, #180]	@ (8000abc <main+0x280>)
 8000a06:	f003 fe1c 	bl	8004642 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000a10:	482a      	ldr	r0, [pc, #168]	@ (8000abc <main+0x280>)
 8000a12:	f003 fe16 	bl	8004642 <HAL_GPIO_WritePin>
			if (CheckListUID(CardID) != 0)
 8000a16:	4830      	ldr	r0, [pc, #192]	@ (8000ad8 <main+0x29c>)
 8000a18:	f002 f94a 	bl	8002cb0 <CheckListUID>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d025      	beq.n	8000a6e <main+0x232>
			{
				HAL_GPIO_WritePin(KHOA_GPIO_Port, KHOA_Pin, 1);
 8000a22:	2201      	movs	r2, #1
 8000a24:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a28:	4824      	ldr	r0, [pc, #144]	@ (8000abc <main+0x280>)
 8000a2a:	f003 fe0a 	bl	8004642 <HAL_GPIO_WritePin>
				CLCD_Clear(&LCD1);
 8000a2e:	4824      	ldr	r0, [pc, #144]	@ (8000ac0 <main+0x284>)
 8000a30:	f7ff fec6 	bl	80007c0 <CLCD_Clear>
				CLCD_SetCursor(&LCD1, 0, 0);
 8000a34:	2200      	movs	r2, #0
 8000a36:	2100      	movs	r1, #0
 8000a38:	4821      	ldr	r0, [pc, #132]	@ (8000ac0 <main+0x284>)
 8000a3a:	f7ff fe43 	bl	80006c4 <CLCD_SetCursor>
				CLCD_WriteString(&LCD1, "    WELCOME");
 8000a3e:	492a      	ldr	r1, [pc, #168]	@ (8000ae8 <main+0x2ac>)
 8000a40:	481f      	ldr	r0, [pc, #124]	@ (8000ac0 <main+0x284>)
 8000a42:	f7ff fea6 	bl	8000792 <CLCD_WriteString>
				CLCD_SetCursor(&LCD1, 0, 1);
 8000a46:	2201      	movs	r2, #1
 8000a48:	2100      	movs	r1, #0
 8000a4a:	481d      	ldr	r0, [pc, #116]	@ (8000ac0 <main+0x284>)
 8000a4c:	f7ff fe3a 	bl	80006c4 <CLCD_SetCursor>
				CLCD_WriteString(&LCD1,str);
 8000a50:	4926      	ldr	r1, [pc, #152]	@ (8000aec <main+0x2b0>)
 8000a52:	481b      	ldr	r0, [pc, #108]	@ (8000ac0 <main+0x284>)
 8000a54:	f7ff fe9d 	bl	8000792 <CLCD_WriteString>
				HAL_Delay(5000);
 8000a58:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000a5c:	f003 f924 	bl	8003ca8 <HAL_Delay>
				HAL_GPIO_WritePin(KHOA_GPIO_Port, KHOA_Pin, 0);
 8000a60:	2200      	movs	r2, #0
 8000a62:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a66:	4815      	ldr	r0, [pc, #84]	@ (8000abc <main+0x280>)
 8000a68:	f003 fdeb 	bl	8004642 <HAL_GPIO_WritePin>
 8000a6c:	e018      	b.n	8000aa0 <main+0x264>
			}
			else
			{
				CLCD_Clear(&LCD1);
 8000a6e:	4814      	ldr	r0, [pc, #80]	@ (8000ac0 <main+0x284>)
 8000a70:	f7ff fea6 	bl	80007c0 <CLCD_Clear>
				CLCD_SetCursor(&LCD1, 0, 0);
 8000a74:	2200      	movs	r2, #0
 8000a76:	2100      	movs	r1, #0
 8000a78:	4811      	ldr	r0, [pc, #68]	@ (8000ac0 <main+0x284>)
 8000a7a:	f7ff fe23 	bl	80006c4 <CLCD_SetCursor>
				CLCD_WriteString(&LCD1, "   THE SAI");
 8000a7e:	491c      	ldr	r1, [pc, #112]	@ (8000af0 <main+0x2b4>)
 8000a80:	480f      	ldr	r0, [pc, #60]	@ (8000ac0 <main+0x284>)
 8000a82:	f7ff fe86 	bl	8000792 <CLCD_WriteString>
				CLCD_SetCursor(&LCD1, 0, 1);
 8000a86:	2201      	movs	r2, #1
 8000a88:	2100      	movs	r1, #0
 8000a8a:	480d      	ldr	r0, [pc, #52]	@ (8000ac0 <main+0x284>)
 8000a8c:	f7ff fe1a 	bl	80006c4 <CLCD_SetCursor>
				CLCD_WriteString(&LCD1, str);
 8000a90:	4916      	ldr	r1, [pc, #88]	@ (8000aec <main+0x2b0>)
 8000a92:	480b      	ldr	r0, [pc, #44]	@ (8000ac0 <main+0x284>)
 8000a94:	f7ff fe7d 	bl	8000792 <CLCD_WriteString>
				HAL_Delay(5000);
 8000a98:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000a9c:	f003 f904 	bl	8003ca8 <HAL_Delay>
			}

			CLCD_Clear(&LCD1);
 8000aa0:	4807      	ldr	r0, [pc, #28]	@ (8000ac0 <main+0x284>)
 8000aa2:	f7ff fe8d 	bl	80007c0 <CLCD_Clear>
			CLCD_SetCursor(&LCD1, 0, 0);
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	2100      	movs	r1, #0
 8000aaa:	4805      	ldr	r0, [pc, #20]	@ (8000ac0 <main+0x284>)
 8000aac:	f7ff fe0a 	bl	80006c4 <CLCD_SetCursor>
			CLCD_WriteString(&LCD1, " MOI QUET THE ");
 8000ab0:	4905      	ldr	r1, [pc, #20]	@ (8000ac8 <main+0x28c>)
 8000ab2:	4803      	ldr	r0, [pc, #12]	@ (8000ac0 <main+0x284>)
 8000ab4:	f7ff fe6d 	bl	8000792 <CLCD_WriteString>
		CLCD_SetCursor(&LCD1, 0, 0);
 8000ab8:	e6f6      	b.n	80008a8 <main+0x6c>
 8000aba:	bf00      	nop
 8000abc:	40010c00 	.word	0x40010c00
 8000ac0:	200000f4 	.word	0x200000f4
 8000ac4:	2000009c 	.word	0x2000009c
 8000ac8:	08005c70 	.word	0x08005c70
 8000acc:	40010800 	.word	0x40010800
 8000ad0:	20000000 	.word	0x20000000
 8000ad4:	08005c80 	.word	0x08005c80
 8000ad8:	200000e4 	.word	0x200000e4
 8000adc:	20000018 	.word	0x20000018
 8000ae0:	08005c90 	.word	0x08005c90
 8000ae4:	08005c9c 	.word	0x08005c9c
 8000ae8:	08005cac 	.word	0x08005cac
 8000aec:	2000014c 	.word	0x2000014c
 8000af0:	08005cb8 	.word	0x08005cb8

08000af4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b090      	sub	sp, #64	@ 0x40
 8000af8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000afa:	f107 0318 	add.w	r3, r7, #24
 8000afe:	2228      	movs	r2, #40	@ 0x28
 8000b00:	2100      	movs	r1, #0
 8000b02:	4618      	mov	r0, r3
 8000b04:	f005 f87c 	bl	8005c00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b08:	1d3b      	adds	r3, r7, #4
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	601a      	str	r2, [r3, #0]
 8000b0e:	605a      	str	r2, [r3, #4]
 8000b10:	609a      	str	r2, [r3, #8]
 8000b12:	60da      	str	r2, [r3, #12]
 8000b14:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b16:	2301      	movs	r3, #1
 8000b18:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b1a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000b1e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000b20:	2300      	movs	r3, #0
 8000b22:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b24:	2301      	movs	r3, #1
 8000b26:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b28:	2302      	movs	r3, #2
 8000b2a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b2c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000b30:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000b32:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000b36:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b38:	f107 0318 	add.w	r3, r7, #24
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f003 fdb1 	bl	80046a4 <HAL_RCC_OscConfig>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d001      	beq.n	8000b4c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000b48:	f002 fca6 	bl	8003498 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b4c:	230f      	movs	r3, #15
 8000b4e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b50:	2302      	movs	r3, #2
 8000b52:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b54:	2300      	movs	r3, #0
 8000b56:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b58:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b5c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b62:	1d3b      	adds	r3, r7, #4
 8000b64:	2102      	movs	r1, #2
 8000b66:	4618      	mov	r0, r3
 8000b68:	f004 f81e 	bl	8004ba8 <HAL_RCC_ClockConfig>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000b72:	f002 fc91 	bl	8003498 <Error_Handler>
  }
}
 8000b76:	bf00      	nop
 8000b78:	3740      	adds	r7, #64	@ 0x40
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
	...

08000b80 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000b84:	4b17      	ldr	r3, [pc, #92]	@ (8000be4 <MX_SPI1_Init+0x64>)
 8000b86:	4a18      	ldr	r2, [pc, #96]	@ (8000be8 <MX_SPI1_Init+0x68>)
 8000b88:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b8a:	4b16      	ldr	r3, [pc, #88]	@ (8000be4 <MX_SPI1_Init+0x64>)
 8000b8c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000b90:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000b92:	4b14      	ldr	r3, [pc, #80]	@ (8000be4 <MX_SPI1_Init+0x64>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b98:	4b12      	ldr	r3, [pc, #72]	@ (8000be4 <MX_SPI1_Init+0x64>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b9e:	4b11      	ldr	r3, [pc, #68]	@ (8000be4 <MX_SPI1_Init+0x64>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ba4:	4b0f      	ldr	r3, [pc, #60]	@ (8000be4 <MX_SPI1_Init+0x64>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000baa:	4b0e      	ldr	r3, [pc, #56]	@ (8000be4 <MX_SPI1_Init+0x64>)
 8000bac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000bb0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000bb2:	4b0c      	ldr	r3, [pc, #48]	@ (8000be4 <MX_SPI1_Init+0x64>)
 8000bb4:	2230      	movs	r2, #48	@ 0x30
 8000bb6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000bb8:	4b0a      	ldr	r3, [pc, #40]	@ (8000be4 <MX_SPI1_Init+0x64>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000bbe:	4b09      	ldr	r3, [pc, #36]	@ (8000be4 <MX_SPI1_Init+0x64>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000bc4:	4b07      	ldr	r3, [pc, #28]	@ (8000be4 <MX_SPI1_Init+0x64>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000bca:	4b06      	ldr	r3, [pc, #24]	@ (8000be4 <MX_SPI1_Init+0x64>)
 8000bcc:	220a      	movs	r2, #10
 8000bce:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000bd0:	4804      	ldr	r0, [pc, #16]	@ (8000be4 <MX_SPI1_Init+0x64>)
 8000bd2:	f004 f94f 	bl	8004e74 <HAL_SPI_Init>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d001      	beq.n	8000be0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000bdc:	f002 fc5c 	bl	8003498 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000be0:	bf00      	nop
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	20000044 	.word	0x20000044
 8000be8:	40013000 	.word	0x40013000

08000bec <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b086      	sub	sp, #24
 8000bf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bf2:	f107 0308 	add.w	r3, r7, #8
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	601a      	str	r2, [r3, #0]
 8000bfa:	605a      	str	r2, [r3, #4]
 8000bfc:	609a      	str	r2, [r3, #8]
 8000bfe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c00:	463b      	mov	r3, r7
 8000c02:	2200      	movs	r2, #0
 8000c04:	601a      	str	r2, [r3, #0]
 8000c06:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c08:	4b1e      	ldr	r3, [pc, #120]	@ (8000c84 <MX_TIM2_Init+0x98>)
 8000c0a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000c0e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 35999;
 8000c10:	4b1c      	ldr	r3, [pc, #112]	@ (8000c84 <MX_TIM2_Init+0x98>)
 8000c12:	f648 429f 	movw	r2, #35999	@ 0x8c9f
 8000c16:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c18:	4b1a      	ldr	r3, [pc, #104]	@ (8000c84 <MX_TIM2_Init+0x98>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1999;
 8000c1e:	4b19      	ldr	r3, [pc, #100]	@ (8000c84 <MX_TIM2_Init+0x98>)
 8000c20:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8000c24:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c26:	4b17      	ldr	r3, [pc, #92]	@ (8000c84 <MX_TIM2_Init+0x98>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000c2c:	4b15      	ldr	r3, [pc, #84]	@ (8000c84 <MX_TIM2_Init+0x98>)
 8000c2e:	2280      	movs	r2, #128	@ 0x80
 8000c30:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c32:	4814      	ldr	r0, [pc, #80]	@ (8000c84 <MX_TIM2_Init+0x98>)
 8000c34:	f004 fbea 	bl	800540c <HAL_TIM_Base_Init>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000c3e:	f002 fc2b 	bl	8003498 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c42:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c46:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c48:	f107 0308 	add.w	r3, r7, #8
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	480d      	ldr	r0, [pc, #52]	@ (8000c84 <MX_TIM2_Init+0x98>)
 8000c50:	f004 fd86 	bl	8005760 <HAL_TIM_ConfigClockSource>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000c5a:	f002 fc1d 	bl	8003498 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c62:	2300      	movs	r3, #0
 8000c64:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c66:	463b      	mov	r3, r7
 8000c68:	4619      	mov	r1, r3
 8000c6a:	4806      	ldr	r0, [pc, #24]	@ (8000c84 <MX_TIM2_Init+0x98>)
 8000c6c:	f004 ff58 	bl	8005b20 <HAL_TIMEx_MasterConfigSynchronization>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d001      	beq.n	8000c7a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000c76:	f002 fc0f 	bl	8003498 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000c7a:	bf00      	nop
 8000c7c:	3718      	adds	r7, #24
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	2000009c 	.word	0x2000009c

08000c88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b088      	sub	sp, #32
 8000c8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c8e:	f107 0310 	add.w	r3, r7, #16
 8000c92:	2200      	movs	r2, #0
 8000c94:	601a      	str	r2, [r3, #0]
 8000c96:	605a      	str	r2, [r3, #4]
 8000c98:	609a      	str	r2, [r3, #8]
 8000c9a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c9c:	4b46      	ldr	r3, [pc, #280]	@ (8000db8 <MX_GPIO_Init+0x130>)
 8000c9e:	699b      	ldr	r3, [r3, #24]
 8000ca0:	4a45      	ldr	r2, [pc, #276]	@ (8000db8 <MX_GPIO_Init+0x130>)
 8000ca2:	f043 0310 	orr.w	r3, r3, #16
 8000ca6:	6193      	str	r3, [r2, #24]
 8000ca8:	4b43      	ldr	r3, [pc, #268]	@ (8000db8 <MX_GPIO_Init+0x130>)
 8000caa:	699b      	ldr	r3, [r3, #24]
 8000cac:	f003 0310 	and.w	r3, r3, #16
 8000cb0:	60fb      	str	r3, [r7, #12]
 8000cb2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cb4:	4b40      	ldr	r3, [pc, #256]	@ (8000db8 <MX_GPIO_Init+0x130>)
 8000cb6:	699b      	ldr	r3, [r3, #24]
 8000cb8:	4a3f      	ldr	r2, [pc, #252]	@ (8000db8 <MX_GPIO_Init+0x130>)
 8000cba:	f043 0320 	orr.w	r3, r3, #32
 8000cbe:	6193      	str	r3, [r2, #24]
 8000cc0:	4b3d      	ldr	r3, [pc, #244]	@ (8000db8 <MX_GPIO_Init+0x130>)
 8000cc2:	699b      	ldr	r3, [r3, #24]
 8000cc4:	f003 0320 	and.w	r3, r3, #32
 8000cc8:	60bb      	str	r3, [r7, #8]
 8000cca:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ccc:	4b3a      	ldr	r3, [pc, #232]	@ (8000db8 <MX_GPIO_Init+0x130>)
 8000cce:	699b      	ldr	r3, [r3, #24]
 8000cd0:	4a39      	ldr	r2, [pc, #228]	@ (8000db8 <MX_GPIO_Init+0x130>)
 8000cd2:	f043 0304 	orr.w	r3, r3, #4
 8000cd6:	6193      	str	r3, [r2, #24]
 8000cd8:	4b37      	ldr	r3, [pc, #220]	@ (8000db8 <MX_GPIO_Init+0x130>)
 8000cda:	699b      	ldr	r3, [r3, #24]
 8000cdc:	f003 0304 	and.w	r3, r3, #4
 8000ce0:	607b      	str	r3, [r7, #4]
 8000ce2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ce4:	4b34      	ldr	r3, [pc, #208]	@ (8000db8 <MX_GPIO_Init+0x130>)
 8000ce6:	699b      	ldr	r3, [r3, #24]
 8000ce8:	4a33      	ldr	r2, [pc, #204]	@ (8000db8 <MX_GPIO_Init+0x130>)
 8000cea:	f043 0308 	orr.w	r3, r3, #8
 8000cee:	6193      	str	r3, [r2, #24]
 8000cf0:	4b31      	ldr	r3, [pc, #196]	@ (8000db8 <MX_GPIO_Init+0x130>)
 8000cf2:	699b      	ldr	r3, [r3, #24]
 8000cf4:	f003 0308 	and.w	r3, r3, #8
 8000cf8:	603b      	str	r3, [r7, #0]
 8000cfa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d02:	482e      	ldr	r0, [pc, #184]	@ (8000dbc <MX_GPIO_Init+0x134>)
 8000d04:	f003 fc9d 	bl	8004642 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CS_Pin|QR_Pin|GPIO_PIN_15, GPIO_PIN_RESET);
 8000d08:	2200      	movs	r2, #0
 8000d0a:	f248 4110 	movw	r1, #33808	@ 0x8410
 8000d0e:	482c      	ldr	r0, [pc, #176]	@ (8000dc0 <MX_GPIO_Init+0x138>)
 8000d10:	f003 fc97 	bl	8004642 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LOA_Pin|KHOA_Pin|LED_Pin|D7_Pin
 8000d14:	2200      	movs	r2, #0
 8000d16:	f247 31f8 	movw	r1, #29688	@ 0x73f8
 8000d1a:	482a      	ldr	r0, [pc, #168]	@ (8000dc4 <MX_GPIO_Init+0x13c>)
 8000d1c:	f003 fc91 	bl	8004642 <HAL_GPIO_WritePin>
                          |D6_Pin|D5_Pin|D4_Pin|EN_Pin
                          |RW_Pin|RS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000d20:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d24:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d26:	2301      	movs	r3, #1
 8000d28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d2e:	2302      	movs	r3, #2
 8000d30:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d32:	f107 0310 	add.w	r3, r7, #16
 8000d36:	4619      	mov	r1, r3
 8000d38:	4820      	ldr	r0, [pc, #128]	@ (8000dbc <MX_GPIO_Init+0x134>)
 8000d3a:	f003 fae7 	bl	800430c <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_Pin QR_Pin PA15 */
  GPIO_InitStruct.Pin = CS_Pin|QR_Pin|GPIO_PIN_15;
 8000d3e:	f248 4310 	movw	r3, #33808	@ 0x8410
 8000d42:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d44:	2301      	movs	r3, #1
 8000d46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d4c:	2302      	movs	r3, #2
 8000d4e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d50:	f107 0310 	add.w	r3, r7, #16
 8000d54:	4619      	mov	r1, r3
 8000d56:	481a      	ldr	r0, [pc, #104]	@ (8000dc0 <MX_GPIO_Init+0x138>)
 8000d58:	f003 fad8 	bl	800430c <HAL_GPIO_Init>

  /*Configure GPIO pins : LOA_Pin KHOA_Pin LED_Pin D7_Pin
                           D6_Pin D5_Pin D4_Pin EN_Pin
                           RW_Pin RS_Pin */
  GPIO_InitStruct.Pin = LOA_Pin|KHOA_Pin|LED_Pin|D7_Pin
 8000d5c:	f247 33f8 	movw	r3, #29688	@ 0x73f8
 8000d60:	613b      	str	r3, [r7, #16]
                          |D6_Pin|D5_Pin|D4_Pin|EN_Pin
                          |RW_Pin|RS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d62:	2301      	movs	r3, #1
 8000d64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d66:	2300      	movs	r3, #0
 8000d68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d6a:	2302      	movs	r3, #2
 8000d6c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d6e:	f107 0310 	add.w	r3, r7, #16
 8000d72:	4619      	mov	r1, r3
 8000d74:	4813      	ldr	r0, [pc, #76]	@ (8000dc4 <MX_GPIO_Init+0x13c>)
 8000d76:	f003 fac9 	bl	800430c <HAL_GPIO_Init>

  /*Configure GPIO pin : SELECCT_Pin */
  GPIO_InitStruct.Pin = SELECCT_Pin;
 8000d7a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000d7e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d80:	2300      	movs	r3, #0
 8000d82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d84:	2301      	movs	r3, #1
 8000d86:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SELECCT_GPIO_Port, &GPIO_InitStruct);
 8000d88:	f107 0310 	add.w	r3, r7, #16
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	480d      	ldr	r0, [pc, #52]	@ (8000dc4 <MX_GPIO_Init+0x13c>)
 8000d90:	f003 fabc 	bl	800430c <HAL_GPIO_Init>

  /*Configure GPIO pin : MENU_Pin */
  GPIO_InitStruct.Pin = MENU_Pin;
 8000d94:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000d98:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(MENU_GPIO_Port, &GPIO_InitStruct);
 8000da2:	f107 0310 	add.w	r3, r7, #16
 8000da6:	4619      	mov	r1, r3
 8000da8:	4805      	ldr	r0, [pc, #20]	@ (8000dc0 <MX_GPIO_Init+0x138>)
 8000daa:	f003 faaf 	bl	800430c <HAL_GPIO_Init>

}
 8000dae:	bf00      	nop
 8000db0:	3720      	adds	r7, #32
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	40021000 	.word	0x40021000
 8000dbc:	40011000 	.word	0x40011000
 8000dc0:	40010800 	.word	0x40010800
 8000dc4:	40010c00 	.word	0x40010c00

08000dc8 <checkbuton>:

/* USER CODE BEGIN 4 */
uint8_t checkbuton(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b084      	sub	sp, #16
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
 8000dd0:	460b      	mov	r3, r1
 8000dd2:	807b      	strh	r3, [r7, #2]
	if (HAL_GPIO_ReadPin(GPIOx, GPIO_Pin) == 1)
 8000dd4:	887b      	ldrh	r3, [r7, #2]
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	6878      	ldr	r0, [r7, #4]
 8000dda:	f003 fc1b 	bl	8004614 <HAL_GPIO_ReadPin>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b01      	cmp	r3, #1
 8000de2:	d101      	bne.n	8000de8 <checkbuton+0x20>
		return 0;
 8000de4:	2300      	movs	r3, #0
 8000de6:	e039      	b.n	8000e5c <checkbuton+0x94>
	else
	{
		HAL_Delay(50);
 8000de8:	2032      	movs	r0, #50	@ 0x32
 8000dea:	f002 ff5d 	bl	8003ca8 <HAL_Delay>
		if(HAL_GPIO_ReadPin(GPIOx, GPIO_Pin) == 1)	return 0;
 8000dee:	887b      	ldrh	r3, [r7, #2]
 8000df0:	4619      	mov	r1, r3
 8000df2:	6878      	ldr	r0, [r7, #4]
 8000df4:	f003 fc0e 	bl	8004614 <HAL_GPIO_ReadPin>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b01      	cmp	r3, #1
 8000dfc:	d101      	bne.n	8000e02 <checkbuton+0x3a>
 8000dfe:	2300      	movs	r3, #0
 8000e00:	e02c      	b.n	8000e5c <checkbuton+0x94>
		uint8_t i = 50;
 8000e02:	2332      	movs	r3, #50	@ 0x32
 8000e04:	73fb      	strb	r3, [r7, #15]
		while (HAL_GPIO_ReadPin(GPIOx, GPIO_Pin) == 0)
 8000e06:	e020      	b.n	8000e4a <checkbuton+0x82>
		{
			HAL_Delay(10);
 8000e08:	200a      	movs	r0, #10
 8000e0a:	f002 ff4d 	bl	8003ca8 <HAL_Delay>
			i--;
 8000e0e:	7bfb      	ldrb	r3, [r7, #15]
 8000e10:	3b01      	subs	r3, #1
 8000e12:	73fb      	strb	r3, [r7, #15]
			if (i == 0)
 8000e14:	7bfb      	ldrb	r3, [r7, #15]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d117      	bne.n	8000e4a <checkbuton+0x82>
			{
				i = 250;
 8000e1a:	23fa      	movs	r3, #250	@ 0xfa
 8000e1c:	73fb      	strb	r3, [r7, #15]
				while (HAL_GPIO_ReadPin(GPIOx, GPIO_Pin) == 0)
 8000e1e:	e00a      	b.n	8000e36 <checkbuton+0x6e>
				{
					HAL_Delay(10);
 8000e20:	200a      	movs	r0, #10
 8000e22:	f002 ff41 	bl	8003ca8 <HAL_Delay>
					i--;
 8000e26:	7bfb      	ldrb	r3, [r7, #15]
 8000e28:	3b01      	subs	r3, #1
 8000e2a:	73fb      	strb	r3, [r7, #15]
					if(i == 0)	return 3;
 8000e2c:	7bfb      	ldrb	r3, [r7, #15]
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d101      	bne.n	8000e36 <checkbuton+0x6e>
 8000e32:	2303      	movs	r3, #3
 8000e34:	e012      	b.n	8000e5c <checkbuton+0x94>
				while (HAL_GPIO_ReadPin(GPIOx, GPIO_Pin) == 0)
 8000e36:	887b      	ldrh	r3, [r7, #2]
 8000e38:	4619      	mov	r1, r3
 8000e3a:	6878      	ldr	r0, [r7, #4]
 8000e3c:	f003 fbea 	bl	8004614 <HAL_GPIO_ReadPin>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d0ec      	beq.n	8000e20 <checkbuton+0x58>
				}
				return 2;
 8000e46:	2302      	movs	r3, #2
 8000e48:	e008      	b.n	8000e5c <checkbuton+0x94>
		while (HAL_GPIO_ReadPin(GPIOx, GPIO_Pin) == 0)
 8000e4a:	887b      	ldrh	r3, [r7, #2]
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	6878      	ldr	r0, [r7, #4]
 8000e50:	f003 fbe0 	bl	8004614 <HAL_GPIO_ReadPin>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d0d6      	beq.n	8000e08 <checkbuton+0x40>
			}
		}
		return 1;
 8000e5a:	2301      	movs	r3, #1
	}
}
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	3710      	adds	r7, #16
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}

08000e64 <seclectmenu>:

void seclectmenu(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b086      	sub	sp, #24
 8000e68:	af00      	add	r7, sp, #0
	exitmenu = 15;
 8000e6a:	4bb6      	ldr	r3, [pc, #728]	@ (8001144 <seclectmenu+0x2e0>)
 8000e6c:	220f      	movs	r2, #15
 8000e6e:	701a      	strb	r2, [r3, #0]
	uint8_t status = -1;
 8000e70:	23ff      	movs	r3, #255	@ 0xff
 8000e72:	75fb      	strb	r3, [r7, #23]
	CLCD_Clear(&LCD1);
 8000e74:	48b4      	ldr	r0, [pc, #720]	@ (8001148 <seclectmenu+0x2e4>)
 8000e76:	f7ff fca3 	bl	80007c0 <CLCD_Clear>
	CLCD_SetCursor(&LCD1, 0, 0);
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	48b2      	ldr	r0, [pc, #712]	@ (8001148 <seclectmenu+0x2e4>)
 8000e80:	f7ff fc20 	bl	80006c4 <CLCD_SetCursor>
	CLCD_WriteString(&LCD1, "  SELECT MENU");
 8000e84:	49b1      	ldr	r1, [pc, #708]	@ (800114c <seclectmenu+0x2e8>)
 8000e86:	48b0      	ldr	r0, [pc, #704]	@ (8001148 <seclectmenu+0x2e4>)
 8000e88:	f7ff fc83 	bl	8000792 <CLCD_WriteString>
	CLCD_SetCursor(&LCD1, 0, 1);
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	2100      	movs	r1, #0
 8000e90:	48ad      	ldr	r0, [pc, #692]	@ (8001148 <seclectmenu+0x2e4>)
 8000e92:	f7ff fc17 	bl	80006c4 <CLCD_SetCursor>
	CLCD_WriteString(&LCD1, "    THEM THE");
 8000e96:	49ae      	ldr	r1, [pc, #696]	@ (8001150 <seclectmenu+0x2ec>)
 8000e98:	48ab      	ldr	r0, [pc, #684]	@ (8001148 <seclectmenu+0x2e4>)
 8000e9a:	f7ff fc7a 	bl	8000792 <CLCD_WriteString>
	while (exitmenu )
 8000e9e:	f001 beb0 	b.w	8002c02 <seclectmenu+0x1d9e>
	{
		if (checkbuton(SELECCT_GPIO_Port, SELECCT_Pin) != 0)
 8000ea2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000ea6:	48ab      	ldr	r0, [pc, #684]	@ (8001154 <seclectmenu+0x2f0>)
 8000ea8:	f7ff ff8e 	bl	8000dc8 <checkbuton>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d06e      	beq.n	8000f90 <seclectmenu+0x12c>
		{
			exitmenu = 15;
 8000eb2:	4ba4      	ldr	r3, [pc, #656]	@ (8001144 <seclectmenu+0x2e0>)
 8000eb4:	220f      	movs	r2, #15
 8000eb6:	701a      	strb	r2, [r3, #0]
			status++;
 8000eb8:	7dfb      	ldrb	r3, [r7, #23]
 8000eba:	3301      	adds	r3, #1
 8000ebc:	75fb      	strb	r3, [r7, #23]
			status = (status > 3) ? 0 : status;
 8000ebe:	7dfb      	ldrb	r3, [r7, #23]
 8000ec0:	2b03      	cmp	r3, #3
 8000ec2:	d801      	bhi.n	8000ec8 <seclectmenu+0x64>
 8000ec4:	7dfb      	ldrb	r3, [r7, #23]
 8000ec6:	e000      	b.n	8000eca <seclectmenu+0x66>
 8000ec8:	2300      	movs	r3, #0
 8000eca:	75fb      	strb	r3, [r7, #23]
			switch (status)
 8000ecc:	7dfb      	ldrb	r3, [r7, #23]
 8000ece:	2b02      	cmp	r3, #2
 8000ed0:	d032      	beq.n	8000f38 <seclectmenu+0xd4>
 8000ed2:	2b02      	cmp	r3, #2
 8000ed4:	dc46      	bgt.n	8000f64 <seclectmenu+0x100>
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d002      	beq.n	8000ee0 <seclectmenu+0x7c>
 8000eda:	2b01      	cmp	r3, #1
 8000edc:	d016      	beq.n	8000f0c <seclectmenu+0xa8>
 8000ede:	e041      	b.n	8000f64 <seclectmenu+0x100>
			{
			case 0:
				CLCD_Clear(&LCD1);
 8000ee0:	4899      	ldr	r0, [pc, #612]	@ (8001148 <seclectmenu+0x2e4>)
 8000ee2:	f7ff fc6d 	bl	80007c0 <CLCD_Clear>
				CLCD_SetCursor(&LCD1, 0, 0);
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	2100      	movs	r1, #0
 8000eea:	4897      	ldr	r0, [pc, #604]	@ (8001148 <seclectmenu+0x2e4>)
 8000eec:	f7ff fbea 	bl	80006c4 <CLCD_SetCursor>
				CLCD_WriteString(&LCD1, "=>  THEM THE");
 8000ef0:	4999      	ldr	r1, [pc, #612]	@ (8001158 <seclectmenu+0x2f4>)
 8000ef2:	4895      	ldr	r0, [pc, #596]	@ (8001148 <seclectmenu+0x2e4>)
 8000ef4:	f7ff fc4d 	bl	8000792 <CLCD_WriteString>
				CLCD_SetCursor(&LCD1, 0, 1);
 8000ef8:	2201      	movs	r2, #1
 8000efa:	2100      	movs	r1, #0
 8000efc:	4892      	ldr	r0, [pc, #584]	@ (8001148 <seclectmenu+0x2e4>)
 8000efe:	f7ff fbe1 	bl	80006c4 <CLCD_SetCursor>
				CLCD_WriteString(&LCD1, "    XOA THE");
 8000f02:	4996      	ldr	r1, [pc, #600]	@ (800115c <seclectmenu+0x2f8>)
 8000f04:	4890      	ldr	r0, [pc, #576]	@ (8001148 <seclectmenu+0x2e4>)
 8000f06:	f7ff fc44 	bl	8000792 <CLCD_WriteString>
				break;
 8000f0a:	e041      	b.n	8000f90 <seclectmenu+0x12c>
			case 1:
				CLCD_Clear(&LCD1);
 8000f0c:	488e      	ldr	r0, [pc, #568]	@ (8001148 <seclectmenu+0x2e4>)
 8000f0e:	f7ff fc57 	bl	80007c0 <CLCD_Clear>
				CLCD_SetCursor(&LCD1, 0, 0);
 8000f12:	2200      	movs	r2, #0
 8000f14:	2100      	movs	r1, #0
 8000f16:	488c      	ldr	r0, [pc, #560]	@ (8001148 <seclectmenu+0x2e4>)
 8000f18:	f7ff fbd4 	bl	80006c4 <CLCD_SetCursor>
				CLCD_WriteString(&LCD1, "    THEM THE");
 8000f1c:	498c      	ldr	r1, [pc, #560]	@ (8001150 <seclectmenu+0x2ec>)
 8000f1e:	488a      	ldr	r0, [pc, #552]	@ (8001148 <seclectmenu+0x2e4>)
 8000f20:	f7ff fc37 	bl	8000792 <CLCD_WriteString>
				CLCD_SetCursor(&LCD1, 0, 1);
 8000f24:	2201      	movs	r2, #1
 8000f26:	2100      	movs	r1, #0
 8000f28:	4887      	ldr	r0, [pc, #540]	@ (8001148 <seclectmenu+0x2e4>)
 8000f2a:	f7ff fbcb 	bl	80006c4 <CLCD_SetCursor>
				CLCD_WriteString(&LCD1, "=>  XOA THE");
 8000f2e:	498c      	ldr	r1, [pc, #560]	@ (8001160 <seclectmenu+0x2fc>)
 8000f30:	4885      	ldr	r0, [pc, #532]	@ (8001148 <seclectmenu+0x2e4>)
 8000f32:	f7ff fc2e 	bl	8000792 <CLCD_WriteString>
				break;
 8000f36:	e02b      	b.n	8000f90 <seclectmenu+0x12c>
			case 2:
				CLCD_Clear(&LCD1);
 8000f38:	4883      	ldr	r0, [pc, #524]	@ (8001148 <seclectmenu+0x2e4>)
 8000f3a:	f7ff fc41 	bl	80007c0 <CLCD_Clear>
				CLCD_SetCursor(&LCD1, 0, 0);
 8000f3e:	2200      	movs	r2, #0
 8000f40:	2100      	movs	r1, #0
 8000f42:	4881      	ldr	r0, [pc, #516]	@ (8001148 <seclectmenu+0x2e4>)
 8000f44:	f7ff fbbe 	bl	80006c4 <CLCD_SetCursor>
				CLCD_WriteString(&LCD1, "    XOA THE");
 8000f48:	4984      	ldr	r1, [pc, #528]	@ (800115c <seclectmenu+0x2f8>)
 8000f4a:	487f      	ldr	r0, [pc, #508]	@ (8001148 <seclectmenu+0x2e4>)
 8000f4c:	f7ff fc21 	bl	8000792 <CLCD_WriteString>
				CLCD_SetCursor(&LCD1, 0, 1);
 8000f50:	2201      	movs	r2, #1
 8000f52:	2100      	movs	r1, #0
 8000f54:	487c      	ldr	r0, [pc, #496]	@ (8001148 <seclectmenu+0x2e4>)
 8000f56:	f7ff fbb5 	bl	80006c4 <CLCD_SetCursor>
				CLCD_WriteString(&LCD1, "=>  TRA THE");
 8000f5a:	4982      	ldr	r1, [pc, #520]	@ (8001164 <seclectmenu+0x300>)
 8000f5c:	487a      	ldr	r0, [pc, #488]	@ (8001148 <seclectmenu+0x2e4>)
 8000f5e:	f7ff fc18 	bl	8000792 <CLCD_WriteString>
				break;
 8000f62:	e015      	b.n	8000f90 <seclectmenu+0x12c>
			default:
				CLCD_Clear(&LCD1);
 8000f64:	4878      	ldr	r0, [pc, #480]	@ (8001148 <seclectmenu+0x2e4>)
 8000f66:	f7ff fc2b 	bl	80007c0 <CLCD_Clear>
				CLCD_SetCursor(&LCD1, 0, 0);
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	4876      	ldr	r0, [pc, #472]	@ (8001148 <seclectmenu+0x2e4>)
 8000f70:	f7ff fba8 	bl	80006c4 <CLCD_SetCursor>
				CLCD_WriteString(&LCD1, "    TRA THE");
 8000f74:	497c      	ldr	r1, [pc, #496]	@ (8001168 <seclectmenu+0x304>)
 8000f76:	4874      	ldr	r0, [pc, #464]	@ (8001148 <seclectmenu+0x2e4>)
 8000f78:	f7ff fc0b 	bl	8000792 <CLCD_WriteString>
				CLCD_SetCursor(&LCD1, 0, 1);
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	2100      	movs	r1, #0
 8000f80:	4871      	ldr	r0, [pc, #452]	@ (8001148 <seclectmenu+0x2e4>)
 8000f82:	f7ff fb9f 	bl	80006c4 <CLCD_SetCursor>
				CLCD_WriteString(&LCD1, "=>  THOAT");
 8000f86:	4979      	ldr	r1, [pc, #484]	@ (800116c <seclectmenu+0x308>)
 8000f88:	486f      	ldr	r0, [pc, #444]	@ (8001148 <seclectmenu+0x2e4>)
 8000f8a:	f7ff fc02 	bl	8000792 <CLCD_WriteString>
				break;
 8000f8e:	bf00      	nop
			}
		}
		if (checkbuton(MENU_GPIO_Port, MENU_Pin) != 0)
 8000f90:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000f94:	4876      	ldr	r0, [pc, #472]	@ (8001170 <seclectmenu+0x30c>)
 8000f96:	f7ff ff17 	bl	8000dc8 <checkbuton>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	f001 8630 	beq.w	8002c02 <seclectmenu+0x1d9e>
		{
			exitmenu = 15;
 8000fa2:	4b68      	ldr	r3, [pc, #416]	@ (8001144 <seclectmenu+0x2e0>)
 8000fa4:	220f      	movs	r2, #15
 8000fa6:	701a      	strb	r2, [r3, #0]
			switch (status)
 8000fa8:	7dfb      	ldrb	r3, [r7, #23]
 8000faa:	2b02      	cmp	r3, #2
 8000fac:	f001 860d 	beq.w	8002bca <seclectmenu+0x1d66>
 8000fb0:	2b02      	cmp	r3, #2
 8000fb2:	f301 8622 	bgt.w	8002bfa <seclectmenu+0x1d96>
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d004      	beq.n	8000fc4 <seclectmenu+0x160>
 8000fba:	2b01      	cmp	r3, #1
 8000fbc:	f000 854d 	beq.w	8001a5a <seclectmenu+0xbf6>
 8000fc0:	f001 be1b 	b.w	8002bfa <seclectmenu+0x1d96>
			{
			case 0:
				CLCD_Clear(&LCD1);
 8000fc4:	4860      	ldr	r0, [pc, #384]	@ (8001148 <seclectmenu+0x2e4>)
 8000fc6:	f7ff fbfb 	bl	80007c0 <CLCD_Clear>
				CLCD_SetCursor(&LCD1, 0, 0);
 8000fca:	2200      	movs	r2, #0
 8000fcc:	2100      	movs	r1, #0
 8000fce:	485e      	ldr	r0, [pc, #376]	@ (8001148 <seclectmenu+0x2e4>)
 8000fd0:	f7ff fb78 	bl	80006c4 <CLCD_SetCursor>
				CLCD_WriteString(&LCD1, "    SELECT ");
 8000fd4:	4967      	ldr	r1, [pc, #412]	@ (8001174 <seclectmenu+0x310>)
 8000fd6:	485c      	ldr	r0, [pc, #368]	@ (8001148 <seclectmenu+0x2e4>)
 8000fd8:	f7ff fbdb 	bl	8000792 <CLCD_WriteString>
				CLCD_SetCursor(&LCD1, 0, 1);
 8000fdc:	2201      	movs	r2, #1
 8000fde:	2100      	movs	r1, #0
 8000fe0:	4859      	ldr	r0, [pc, #356]	@ (8001148 <seclectmenu+0x2e4>)
 8000fe2:	f7ff fb6f 	bl	80006c4 <CLCD_SetCursor>
				CLCD_WriteString(&LCD1, "   THE NGUOI LON");
 8000fe6:	4964      	ldr	r1, [pc, #400]	@ (8001178 <seclectmenu+0x314>)
 8000fe8:	4857      	ldr	r0, [pc, #348]	@ (8001148 <seclectmenu+0x2e4>)
 8000fea:	f7ff fbd2 	bl	8000792 <CLCD_WriteString>
				uint8_t statusadd = 0;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	75bb      	strb	r3, [r7, #22]
				uint8_t back = 1;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	757b      	strb	r3, [r7, #21]
				while (back == 1)
 8000ff6:	f000 bd15 	b.w	8001a24 <seclectmenu+0xbc0>
				{
					if (exitmenu == 0)
 8000ffa:	4b52      	ldr	r3, [pc, #328]	@ (8001144 <seclectmenu+0x2e0>)
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d108      	bne.n	8001014 <seclectmenu+0x1b0>
					{
						CLCD_Clear(&LCD1);
 8001002:	4851      	ldr	r0, [pc, #324]	@ (8001148 <seclectmenu+0x2e4>)
 8001004:	f7ff fbdc 	bl	80007c0 <CLCD_Clear>
						HAL_Delay(1000);
 8001008:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800100c:	f002 fe4c 	bl	8003ca8 <HAL_Delay>
						return;
 8001010:	f001 be03 	b.w	8002c1a <seclectmenu+0x1db6>
					}
					if (checkbuton(SELECCT_GPIO_Port, SELECCT_Pin) != 0)
 8001014:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001018:	484e      	ldr	r0, [pc, #312]	@ (8001154 <seclectmenu+0x2f0>)
 800101a:	f7ff fed5 	bl	8000dc8 <checkbuton>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d054      	beq.n	80010ce <seclectmenu+0x26a>
					{
						exitmenu = 15;
 8001024:	4b47      	ldr	r3, [pc, #284]	@ (8001144 <seclectmenu+0x2e0>)
 8001026:	220f      	movs	r2, #15
 8001028:	701a      	strb	r2, [r3, #0]
						statusadd++;
 800102a:	7dbb      	ldrb	r3, [r7, #22]
 800102c:	3301      	adds	r3, #1
 800102e:	75bb      	strb	r3, [r7, #22]
						statusadd = (statusadd > 2) ? 0 : statusadd;
 8001030:	7dbb      	ldrb	r3, [r7, #22]
 8001032:	2b02      	cmp	r3, #2
 8001034:	d801      	bhi.n	800103a <seclectmenu+0x1d6>
 8001036:	7dbb      	ldrb	r3, [r7, #22]
 8001038:	e000      	b.n	800103c <seclectmenu+0x1d8>
 800103a:	2300      	movs	r3, #0
 800103c:	75bb      	strb	r3, [r7, #22]
						switch (statusadd)
 800103e:	7dbb      	ldrb	r3, [r7, #22]
 8001040:	2b01      	cmp	r3, #1
 8001042:	d002      	beq.n	800104a <seclectmenu+0x1e6>
 8001044:	2b02      	cmp	r3, #2
 8001046:	d016      	beq.n	8001076 <seclectmenu+0x212>
 8001048:	e02b      	b.n	80010a2 <seclectmenu+0x23e>
						{
						case 1:
							CLCD_Clear(&LCD1);
 800104a:	483f      	ldr	r0, [pc, #252]	@ (8001148 <seclectmenu+0x2e4>)
 800104c:	f7ff fbb8 	bl	80007c0 <CLCD_Clear>
							CLCD_SetCursor(&LCD1, 0, 0);
 8001050:	2200      	movs	r2, #0
 8001052:	2100      	movs	r1, #0
 8001054:	483c      	ldr	r0, [pc, #240]	@ (8001148 <seclectmenu+0x2e4>)
 8001056:	f7ff fb35 	bl	80006c4 <CLCD_SetCursor>
							CLCD_WriteString(&LCD1, "=> THE NGUOI LON");
 800105a:	4948      	ldr	r1, [pc, #288]	@ (800117c <seclectmenu+0x318>)
 800105c:	483a      	ldr	r0, [pc, #232]	@ (8001148 <seclectmenu+0x2e4>)
 800105e:	f7ff fb98 	bl	8000792 <CLCD_WriteString>
							CLCD_SetCursor(&LCD1, 0, 1);
 8001062:	2201      	movs	r2, #1
 8001064:	2100      	movs	r1, #0
 8001066:	4838      	ldr	r0, [pc, #224]	@ (8001148 <seclectmenu+0x2e4>)
 8001068:	f7ff fb2c 	bl	80006c4 <CLCD_SetCursor>
							CLCD_WriteString(&LCD1, "   THE TRE EM");
 800106c:	4944      	ldr	r1, [pc, #272]	@ (8001180 <seclectmenu+0x31c>)
 800106e:	4836      	ldr	r0, [pc, #216]	@ (8001148 <seclectmenu+0x2e4>)
 8001070:	f7ff fb8f 	bl	8000792 <CLCD_WriteString>
							break;
 8001074:	e02b      	b.n	80010ce <seclectmenu+0x26a>
						case 2:
							CLCD_Clear(&LCD1);
 8001076:	4834      	ldr	r0, [pc, #208]	@ (8001148 <seclectmenu+0x2e4>)
 8001078:	f7ff fba2 	bl	80007c0 <CLCD_Clear>
							CLCD_SetCursor(&LCD1, 0, 0);
 800107c:	2200      	movs	r2, #0
 800107e:	2100      	movs	r1, #0
 8001080:	4831      	ldr	r0, [pc, #196]	@ (8001148 <seclectmenu+0x2e4>)
 8001082:	f7ff fb1f 	bl	80006c4 <CLCD_SetCursor>
							CLCD_WriteString(&LCD1, "   THE NGUOI LON");
 8001086:	493c      	ldr	r1, [pc, #240]	@ (8001178 <seclectmenu+0x314>)
 8001088:	482f      	ldr	r0, [pc, #188]	@ (8001148 <seclectmenu+0x2e4>)
 800108a:	f7ff fb82 	bl	8000792 <CLCD_WriteString>
							CLCD_SetCursor(&LCD1, 0, 1);
 800108e:	2201      	movs	r2, #1
 8001090:	2100      	movs	r1, #0
 8001092:	482d      	ldr	r0, [pc, #180]	@ (8001148 <seclectmenu+0x2e4>)
 8001094:	f7ff fb16 	bl	80006c4 <CLCD_SetCursor>
							CLCD_WriteString(&LCD1, "=> THE TRE EM");
 8001098:	493a      	ldr	r1, [pc, #232]	@ (8001184 <seclectmenu+0x320>)
 800109a:	482b      	ldr	r0, [pc, #172]	@ (8001148 <seclectmenu+0x2e4>)
 800109c:	f7ff fb79 	bl	8000792 <CLCD_WriteString>
							break;
 80010a0:	e015      	b.n	80010ce <seclectmenu+0x26a>
						default:
							CLCD_Clear(&LCD1);
 80010a2:	4829      	ldr	r0, [pc, #164]	@ (8001148 <seclectmenu+0x2e4>)
 80010a4:	f7ff fb8c 	bl	80007c0 <CLCD_Clear>
							CLCD_SetCursor(&LCD1, 0, 0);
 80010a8:	2200      	movs	r2, #0
 80010aa:	2100      	movs	r1, #0
 80010ac:	4826      	ldr	r0, [pc, #152]	@ (8001148 <seclectmenu+0x2e4>)
 80010ae:	f7ff fb09 	bl	80006c4 <CLCD_SetCursor>
							CLCD_WriteString(&LCD1, "   THE TRE EM");
 80010b2:	4933      	ldr	r1, [pc, #204]	@ (8001180 <seclectmenu+0x31c>)
 80010b4:	4824      	ldr	r0, [pc, #144]	@ (8001148 <seclectmenu+0x2e4>)
 80010b6:	f7ff fb6c 	bl	8000792 <CLCD_WriteString>
							CLCD_SetCursor(&LCD1, 0, 1);
 80010ba:	2201      	movs	r2, #1
 80010bc:	2100      	movs	r1, #0
 80010be:	4822      	ldr	r0, [pc, #136]	@ (8001148 <seclectmenu+0x2e4>)
 80010c0:	f7ff fb00 	bl	80006c4 <CLCD_SetCursor>
							CLCD_WriteString(&LCD1, "=> BACK");
 80010c4:	4930      	ldr	r1, [pc, #192]	@ (8001188 <seclectmenu+0x324>)
 80010c6:	4820      	ldr	r0, [pc, #128]	@ (8001148 <seclectmenu+0x2e4>)
 80010c8:	f7ff fb63 	bl	8000792 <CLCD_WriteString>
							break;
 80010cc:	bf00      	nop
						}
					}
					if (checkbuton(MENU_GPIO_Port, MENU_Pin) != 0)
 80010ce:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80010d2:	4827      	ldr	r0, [pc, #156]	@ (8001170 <seclectmenu+0x30c>)
 80010d4:	f7ff fe78 	bl	8000dc8 <checkbuton>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	f000 84a2 	beq.w	8001a24 <seclectmenu+0xbc0>
					{
						exitmenu = 15;
 80010e0:	4b18      	ldr	r3, [pc, #96]	@ (8001144 <seclectmenu+0x2e0>)
 80010e2:	220f      	movs	r2, #15
 80010e4:	701a      	strb	r2, [r3, #0]
						switch (statusadd)
 80010e6:	7dbb      	ldrb	r3, [r7, #22]
 80010e8:	2b01      	cmp	r3, #1
 80010ea:	d004      	beq.n	80010f6 <seclectmenu+0x292>
 80010ec:	2b02      	cmp	r3, #2
 80010ee:	f000 8261 	beq.w	80015b4 <seclectmenu+0x750>
 80010f2:	f000 bc94 	b.w	8001a1e <seclectmenu+0xbba>
						{
						case 1:
							CLCD_Clear(&LCD1);
 80010f6:	4814      	ldr	r0, [pc, #80]	@ (8001148 <seclectmenu+0x2e4>)
 80010f8:	f7ff fb62 	bl	80007c0 <CLCD_Clear>
							CLCD_SetCursor(&LCD1, 0, 0);
 80010fc:	2200      	movs	r2, #0
 80010fe:	2100      	movs	r1, #0
 8001100:	4811      	ldr	r0, [pc, #68]	@ (8001148 <seclectmenu+0x2e4>)
 8001102:	f7ff fadf 	bl	80006c4 <CLCD_SetCursor>
							CLCD_WriteString(&LCD1, "=>  THE 1 ");
 8001106:	4921      	ldr	r1, [pc, #132]	@ (800118c <seclectmenu+0x328>)
 8001108:	480f      	ldr	r0, [pc, #60]	@ (8001148 <seclectmenu+0x2e4>)
 800110a:	f7ff fb42 	bl	8000792 <CLCD_WriteString>
							CLCD_SetCursor(&LCD1, 0, 1);
 800110e:	2201      	movs	r2, #1
 8001110:	2100      	movs	r1, #0
 8001112:	480d      	ldr	r0, [pc, #52]	@ (8001148 <seclectmenu+0x2e4>)
 8001114:	f7ff fad6 	bl	80006c4 <CLCD_SetCursor>
							CLCD_WriteString(&LCD1, "    THE 2 ");
 8001118:	491d      	ldr	r1, [pc, #116]	@ (8001190 <seclectmenu+0x32c>)
 800111a:	480b      	ldr	r0, [pc, #44]	@ (8001148 <seclectmenu+0x2e4>)
 800111c:	f7ff fb39 	bl	8000792 <CLCD_WriteString>
							uint8_t statusadd1 = 1;
 8001120:	2301      	movs	r3, #1
 8001122:	753b      	strb	r3, [r7, #20]
							uint8_t back11 = 1;
 8001124:	2301      	movs	r3, #1
 8001126:	74fb      	strb	r3, [r7, #19]
							while (back11 == 1)
 8001128:	e22a      	b.n	8001580 <seclectmenu+0x71c>
							{
								if (exitmenu == 0)
 800112a:	4b06      	ldr	r3, [pc, #24]	@ (8001144 <seclectmenu+0x2e0>)
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d130      	bne.n	8001194 <seclectmenu+0x330>
								{
									CLCD_Clear(&LCD1);
 8001132:	4805      	ldr	r0, [pc, #20]	@ (8001148 <seclectmenu+0x2e4>)
 8001134:	f7ff fb44 	bl	80007c0 <CLCD_Clear>
									HAL_Delay(1000);
 8001138:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800113c:	f002 fdb4 	bl	8003ca8 <HAL_Delay>
									return;
 8001140:	f001 bd6b 	b.w	8002c1a <seclectmenu+0x1db6>
 8001144:	20000000 	.word	0x20000000
 8001148:	200000f4 	.word	0x200000f4
 800114c:	08005cc4 	.word	0x08005cc4
 8001150:	08005cd4 	.word	0x08005cd4
 8001154:	40010c00 	.word	0x40010c00
 8001158:	08005ce4 	.word	0x08005ce4
 800115c:	08005cf4 	.word	0x08005cf4
 8001160:	08005d00 	.word	0x08005d00
 8001164:	08005d0c 	.word	0x08005d0c
 8001168:	08005d18 	.word	0x08005d18
 800116c:	08005d24 	.word	0x08005d24
 8001170:	40010800 	.word	0x40010800
 8001174:	08005d30 	.word	0x08005d30
 8001178:	08005d3c 	.word	0x08005d3c
 800117c:	08005d50 	.word	0x08005d50
 8001180:	08005d64 	.word	0x08005d64
 8001184:	08005d74 	.word	0x08005d74
 8001188:	08005d84 	.word	0x08005d84
 800118c:	08005d8c 	.word	0x08005d8c
 8001190:	08005d98 	.word	0x08005d98
								}
								if (checkbuton(SELECCT_GPIO_Port, SELECCT_Pin) != 0)
 8001194:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001198:	48b7      	ldr	r0, [pc, #732]	@ (8001478 <seclectmenu+0x614>)
 800119a:	f7ff fe15 	bl	8000dc8 <checkbuton>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	f000 808b 	beq.w	80012bc <seclectmenu+0x458>
								{
									exitmenu = 15;
 80011a6:	4bb5      	ldr	r3, [pc, #724]	@ (800147c <seclectmenu+0x618>)
 80011a8:	220f      	movs	r2, #15
 80011aa:	701a      	strb	r2, [r3, #0]
									statusadd1++;
 80011ac:	7d3b      	ldrb	r3, [r7, #20]
 80011ae:	3301      	adds	r3, #1
 80011b0:	753b      	strb	r3, [r7, #20]
									statusadd1 = (statusadd1 > 4) ? 0 : statusadd1;
 80011b2:	7d3b      	ldrb	r3, [r7, #20]
 80011b4:	2b04      	cmp	r3, #4
 80011b6:	d801      	bhi.n	80011bc <seclectmenu+0x358>
 80011b8:	7d3b      	ldrb	r3, [r7, #20]
 80011ba:	e000      	b.n	80011be <seclectmenu+0x35a>
 80011bc:	2300      	movs	r3, #0
 80011be:	753b      	strb	r3, [r7, #20]
									switch (statusadd1)
 80011c0:	7d3b      	ldrb	r3, [r7, #20]
 80011c2:	3b01      	subs	r3, #1
 80011c4:	2b03      	cmp	r3, #3
 80011c6:	d863      	bhi.n	8001290 <seclectmenu+0x42c>
 80011c8:	a201      	add	r2, pc, #4	@ (adr r2, 80011d0 <seclectmenu+0x36c>)
 80011ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011ce:	bf00      	nop
 80011d0:	080011e1 	.word	0x080011e1
 80011d4:	0800120d 	.word	0x0800120d
 80011d8:	08001239 	.word	0x08001239
 80011dc:	08001265 	.word	0x08001265
									{
									case 1:
										CLCD_Clear(&LCD1);
 80011e0:	48a7      	ldr	r0, [pc, #668]	@ (8001480 <seclectmenu+0x61c>)
 80011e2:	f7ff faed 	bl	80007c0 <CLCD_Clear>
										CLCD_SetCursor(&LCD1, 0, 0);
 80011e6:	2200      	movs	r2, #0
 80011e8:	2100      	movs	r1, #0
 80011ea:	48a5      	ldr	r0, [pc, #660]	@ (8001480 <seclectmenu+0x61c>)
 80011ec:	f7ff fa6a 	bl	80006c4 <CLCD_SetCursor>
										CLCD_WriteString(&LCD1, "=>  THE 1 ");
 80011f0:	49a4      	ldr	r1, [pc, #656]	@ (8001484 <seclectmenu+0x620>)
 80011f2:	48a3      	ldr	r0, [pc, #652]	@ (8001480 <seclectmenu+0x61c>)
 80011f4:	f7ff facd 	bl	8000792 <CLCD_WriteString>
										CLCD_SetCursor(&LCD1, 0, 1);
 80011f8:	2201      	movs	r2, #1
 80011fa:	2100      	movs	r1, #0
 80011fc:	48a0      	ldr	r0, [pc, #640]	@ (8001480 <seclectmenu+0x61c>)
 80011fe:	f7ff fa61 	bl	80006c4 <CLCD_SetCursor>
										CLCD_WriteString(&LCD1, "    THE 2 ");
 8001202:	49a1      	ldr	r1, [pc, #644]	@ (8001488 <seclectmenu+0x624>)
 8001204:	489e      	ldr	r0, [pc, #632]	@ (8001480 <seclectmenu+0x61c>)
 8001206:	f7ff fac4 	bl	8000792 <CLCD_WriteString>
										break;
 800120a:	e057      	b.n	80012bc <seclectmenu+0x458>
									case 2:
										CLCD_Clear(&LCD1);
 800120c:	489c      	ldr	r0, [pc, #624]	@ (8001480 <seclectmenu+0x61c>)
 800120e:	f7ff fad7 	bl	80007c0 <CLCD_Clear>
										CLCD_SetCursor(&LCD1, 0, 0);
 8001212:	2200      	movs	r2, #0
 8001214:	2100      	movs	r1, #0
 8001216:	489a      	ldr	r0, [pc, #616]	@ (8001480 <seclectmenu+0x61c>)
 8001218:	f7ff fa54 	bl	80006c4 <CLCD_SetCursor>
										CLCD_WriteString(&LCD1, "=>  THE 2 ");
 800121c:	499b      	ldr	r1, [pc, #620]	@ (800148c <seclectmenu+0x628>)
 800121e:	4898      	ldr	r0, [pc, #608]	@ (8001480 <seclectmenu+0x61c>)
 8001220:	f7ff fab7 	bl	8000792 <CLCD_WriteString>
										CLCD_SetCursor(&LCD1, 0, 1);
 8001224:	2201      	movs	r2, #1
 8001226:	2100      	movs	r1, #0
 8001228:	4895      	ldr	r0, [pc, #596]	@ (8001480 <seclectmenu+0x61c>)
 800122a:	f7ff fa4b 	bl	80006c4 <CLCD_SetCursor>
										CLCD_WriteString(&LCD1, "    THE 3 ");
 800122e:	4998      	ldr	r1, [pc, #608]	@ (8001490 <seclectmenu+0x62c>)
 8001230:	4893      	ldr	r0, [pc, #588]	@ (8001480 <seclectmenu+0x61c>)
 8001232:	f7ff faae 	bl	8000792 <CLCD_WriteString>
										break;
 8001236:	e041      	b.n	80012bc <seclectmenu+0x458>
									case 3:
										CLCD_Clear(&LCD1);
 8001238:	4891      	ldr	r0, [pc, #580]	@ (8001480 <seclectmenu+0x61c>)
 800123a:	f7ff fac1 	bl	80007c0 <CLCD_Clear>
										CLCD_SetCursor(&LCD1, 0, 0);
 800123e:	2200      	movs	r2, #0
 8001240:	2100      	movs	r1, #0
 8001242:	488f      	ldr	r0, [pc, #572]	@ (8001480 <seclectmenu+0x61c>)
 8001244:	f7ff fa3e 	bl	80006c4 <CLCD_SetCursor>
										CLCD_WriteString(&LCD1, "=>  THE 3 ");
 8001248:	4992      	ldr	r1, [pc, #584]	@ (8001494 <seclectmenu+0x630>)
 800124a:	488d      	ldr	r0, [pc, #564]	@ (8001480 <seclectmenu+0x61c>)
 800124c:	f7ff faa1 	bl	8000792 <CLCD_WriteString>
										CLCD_SetCursor(&LCD1, 0, 1);
 8001250:	2201      	movs	r2, #1
 8001252:	2100      	movs	r1, #0
 8001254:	488a      	ldr	r0, [pc, #552]	@ (8001480 <seclectmenu+0x61c>)
 8001256:	f7ff fa35 	bl	80006c4 <CLCD_SetCursor>
										CLCD_WriteString(&LCD1, "    THE 4 ");
 800125a:	498f      	ldr	r1, [pc, #572]	@ (8001498 <seclectmenu+0x634>)
 800125c:	4888      	ldr	r0, [pc, #544]	@ (8001480 <seclectmenu+0x61c>)
 800125e:	f7ff fa98 	bl	8000792 <CLCD_WriteString>
										break;
 8001262:	e02b      	b.n	80012bc <seclectmenu+0x458>
									case 4:
										CLCD_Clear(&LCD1);
 8001264:	4886      	ldr	r0, [pc, #536]	@ (8001480 <seclectmenu+0x61c>)
 8001266:	f7ff faab 	bl	80007c0 <CLCD_Clear>
										CLCD_SetCursor(&LCD1, 0, 0);
 800126a:	2200      	movs	r2, #0
 800126c:	2100      	movs	r1, #0
 800126e:	4884      	ldr	r0, [pc, #528]	@ (8001480 <seclectmenu+0x61c>)
 8001270:	f7ff fa28 	bl	80006c4 <CLCD_SetCursor>
										CLCD_WriteString(&LCD1, "=>  THE 4 ");
 8001274:	4989      	ldr	r1, [pc, #548]	@ (800149c <seclectmenu+0x638>)
 8001276:	4882      	ldr	r0, [pc, #520]	@ (8001480 <seclectmenu+0x61c>)
 8001278:	f7ff fa8b 	bl	8000792 <CLCD_WriteString>
										CLCD_SetCursor(&LCD1, 0, 1);
 800127c:	2201      	movs	r2, #1
 800127e:	2100      	movs	r1, #0
 8001280:	487f      	ldr	r0, [pc, #508]	@ (8001480 <seclectmenu+0x61c>)
 8001282:	f7ff fa1f 	bl	80006c4 <CLCD_SetCursor>
										CLCD_WriteString(&LCD1, "    BACK ");
 8001286:	4986      	ldr	r1, [pc, #536]	@ (80014a0 <seclectmenu+0x63c>)
 8001288:	487d      	ldr	r0, [pc, #500]	@ (8001480 <seclectmenu+0x61c>)
 800128a:	f7ff fa82 	bl	8000792 <CLCD_WriteString>
										break;
 800128e:	e015      	b.n	80012bc <seclectmenu+0x458>
									default:
										CLCD_Clear(&LCD1);
 8001290:	487b      	ldr	r0, [pc, #492]	@ (8001480 <seclectmenu+0x61c>)
 8001292:	f7ff fa95 	bl	80007c0 <CLCD_Clear>
										CLCD_SetCursor(&LCD1, 0, 0);
 8001296:	2200      	movs	r2, #0
 8001298:	2100      	movs	r1, #0
 800129a:	4879      	ldr	r0, [pc, #484]	@ (8001480 <seclectmenu+0x61c>)
 800129c:	f7ff fa12 	bl	80006c4 <CLCD_SetCursor>
										CLCD_WriteString(&LCD1, "    THE 4 ");
 80012a0:	497d      	ldr	r1, [pc, #500]	@ (8001498 <seclectmenu+0x634>)
 80012a2:	4877      	ldr	r0, [pc, #476]	@ (8001480 <seclectmenu+0x61c>)
 80012a4:	f7ff fa75 	bl	8000792 <CLCD_WriteString>
										CLCD_SetCursor(&LCD1, 0, 1);
 80012a8:	2201      	movs	r2, #1
 80012aa:	2100      	movs	r1, #0
 80012ac:	4874      	ldr	r0, [pc, #464]	@ (8001480 <seclectmenu+0x61c>)
 80012ae:	f7ff fa09 	bl	80006c4 <CLCD_SetCursor>
										CLCD_WriteString(&LCD1, "=>  BACK");
 80012b2:	497c      	ldr	r1, [pc, #496]	@ (80014a4 <seclectmenu+0x640>)
 80012b4:	4872      	ldr	r0, [pc, #456]	@ (8001480 <seclectmenu+0x61c>)
 80012b6:	f7ff fa6c 	bl	8000792 <CLCD_WriteString>
										break;
 80012ba:	bf00      	nop
									}
								}
								if (checkbuton(MENU_GPIO_Port, MENU_Pin) != 0)
 80012bc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80012c0:	4879      	ldr	r0, [pc, #484]	@ (80014a8 <seclectmenu+0x644>)
 80012c2:	f7ff fd81 	bl	8000dc8 <checkbuton>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	f000 8159 	beq.w	8001580 <seclectmenu+0x71c>
								{
									exitmenu = 15;
 80012ce:	4b6b      	ldr	r3, [pc, #428]	@ (800147c <seclectmenu+0x618>)
 80012d0:	220f      	movs	r2, #15
 80012d2:	701a      	strb	r2, [r3, #0]
									uint8_t keyadd1 = (statusadd << 4) + statusadd1;
 80012d4:	7dbb      	ldrb	r3, [r7, #22]
 80012d6:	011b      	lsls	r3, r3, #4
 80012d8:	b2da      	uxtb	r2, r3
 80012da:	7d3b      	ldrb	r3, [r7, #20]
 80012dc:	4413      	add	r3, r2
 80012de:	70bb      	strb	r3, [r7, #2]
									switch (statusadd1)
 80012e0:	7d3b      	ldrb	r3, [r7, #20]
 80012e2:	3b01      	subs	r3, #1
 80012e4:	2b03      	cmp	r3, #3
 80012e6:	f200 8148 	bhi.w	800157a <seclectmenu+0x716>
 80012ea:	a201      	add	r2, pc, #4	@ (adr r2, 80012f0 <seclectmenu+0x48c>)
 80012ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012f0:	08001301 	.word	0x08001301
 80012f4:	0800138f 	.word	0x0800138f
 80012f8:	0800141d 	.word	0x0800141d
 80012fc:	080014ed 	.word	0x080014ed
									{
									case 1:
										if (CheckKey(keyadd1) != 0)
 8001300:	78bb      	ldrb	r3, [r7, #2]
 8001302:	4618      	mov	r0, r3
 8001304:	f001 fefa 	bl	80030fc <CheckKey>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d025      	beq.n	800135a <seclectmenu+0x4f6>
										{
											CLCD_Clear(&LCD1);
 800130e:	485c      	ldr	r0, [pc, #368]	@ (8001480 <seclectmenu+0x61c>)
 8001310:	f7ff fa56 	bl	80007c0 <CLCD_Clear>
											CLCD_SetCursor(&LCD1, 0, 0);
 8001314:	2200      	movs	r2, #0
 8001316:	2100      	movs	r1, #0
 8001318:	4859      	ldr	r0, [pc, #356]	@ (8001480 <seclectmenu+0x61c>)
 800131a:	f7ff f9d3 	bl	80006c4 <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "  DA CO THE 1 ");
 800131e:	4963      	ldr	r1, [pc, #396]	@ (80014ac <seclectmenu+0x648>)
 8001320:	4857      	ldr	r0, [pc, #348]	@ (8001480 <seclectmenu+0x61c>)
 8001322:	f7ff fa36 	bl	8000792 <CLCD_WriteString>
											HAL_Delay(1000);
 8001326:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800132a:	f002 fcbd 	bl	8003ca8 <HAL_Delay>
											CLCD_Clear(&LCD1);
 800132e:	4854      	ldr	r0, [pc, #336]	@ (8001480 <seclectmenu+0x61c>)
 8001330:	f7ff fa46 	bl	80007c0 <CLCD_Clear>
											CLCD_SetCursor(&LCD1, 0, 0);
 8001334:	2200      	movs	r2, #0
 8001336:	2100      	movs	r1, #0
 8001338:	4851      	ldr	r0, [pc, #324]	@ (8001480 <seclectmenu+0x61c>)
 800133a:	f7ff f9c3 	bl	80006c4 <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "=>  THE 1 ");
 800133e:	4951      	ldr	r1, [pc, #324]	@ (8001484 <seclectmenu+0x620>)
 8001340:	484f      	ldr	r0, [pc, #316]	@ (8001480 <seclectmenu+0x61c>)
 8001342:	f7ff fa26 	bl	8000792 <CLCD_WriteString>
											CLCD_SetCursor(&LCD1, 0, 1);
 8001346:	2201      	movs	r2, #1
 8001348:	2100      	movs	r1, #0
 800134a:	484d      	ldr	r0, [pc, #308]	@ (8001480 <seclectmenu+0x61c>)
 800134c:	f7ff f9ba 	bl	80006c4 <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "    THE 2 ");
 8001350:	494d      	ldr	r1, [pc, #308]	@ (8001488 <seclectmenu+0x624>)
 8001352:	484b      	ldr	r0, [pc, #300]	@ (8001480 <seclectmenu+0x61c>)
 8001354:	f7ff fa1d 	bl	8000792 <CLCD_WriteString>
											CLCD_SetCursor(&LCD1, 0, 0);
											CLCD_WriteString(&LCD1, "=>  THE 1 ");
											CLCD_SetCursor(&LCD1, 0, 1);
											CLCD_WriteString(&LCD1, "    THE 2 ");
										}
										break;
 8001358:	e112      	b.n	8001580 <seclectmenu+0x71c>
											adduid(keyadd1);
 800135a:	78bb      	ldrb	r3, [r7, #2]
 800135c:	4618      	mov	r0, r3
 800135e:	f001 fd09 	bl	8002d74 <adduid>
											CLCD_Clear(&LCD1);
 8001362:	4847      	ldr	r0, [pc, #284]	@ (8001480 <seclectmenu+0x61c>)
 8001364:	f7ff fa2c 	bl	80007c0 <CLCD_Clear>
											CLCD_SetCursor(&LCD1, 0, 0);
 8001368:	2200      	movs	r2, #0
 800136a:	2100      	movs	r1, #0
 800136c:	4844      	ldr	r0, [pc, #272]	@ (8001480 <seclectmenu+0x61c>)
 800136e:	f7ff f9a9 	bl	80006c4 <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "=>  THE 1 ");
 8001372:	4944      	ldr	r1, [pc, #272]	@ (8001484 <seclectmenu+0x620>)
 8001374:	4842      	ldr	r0, [pc, #264]	@ (8001480 <seclectmenu+0x61c>)
 8001376:	f7ff fa0c 	bl	8000792 <CLCD_WriteString>
											CLCD_SetCursor(&LCD1, 0, 1);
 800137a:	2201      	movs	r2, #1
 800137c:	2100      	movs	r1, #0
 800137e:	4840      	ldr	r0, [pc, #256]	@ (8001480 <seclectmenu+0x61c>)
 8001380:	f7ff f9a0 	bl	80006c4 <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "    THE 2 ");
 8001384:	4940      	ldr	r1, [pc, #256]	@ (8001488 <seclectmenu+0x624>)
 8001386:	483e      	ldr	r0, [pc, #248]	@ (8001480 <seclectmenu+0x61c>)
 8001388:	f7ff fa03 	bl	8000792 <CLCD_WriteString>
										break;
 800138c:	e0f8      	b.n	8001580 <seclectmenu+0x71c>
									case 2:
										if (CheckKey(keyadd1) != 0)
 800138e:	78bb      	ldrb	r3, [r7, #2]
 8001390:	4618      	mov	r0, r3
 8001392:	f001 feb3 	bl	80030fc <CheckKey>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d025      	beq.n	80013e8 <seclectmenu+0x584>
										{
											CLCD_Clear(&LCD1);
 800139c:	4838      	ldr	r0, [pc, #224]	@ (8001480 <seclectmenu+0x61c>)
 800139e:	f7ff fa0f 	bl	80007c0 <CLCD_Clear>
											CLCD_SetCursor(&LCD1, 0, 0);
 80013a2:	2200      	movs	r2, #0
 80013a4:	2100      	movs	r1, #0
 80013a6:	4836      	ldr	r0, [pc, #216]	@ (8001480 <seclectmenu+0x61c>)
 80013a8:	f7ff f98c 	bl	80006c4 <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "  DA CO THE 2 ");
 80013ac:	4940      	ldr	r1, [pc, #256]	@ (80014b0 <seclectmenu+0x64c>)
 80013ae:	4834      	ldr	r0, [pc, #208]	@ (8001480 <seclectmenu+0x61c>)
 80013b0:	f7ff f9ef 	bl	8000792 <CLCD_WriteString>
											HAL_Delay(1000);
 80013b4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80013b8:	f002 fc76 	bl	8003ca8 <HAL_Delay>
											CLCD_Clear(&LCD1);
 80013bc:	4830      	ldr	r0, [pc, #192]	@ (8001480 <seclectmenu+0x61c>)
 80013be:	f7ff f9ff 	bl	80007c0 <CLCD_Clear>
											CLCD_SetCursor(&LCD1, 0, 0);
 80013c2:	2200      	movs	r2, #0
 80013c4:	2100      	movs	r1, #0
 80013c6:	482e      	ldr	r0, [pc, #184]	@ (8001480 <seclectmenu+0x61c>)
 80013c8:	f7ff f97c 	bl	80006c4 <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "=>  THE 2 ");
 80013cc:	492f      	ldr	r1, [pc, #188]	@ (800148c <seclectmenu+0x628>)
 80013ce:	482c      	ldr	r0, [pc, #176]	@ (8001480 <seclectmenu+0x61c>)
 80013d0:	f7ff f9df 	bl	8000792 <CLCD_WriteString>
											CLCD_SetCursor(&LCD1, 0, 1);
 80013d4:	2201      	movs	r2, #1
 80013d6:	2100      	movs	r1, #0
 80013d8:	4829      	ldr	r0, [pc, #164]	@ (8001480 <seclectmenu+0x61c>)
 80013da:	f7ff f973 	bl	80006c4 <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "    THE 3 ");
 80013de:	492c      	ldr	r1, [pc, #176]	@ (8001490 <seclectmenu+0x62c>)
 80013e0:	4827      	ldr	r0, [pc, #156]	@ (8001480 <seclectmenu+0x61c>)
 80013e2:	f7ff f9d6 	bl	8000792 <CLCD_WriteString>
											CLCD_SetCursor(&LCD1, 0, 0);
											CLCD_WriteString(&LCD1, "=>  THE 2 ");
											CLCD_SetCursor(&LCD1, 0, 1);
											CLCD_WriteString(&LCD1, "    THE 3 ");
										}
										break;
 80013e6:	e0cb      	b.n	8001580 <seclectmenu+0x71c>
											adduid(keyadd1);
 80013e8:	78bb      	ldrb	r3, [r7, #2]
 80013ea:	4618      	mov	r0, r3
 80013ec:	f001 fcc2 	bl	8002d74 <adduid>
											CLCD_Clear(&LCD1);
 80013f0:	4823      	ldr	r0, [pc, #140]	@ (8001480 <seclectmenu+0x61c>)
 80013f2:	f7ff f9e5 	bl	80007c0 <CLCD_Clear>
											CLCD_SetCursor(&LCD1, 0, 0);
 80013f6:	2200      	movs	r2, #0
 80013f8:	2100      	movs	r1, #0
 80013fa:	4821      	ldr	r0, [pc, #132]	@ (8001480 <seclectmenu+0x61c>)
 80013fc:	f7ff f962 	bl	80006c4 <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "=>  THE 2 ");
 8001400:	4922      	ldr	r1, [pc, #136]	@ (800148c <seclectmenu+0x628>)
 8001402:	481f      	ldr	r0, [pc, #124]	@ (8001480 <seclectmenu+0x61c>)
 8001404:	f7ff f9c5 	bl	8000792 <CLCD_WriteString>
											CLCD_SetCursor(&LCD1, 0, 1);
 8001408:	2201      	movs	r2, #1
 800140a:	2100      	movs	r1, #0
 800140c:	481c      	ldr	r0, [pc, #112]	@ (8001480 <seclectmenu+0x61c>)
 800140e:	f7ff f959 	bl	80006c4 <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "    THE 3 ");
 8001412:	491f      	ldr	r1, [pc, #124]	@ (8001490 <seclectmenu+0x62c>)
 8001414:	481a      	ldr	r0, [pc, #104]	@ (8001480 <seclectmenu+0x61c>)
 8001416:	f7ff f9bc 	bl	8000792 <CLCD_WriteString>
										break;
 800141a:	e0b1      	b.n	8001580 <seclectmenu+0x71c>
									case 3:
										if (CheckKey(keyadd1) != 0)
 800141c:	78bb      	ldrb	r3, [r7, #2]
 800141e:	4618      	mov	r0, r3
 8001420:	f001 fe6c 	bl	80030fc <CheckKey>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d046      	beq.n	80014b8 <seclectmenu+0x654>
										{
											CLCD_Clear(&LCD1);
 800142a:	4815      	ldr	r0, [pc, #84]	@ (8001480 <seclectmenu+0x61c>)
 800142c:	f7ff f9c8 	bl	80007c0 <CLCD_Clear>
											CLCD_SetCursor(&LCD1, 0, 0);
 8001430:	2200      	movs	r2, #0
 8001432:	2100      	movs	r1, #0
 8001434:	4812      	ldr	r0, [pc, #72]	@ (8001480 <seclectmenu+0x61c>)
 8001436:	f7ff f945 	bl	80006c4 <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "  DA CO THE 3 ");
 800143a:	491e      	ldr	r1, [pc, #120]	@ (80014b4 <seclectmenu+0x650>)
 800143c:	4810      	ldr	r0, [pc, #64]	@ (8001480 <seclectmenu+0x61c>)
 800143e:	f7ff f9a8 	bl	8000792 <CLCD_WriteString>
											HAL_Delay(1000);
 8001442:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001446:	f002 fc2f 	bl	8003ca8 <HAL_Delay>
											CLCD_Clear(&LCD1);
 800144a:	480d      	ldr	r0, [pc, #52]	@ (8001480 <seclectmenu+0x61c>)
 800144c:	f7ff f9b8 	bl	80007c0 <CLCD_Clear>
											CLCD_SetCursor(&LCD1, 0, 0);
 8001450:	2200      	movs	r2, #0
 8001452:	2100      	movs	r1, #0
 8001454:	480a      	ldr	r0, [pc, #40]	@ (8001480 <seclectmenu+0x61c>)
 8001456:	f7ff f935 	bl	80006c4 <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "=>  THE 3 ");
 800145a:	490e      	ldr	r1, [pc, #56]	@ (8001494 <seclectmenu+0x630>)
 800145c:	4808      	ldr	r0, [pc, #32]	@ (8001480 <seclectmenu+0x61c>)
 800145e:	f7ff f998 	bl	8000792 <CLCD_WriteString>
											CLCD_SetCursor(&LCD1, 0, 1);
 8001462:	2201      	movs	r2, #1
 8001464:	2100      	movs	r1, #0
 8001466:	4806      	ldr	r0, [pc, #24]	@ (8001480 <seclectmenu+0x61c>)
 8001468:	f7ff f92c 	bl	80006c4 <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "    THE 4 ");
 800146c:	490a      	ldr	r1, [pc, #40]	@ (8001498 <seclectmenu+0x634>)
 800146e:	4804      	ldr	r0, [pc, #16]	@ (8001480 <seclectmenu+0x61c>)
 8001470:	f7ff f98f 	bl	8000792 <CLCD_WriteString>
											CLCD_SetCursor(&LCD1, 0, 0);
											CLCD_WriteString(&LCD1, "=>  THE 3 ");
											CLCD_SetCursor(&LCD1, 0, 1);
											CLCD_WriteString(&LCD1, "    THE 4 ");
										}
										break;
 8001474:	e084      	b.n	8001580 <seclectmenu+0x71c>
 8001476:	bf00      	nop
 8001478:	40010c00 	.word	0x40010c00
 800147c:	20000000 	.word	0x20000000
 8001480:	200000f4 	.word	0x200000f4
 8001484:	08005d8c 	.word	0x08005d8c
 8001488:	08005d98 	.word	0x08005d98
 800148c:	08005da4 	.word	0x08005da4
 8001490:	08005db0 	.word	0x08005db0
 8001494:	08005dbc 	.word	0x08005dbc
 8001498:	08005dc8 	.word	0x08005dc8
 800149c:	08005dd4 	.word	0x08005dd4
 80014a0:	08005de0 	.word	0x08005de0
 80014a4:	08005dec 	.word	0x08005dec
 80014a8:	40010800 	.word	0x40010800
 80014ac:	08005df8 	.word	0x08005df8
 80014b0:	08005e08 	.word	0x08005e08
 80014b4:	08005e18 	.word	0x08005e18
											adduid(keyadd1);
 80014b8:	78bb      	ldrb	r3, [r7, #2]
 80014ba:	4618      	mov	r0, r3
 80014bc:	f001 fc5a 	bl	8002d74 <adduid>
											CLCD_Clear(&LCD1);
 80014c0:	48aa      	ldr	r0, [pc, #680]	@ (800176c <seclectmenu+0x908>)
 80014c2:	f7ff f97d 	bl	80007c0 <CLCD_Clear>
											CLCD_SetCursor(&LCD1, 0, 0);
 80014c6:	2200      	movs	r2, #0
 80014c8:	2100      	movs	r1, #0
 80014ca:	48a8      	ldr	r0, [pc, #672]	@ (800176c <seclectmenu+0x908>)
 80014cc:	f7ff f8fa 	bl	80006c4 <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "=>  THE 3 ");
 80014d0:	49a7      	ldr	r1, [pc, #668]	@ (8001770 <seclectmenu+0x90c>)
 80014d2:	48a6      	ldr	r0, [pc, #664]	@ (800176c <seclectmenu+0x908>)
 80014d4:	f7ff f95d 	bl	8000792 <CLCD_WriteString>
											CLCD_SetCursor(&LCD1, 0, 1);
 80014d8:	2201      	movs	r2, #1
 80014da:	2100      	movs	r1, #0
 80014dc:	48a3      	ldr	r0, [pc, #652]	@ (800176c <seclectmenu+0x908>)
 80014de:	f7ff f8f1 	bl	80006c4 <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "    THE 4 ");
 80014e2:	49a4      	ldr	r1, [pc, #656]	@ (8001774 <seclectmenu+0x910>)
 80014e4:	48a1      	ldr	r0, [pc, #644]	@ (800176c <seclectmenu+0x908>)
 80014e6:	f7ff f954 	bl	8000792 <CLCD_WriteString>
										break;
 80014ea:	e049      	b.n	8001580 <seclectmenu+0x71c>
									case 4:
										if (CheckKey(keyadd1) != 0)
 80014ec:	78bb      	ldrb	r3, [r7, #2]
 80014ee:	4618      	mov	r0, r3
 80014f0:	f001 fe04 	bl	80030fc <CheckKey>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d025      	beq.n	8001546 <seclectmenu+0x6e2>
										{
											CLCD_Clear(&LCD1);
 80014fa:	489c      	ldr	r0, [pc, #624]	@ (800176c <seclectmenu+0x908>)
 80014fc:	f7ff f960 	bl	80007c0 <CLCD_Clear>
											CLCD_SetCursor(&LCD1, 0, 0);
 8001500:	2200      	movs	r2, #0
 8001502:	2100      	movs	r1, #0
 8001504:	4899      	ldr	r0, [pc, #612]	@ (800176c <seclectmenu+0x908>)
 8001506:	f7ff f8dd 	bl	80006c4 <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "  DA CO THE 4 ");
 800150a:	499b      	ldr	r1, [pc, #620]	@ (8001778 <seclectmenu+0x914>)
 800150c:	4897      	ldr	r0, [pc, #604]	@ (800176c <seclectmenu+0x908>)
 800150e:	f7ff f940 	bl	8000792 <CLCD_WriteString>
											HAL_Delay(1000);
 8001512:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001516:	f002 fbc7 	bl	8003ca8 <HAL_Delay>
											CLCD_Clear(&LCD1);
 800151a:	4894      	ldr	r0, [pc, #592]	@ (800176c <seclectmenu+0x908>)
 800151c:	f7ff f950 	bl	80007c0 <CLCD_Clear>
											CLCD_SetCursor(&LCD1, 0, 0);
 8001520:	2200      	movs	r2, #0
 8001522:	2100      	movs	r1, #0
 8001524:	4891      	ldr	r0, [pc, #580]	@ (800176c <seclectmenu+0x908>)
 8001526:	f7ff f8cd 	bl	80006c4 <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "=>  THE 4 ");
 800152a:	4994      	ldr	r1, [pc, #592]	@ (800177c <seclectmenu+0x918>)
 800152c:	488f      	ldr	r0, [pc, #572]	@ (800176c <seclectmenu+0x908>)
 800152e:	f7ff f930 	bl	8000792 <CLCD_WriteString>
											CLCD_SetCursor(&LCD1, 0, 1);
 8001532:	2201      	movs	r2, #1
 8001534:	2100      	movs	r1, #0
 8001536:	488d      	ldr	r0, [pc, #564]	@ (800176c <seclectmenu+0x908>)
 8001538:	f7ff f8c4 	bl	80006c4 <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "    BACK ");
 800153c:	4990      	ldr	r1, [pc, #576]	@ (8001780 <seclectmenu+0x91c>)
 800153e:	488b      	ldr	r0, [pc, #556]	@ (800176c <seclectmenu+0x908>)
 8001540:	f7ff f927 	bl	8000792 <CLCD_WriteString>
											CLCD_SetCursor(&LCD1, 0, 0);
											CLCD_WriteString(&LCD1, "=>  THE 4 ");
											CLCD_SetCursor(&LCD1, 0, 1);
											CLCD_WriteString(&LCD1, "    BACK ");
										}
										break;
 8001544:	e01c      	b.n	8001580 <seclectmenu+0x71c>
											adduid(keyadd1);
 8001546:	78bb      	ldrb	r3, [r7, #2]
 8001548:	4618      	mov	r0, r3
 800154a:	f001 fc13 	bl	8002d74 <adduid>
											CLCD_Clear(&LCD1);
 800154e:	4887      	ldr	r0, [pc, #540]	@ (800176c <seclectmenu+0x908>)
 8001550:	f7ff f936 	bl	80007c0 <CLCD_Clear>
											CLCD_SetCursor(&LCD1, 0, 0);
 8001554:	2200      	movs	r2, #0
 8001556:	2100      	movs	r1, #0
 8001558:	4884      	ldr	r0, [pc, #528]	@ (800176c <seclectmenu+0x908>)
 800155a:	f7ff f8b3 	bl	80006c4 <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "=>  THE 4 ");
 800155e:	4987      	ldr	r1, [pc, #540]	@ (800177c <seclectmenu+0x918>)
 8001560:	4882      	ldr	r0, [pc, #520]	@ (800176c <seclectmenu+0x908>)
 8001562:	f7ff f916 	bl	8000792 <CLCD_WriteString>
											CLCD_SetCursor(&LCD1, 0, 1);
 8001566:	2201      	movs	r2, #1
 8001568:	2100      	movs	r1, #0
 800156a:	4880      	ldr	r0, [pc, #512]	@ (800176c <seclectmenu+0x908>)
 800156c:	f7ff f8aa 	bl	80006c4 <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "    BACK ");
 8001570:	4983      	ldr	r1, [pc, #524]	@ (8001780 <seclectmenu+0x91c>)
 8001572:	487e      	ldr	r0, [pc, #504]	@ (800176c <seclectmenu+0x908>)
 8001574:	f7ff f90d 	bl	8000792 <CLCD_WriteString>
										break;
 8001578:	e002      	b.n	8001580 <seclectmenu+0x71c>
									default:
										back11 = 0;
 800157a:	2300      	movs	r3, #0
 800157c:	74fb      	strb	r3, [r7, #19]
										break;
 800157e:	bf00      	nop
							while (back11 == 1)
 8001580:	7cfb      	ldrb	r3, [r7, #19]
 8001582:	2b01      	cmp	r3, #1
 8001584:	f43f add1 	beq.w	800112a <seclectmenu+0x2c6>
									}
								}
							}
							CLCD_Clear(&LCD1);
 8001588:	4878      	ldr	r0, [pc, #480]	@ (800176c <seclectmenu+0x908>)
 800158a:	f7ff f919 	bl	80007c0 <CLCD_Clear>
							CLCD_SetCursor(&LCD1, 0, 0);
 800158e:	2200      	movs	r2, #0
 8001590:	2100      	movs	r1, #0
 8001592:	4876      	ldr	r0, [pc, #472]	@ (800176c <seclectmenu+0x908>)
 8001594:	f7ff f896 	bl	80006c4 <CLCD_SetCursor>
							CLCD_WriteString(&LCD1, "=> THE NGUOI LON");
 8001598:	497a      	ldr	r1, [pc, #488]	@ (8001784 <seclectmenu+0x920>)
 800159a:	4874      	ldr	r0, [pc, #464]	@ (800176c <seclectmenu+0x908>)
 800159c:	f7ff f8f9 	bl	8000792 <CLCD_WriteString>
							CLCD_SetCursor(&LCD1, 0, 1);
 80015a0:	2201      	movs	r2, #1
 80015a2:	2100      	movs	r1, #0
 80015a4:	4871      	ldr	r0, [pc, #452]	@ (800176c <seclectmenu+0x908>)
 80015a6:	f7ff f88d 	bl	80006c4 <CLCD_SetCursor>
							CLCD_WriteString(&LCD1, "   THE TRE EM");
 80015aa:	4977      	ldr	r1, [pc, #476]	@ (8001788 <seclectmenu+0x924>)
 80015ac:	486f      	ldr	r0, [pc, #444]	@ (800176c <seclectmenu+0x908>)
 80015ae:	f7ff f8f0 	bl	8000792 <CLCD_WriteString>
							break;
 80015b2:	e237      	b.n	8001a24 <seclectmenu+0xbc0>
						case 2:
							CLCD_Clear(&LCD1);
 80015b4:	486d      	ldr	r0, [pc, #436]	@ (800176c <seclectmenu+0x908>)
 80015b6:	f7ff f903 	bl	80007c0 <CLCD_Clear>
							CLCD_SetCursor(&LCD1, 0, 0);
 80015ba:	2200      	movs	r2, #0
 80015bc:	2100      	movs	r1, #0
 80015be:	486b      	ldr	r0, [pc, #428]	@ (800176c <seclectmenu+0x908>)
 80015c0:	f7ff f880 	bl	80006c4 <CLCD_SetCursor>
							CLCD_WriteString(&LCD1, "=>  THE 1 ");
 80015c4:	4971      	ldr	r1, [pc, #452]	@ (800178c <seclectmenu+0x928>)
 80015c6:	4869      	ldr	r0, [pc, #420]	@ (800176c <seclectmenu+0x908>)
 80015c8:	f7ff f8e3 	bl	8000792 <CLCD_WriteString>
							CLCD_SetCursor(&LCD1, 0, 1);
 80015cc:	2201      	movs	r2, #1
 80015ce:	2100      	movs	r1, #0
 80015d0:	4866      	ldr	r0, [pc, #408]	@ (800176c <seclectmenu+0x908>)
 80015d2:	f7ff f877 	bl	80006c4 <CLCD_SetCursor>
							CLCD_WriteString(&LCD1, "    THE 2 ");
 80015d6:	496e      	ldr	r1, [pc, #440]	@ (8001790 <seclectmenu+0x92c>)
 80015d8:	4864      	ldr	r0, [pc, #400]	@ (800176c <seclectmenu+0x908>)
 80015da:	f7ff f8da 	bl	8000792 <CLCD_WriteString>
							uint8_t statusadd2 = 1;
 80015de:	2301      	movs	r3, #1
 80015e0:	74bb      	strb	r3, [r7, #18]
							uint8_t back12 = 1;
 80015e2:	2301      	movs	r3, #1
 80015e4:	747b      	strb	r3, [r7, #17]
							while (back12 == 1)
 80015e6:	e200      	b.n	80019ea <seclectmenu+0xb86>
							{
								if (exitmenu == 0)
 80015e8:	4b6a      	ldr	r3, [pc, #424]	@ (8001794 <seclectmenu+0x930>)
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d108      	bne.n	8001602 <seclectmenu+0x79e>
								{
									CLCD_Clear(&LCD1);
 80015f0:	485e      	ldr	r0, [pc, #376]	@ (800176c <seclectmenu+0x908>)
 80015f2:	f7ff f8e5 	bl	80007c0 <CLCD_Clear>
									HAL_Delay(1000);
 80015f6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80015fa:	f002 fb55 	bl	8003ca8 <HAL_Delay>
									return;
 80015fe:	f001 bb0c 	b.w	8002c1a <seclectmenu+0x1db6>
								}
								if (checkbuton(SELECCT_GPIO_Port, SELECCT_Pin) != 0)
 8001602:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001606:	4864      	ldr	r0, [pc, #400]	@ (8001798 <seclectmenu+0x934>)
 8001608:	f7ff fbde 	bl	8000dc8 <checkbuton>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	f000 808a 	beq.w	8001728 <seclectmenu+0x8c4>
								{
									exitmenu = 15;
 8001614:	4b5f      	ldr	r3, [pc, #380]	@ (8001794 <seclectmenu+0x930>)
 8001616:	220f      	movs	r2, #15
 8001618:	701a      	strb	r2, [r3, #0]
									statusadd2++;
 800161a:	7cbb      	ldrb	r3, [r7, #18]
 800161c:	3301      	adds	r3, #1
 800161e:	74bb      	strb	r3, [r7, #18]
									statusadd2 = (statusadd2 > 4) ? 0 : statusadd2;
 8001620:	7cbb      	ldrb	r3, [r7, #18]
 8001622:	2b04      	cmp	r3, #4
 8001624:	d801      	bhi.n	800162a <seclectmenu+0x7c6>
 8001626:	7cbb      	ldrb	r3, [r7, #18]
 8001628:	e000      	b.n	800162c <seclectmenu+0x7c8>
 800162a:	2300      	movs	r3, #0
 800162c:	74bb      	strb	r3, [r7, #18]
									switch (statusadd2)
 800162e:	7cbb      	ldrb	r3, [r7, #18]
 8001630:	3b01      	subs	r3, #1
 8001632:	2b03      	cmp	r3, #3
 8001634:	d862      	bhi.n	80016fc <seclectmenu+0x898>
 8001636:	a201      	add	r2, pc, #4	@ (adr r2, 800163c <seclectmenu+0x7d8>)
 8001638:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800163c:	0800164d 	.word	0x0800164d
 8001640:	08001679 	.word	0x08001679
 8001644:	080016a5 	.word	0x080016a5
 8001648:	080016d1 	.word	0x080016d1
									{
									case 1:
										CLCD_Clear(&LCD1);
 800164c:	4847      	ldr	r0, [pc, #284]	@ (800176c <seclectmenu+0x908>)
 800164e:	f7ff f8b7 	bl	80007c0 <CLCD_Clear>
										CLCD_SetCursor(&LCD1, 0, 0);
 8001652:	2200      	movs	r2, #0
 8001654:	2100      	movs	r1, #0
 8001656:	4845      	ldr	r0, [pc, #276]	@ (800176c <seclectmenu+0x908>)
 8001658:	f7ff f834 	bl	80006c4 <CLCD_SetCursor>
										CLCD_WriteString(&LCD1, "=>  THE 1 ");
 800165c:	494b      	ldr	r1, [pc, #300]	@ (800178c <seclectmenu+0x928>)
 800165e:	4843      	ldr	r0, [pc, #268]	@ (800176c <seclectmenu+0x908>)
 8001660:	f7ff f897 	bl	8000792 <CLCD_WriteString>
										CLCD_SetCursor(&LCD1, 0, 1);
 8001664:	2201      	movs	r2, #1
 8001666:	2100      	movs	r1, #0
 8001668:	4840      	ldr	r0, [pc, #256]	@ (800176c <seclectmenu+0x908>)
 800166a:	f7ff f82b 	bl	80006c4 <CLCD_SetCursor>
										CLCD_WriteString(&LCD1, "    THE 2 ");
 800166e:	4948      	ldr	r1, [pc, #288]	@ (8001790 <seclectmenu+0x92c>)
 8001670:	483e      	ldr	r0, [pc, #248]	@ (800176c <seclectmenu+0x908>)
 8001672:	f7ff f88e 	bl	8000792 <CLCD_WriteString>
										break;
 8001676:	e057      	b.n	8001728 <seclectmenu+0x8c4>
									case 2:
										CLCD_Clear(&LCD1);
 8001678:	483c      	ldr	r0, [pc, #240]	@ (800176c <seclectmenu+0x908>)
 800167a:	f7ff f8a1 	bl	80007c0 <CLCD_Clear>
										CLCD_SetCursor(&LCD1, 0, 0);
 800167e:	2200      	movs	r2, #0
 8001680:	2100      	movs	r1, #0
 8001682:	483a      	ldr	r0, [pc, #232]	@ (800176c <seclectmenu+0x908>)
 8001684:	f7ff f81e 	bl	80006c4 <CLCD_SetCursor>
										CLCD_WriteString(&LCD1, "=>  THE 2 ");
 8001688:	4944      	ldr	r1, [pc, #272]	@ (800179c <seclectmenu+0x938>)
 800168a:	4838      	ldr	r0, [pc, #224]	@ (800176c <seclectmenu+0x908>)
 800168c:	f7ff f881 	bl	8000792 <CLCD_WriteString>
										CLCD_SetCursor(&LCD1, 0, 1);
 8001690:	2201      	movs	r2, #1
 8001692:	2100      	movs	r1, #0
 8001694:	4835      	ldr	r0, [pc, #212]	@ (800176c <seclectmenu+0x908>)
 8001696:	f7ff f815 	bl	80006c4 <CLCD_SetCursor>
										CLCD_WriteString(&LCD1, "    THE 3 ");
 800169a:	4941      	ldr	r1, [pc, #260]	@ (80017a0 <seclectmenu+0x93c>)
 800169c:	4833      	ldr	r0, [pc, #204]	@ (800176c <seclectmenu+0x908>)
 800169e:	f7ff f878 	bl	8000792 <CLCD_WriteString>
										break;
 80016a2:	e041      	b.n	8001728 <seclectmenu+0x8c4>
									case 3:
										CLCD_Clear(&LCD1);
 80016a4:	4831      	ldr	r0, [pc, #196]	@ (800176c <seclectmenu+0x908>)
 80016a6:	f7ff f88b 	bl	80007c0 <CLCD_Clear>
										CLCD_SetCursor(&LCD1, 0, 0);
 80016aa:	2200      	movs	r2, #0
 80016ac:	2100      	movs	r1, #0
 80016ae:	482f      	ldr	r0, [pc, #188]	@ (800176c <seclectmenu+0x908>)
 80016b0:	f7ff f808 	bl	80006c4 <CLCD_SetCursor>
										CLCD_WriteString(&LCD1, "=>  THE 3 ");
 80016b4:	492e      	ldr	r1, [pc, #184]	@ (8001770 <seclectmenu+0x90c>)
 80016b6:	482d      	ldr	r0, [pc, #180]	@ (800176c <seclectmenu+0x908>)
 80016b8:	f7ff f86b 	bl	8000792 <CLCD_WriteString>
										CLCD_SetCursor(&LCD1, 0, 1);
 80016bc:	2201      	movs	r2, #1
 80016be:	2100      	movs	r1, #0
 80016c0:	482a      	ldr	r0, [pc, #168]	@ (800176c <seclectmenu+0x908>)
 80016c2:	f7fe ffff 	bl	80006c4 <CLCD_SetCursor>
										CLCD_WriteString(&LCD1, "    THE 4 ");
 80016c6:	492b      	ldr	r1, [pc, #172]	@ (8001774 <seclectmenu+0x910>)
 80016c8:	4828      	ldr	r0, [pc, #160]	@ (800176c <seclectmenu+0x908>)
 80016ca:	f7ff f862 	bl	8000792 <CLCD_WriteString>
										break;
 80016ce:	e02b      	b.n	8001728 <seclectmenu+0x8c4>
									case 4:
										CLCD_Clear(&LCD1);
 80016d0:	4826      	ldr	r0, [pc, #152]	@ (800176c <seclectmenu+0x908>)
 80016d2:	f7ff f875 	bl	80007c0 <CLCD_Clear>
										CLCD_SetCursor(&LCD1, 0, 0);
 80016d6:	2200      	movs	r2, #0
 80016d8:	2100      	movs	r1, #0
 80016da:	4824      	ldr	r0, [pc, #144]	@ (800176c <seclectmenu+0x908>)
 80016dc:	f7fe fff2 	bl	80006c4 <CLCD_SetCursor>
										CLCD_WriteString(&LCD1, "=>  THE 4 ");
 80016e0:	4926      	ldr	r1, [pc, #152]	@ (800177c <seclectmenu+0x918>)
 80016e2:	4822      	ldr	r0, [pc, #136]	@ (800176c <seclectmenu+0x908>)
 80016e4:	f7ff f855 	bl	8000792 <CLCD_WriteString>
										CLCD_SetCursor(&LCD1, 0, 1);
 80016e8:	2201      	movs	r2, #1
 80016ea:	2100      	movs	r1, #0
 80016ec:	481f      	ldr	r0, [pc, #124]	@ (800176c <seclectmenu+0x908>)
 80016ee:	f7fe ffe9 	bl	80006c4 <CLCD_SetCursor>
										CLCD_WriteString(&LCD1, "    BACK ");
 80016f2:	4923      	ldr	r1, [pc, #140]	@ (8001780 <seclectmenu+0x91c>)
 80016f4:	481d      	ldr	r0, [pc, #116]	@ (800176c <seclectmenu+0x908>)
 80016f6:	f7ff f84c 	bl	8000792 <CLCD_WriteString>
										break;
 80016fa:	e015      	b.n	8001728 <seclectmenu+0x8c4>
									default:
										CLCD_Clear(&LCD1);
 80016fc:	481b      	ldr	r0, [pc, #108]	@ (800176c <seclectmenu+0x908>)
 80016fe:	f7ff f85f 	bl	80007c0 <CLCD_Clear>
										CLCD_SetCursor(&LCD1, 0, 0);
 8001702:	2200      	movs	r2, #0
 8001704:	2100      	movs	r1, #0
 8001706:	4819      	ldr	r0, [pc, #100]	@ (800176c <seclectmenu+0x908>)
 8001708:	f7fe ffdc 	bl	80006c4 <CLCD_SetCursor>
										CLCD_WriteString(&LCD1, "    THE 4 ");
 800170c:	4919      	ldr	r1, [pc, #100]	@ (8001774 <seclectmenu+0x910>)
 800170e:	4817      	ldr	r0, [pc, #92]	@ (800176c <seclectmenu+0x908>)
 8001710:	f7ff f83f 	bl	8000792 <CLCD_WriteString>
										CLCD_SetCursor(&LCD1, 0, 1);
 8001714:	2201      	movs	r2, #1
 8001716:	2100      	movs	r1, #0
 8001718:	4814      	ldr	r0, [pc, #80]	@ (800176c <seclectmenu+0x908>)
 800171a:	f7fe ffd3 	bl	80006c4 <CLCD_SetCursor>
										CLCD_WriteString(&LCD1, "=>  BACK");
 800171e:	4921      	ldr	r1, [pc, #132]	@ (80017a4 <seclectmenu+0x940>)
 8001720:	4812      	ldr	r0, [pc, #72]	@ (800176c <seclectmenu+0x908>)
 8001722:	f7ff f836 	bl	8000792 <CLCD_WriteString>
										break;
 8001726:	bf00      	nop
									}
								}
								if (checkbuton(MENU_GPIO_Port, MENU_Pin) != 0)
 8001728:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800172c:	481e      	ldr	r0, [pc, #120]	@ (80017a8 <seclectmenu+0x944>)
 800172e:	f7ff fb4b 	bl	8000dc8 <checkbuton>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	f000 8158 	beq.w	80019ea <seclectmenu+0xb86>
								{
									exitmenu = 15;
 800173a:	4b16      	ldr	r3, [pc, #88]	@ (8001794 <seclectmenu+0x930>)
 800173c:	220f      	movs	r2, #15
 800173e:	701a      	strb	r2, [r3, #0]
									uint8_t keyadd2 = (statusadd << 4) + statusadd2;
 8001740:	7dbb      	ldrb	r3, [r7, #22]
 8001742:	011b      	lsls	r3, r3, #4
 8001744:	b2da      	uxtb	r2, r3
 8001746:	7cbb      	ldrb	r3, [r7, #18]
 8001748:	4413      	add	r3, r2
 800174a:	70fb      	strb	r3, [r7, #3]
									switch (statusadd2)
 800174c:	7cbb      	ldrb	r3, [r7, #18]
 800174e:	3b01      	subs	r3, #1
 8001750:	2b03      	cmp	r3, #3
 8001752:	f200 8147 	bhi.w	80019e4 <seclectmenu+0xb80>
 8001756:	a201      	add	r2, pc, #4	@ (adr r2, 800175c <seclectmenu+0x8f8>)
 8001758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800175c:	080017ad 	.word	0x080017ad
 8001760:	0800183b 	.word	0x0800183b
 8001764:	080018c9 	.word	0x080018c9
 8001768:	08001957 	.word	0x08001957
 800176c:	200000f4 	.word	0x200000f4
 8001770:	08005dbc 	.word	0x08005dbc
 8001774:	08005dc8 	.word	0x08005dc8
 8001778:	08005e28 	.word	0x08005e28
 800177c:	08005dd4 	.word	0x08005dd4
 8001780:	08005de0 	.word	0x08005de0
 8001784:	08005d50 	.word	0x08005d50
 8001788:	08005d64 	.word	0x08005d64
 800178c:	08005d8c 	.word	0x08005d8c
 8001790:	08005d98 	.word	0x08005d98
 8001794:	20000000 	.word	0x20000000
 8001798:	40010c00 	.word	0x40010c00
 800179c:	08005da4 	.word	0x08005da4
 80017a0:	08005db0 	.word	0x08005db0
 80017a4:	08005dec 	.word	0x08005dec
 80017a8:	40010800 	.word	0x40010800
									{
									case 1:
										if (CheckKey(keyadd2) != 0)
 80017ac:	78fb      	ldrb	r3, [r7, #3]
 80017ae:	4618      	mov	r0, r3
 80017b0:	f001 fca4 	bl	80030fc <CheckKey>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d025      	beq.n	8001806 <seclectmenu+0x9a2>
										{
											CLCD_Clear(&LCD1);
 80017ba:	48bc      	ldr	r0, [pc, #752]	@ (8001aac <seclectmenu+0xc48>)
 80017bc:	f7ff f800 	bl	80007c0 <CLCD_Clear>
											CLCD_SetCursor(&LCD1, 0, 0);
 80017c0:	2200      	movs	r2, #0
 80017c2:	2100      	movs	r1, #0
 80017c4:	48b9      	ldr	r0, [pc, #740]	@ (8001aac <seclectmenu+0xc48>)
 80017c6:	f7fe ff7d 	bl	80006c4 <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "  DA CO THE 1 ");
 80017ca:	49b9      	ldr	r1, [pc, #740]	@ (8001ab0 <seclectmenu+0xc4c>)
 80017cc:	48b7      	ldr	r0, [pc, #732]	@ (8001aac <seclectmenu+0xc48>)
 80017ce:	f7fe ffe0 	bl	8000792 <CLCD_WriteString>
											HAL_Delay(1000);
 80017d2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80017d6:	f002 fa67 	bl	8003ca8 <HAL_Delay>
											CLCD_Clear(&LCD1);
 80017da:	48b4      	ldr	r0, [pc, #720]	@ (8001aac <seclectmenu+0xc48>)
 80017dc:	f7fe fff0 	bl	80007c0 <CLCD_Clear>
											CLCD_SetCursor(&LCD1, 0, 0);
 80017e0:	2200      	movs	r2, #0
 80017e2:	2100      	movs	r1, #0
 80017e4:	48b1      	ldr	r0, [pc, #708]	@ (8001aac <seclectmenu+0xc48>)
 80017e6:	f7fe ff6d 	bl	80006c4 <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "=>  THE 1 ");
 80017ea:	49b2      	ldr	r1, [pc, #712]	@ (8001ab4 <seclectmenu+0xc50>)
 80017ec:	48af      	ldr	r0, [pc, #700]	@ (8001aac <seclectmenu+0xc48>)
 80017ee:	f7fe ffd0 	bl	8000792 <CLCD_WriteString>
											CLCD_SetCursor(&LCD1, 0, 1);
 80017f2:	2201      	movs	r2, #1
 80017f4:	2100      	movs	r1, #0
 80017f6:	48ad      	ldr	r0, [pc, #692]	@ (8001aac <seclectmenu+0xc48>)
 80017f8:	f7fe ff64 	bl	80006c4 <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "    THE 2 ");
 80017fc:	49ae      	ldr	r1, [pc, #696]	@ (8001ab8 <seclectmenu+0xc54>)
 80017fe:	48ab      	ldr	r0, [pc, #684]	@ (8001aac <seclectmenu+0xc48>)
 8001800:	f7fe ffc7 	bl	8000792 <CLCD_WriteString>
											CLCD_SetCursor(&LCD1, 0, 0);
											CLCD_WriteString(&LCD1, "=>  THE 1 ");
											CLCD_SetCursor(&LCD1, 0, 1);
											CLCD_WriteString(&LCD1, "    THE 2 ");
										}
										break;
 8001804:	e0f1      	b.n	80019ea <seclectmenu+0xb86>
											adduid(keyadd2);
 8001806:	78fb      	ldrb	r3, [r7, #3]
 8001808:	4618      	mov	r0, r3
 800180a:	f001 fab3 	bl	8002d74 <adduid>
											CLCD_Clear(&LCD1);
 800180e:	48a7      	ldr	r0, [pc, #668]	@ (8001aac <seclectmenu+0xc48>)
 8001810:	f7fe ffd6 	bl	80007c0 <CLCD_Clear>
											CLCD_SetCursor(&LCD1, 0, 0);
 8001814:	2200      	movs	r2, #0
 8001816:	2100      	movs	r1, #0
 8001818:	48a4      	ldr	r0, [pc, #656]	@ (8001aac <seclectmenu+0xc48>)
 800181a:	f7fe ff53 	bl	80006c4 <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "=>  THE 1 ");
 800181e:	49a5      	ldr	r1, [pc, #660]	@ (8001ab4 <seclectmenu+0xc50>)
 8001820:	48a2      	ldr	r0, [pc, #648]	@ (8001aac <seclectmenu+0xc48>)
 8001822:	f7fe ffb6 	bl	8000792 <CLCD_WriteString>
											CLCD_SetCursor(&LCD1, 0, 1);
 8001826:	2201      	movs	r2, #1
 8001828:	2100      	movs	r1, #0
 800182a:	48a0      	ldr	r0, [pc, #640]	@ (8001aac <seclectmenu+0xc48>)
 800182c:	f7fe ff4a 	bl	80006c4 <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "    THE 2 ");
 8001830:	49a1      	ldr	r1, [pc, #644]	@ (8001ab8 <seclectmenu+0xc54>)
 8001832:	489e      	ldr	r0, [pc, #632]	@ (8001aac <seclectmenu+0xc48>)
 8001834:	f7fe ffad 	bl	8000792 <CLCD_WriteString>
										break;
 8001838:	e0d7      	b.n	80019ea <seclectmenu+0xb86>
									case 2:
										if (CheckKey(keyadd2) != 0)
 800183a:	78fb      	ldrb	r3, [r7, #3]
 800183c:	4618      	mov	r0, r3
 800183e:	f001 fc5d 	bl	80030fc <CheckKey>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d025      	beq.n	8001894 <seclectmenu+0xa30>
										{
											CLCD_Clear(&LCD1);
 8001848:	4898      	ldr	r0, [pc, #608]	@ (8001aac <seclectmenu+0xc48>)
 800184a:	f7fe ffb9 	bl	80007c0 <CLCD_Clear>
											CLCD_SetCursor(&LCD1, 0, 0);
 800184e:	2200      	movs	r2, #0
 8001850:	2100      	movs	r1, #0
 8001852:	4896      	ldr	r0, [pc, #600]	@ (8001aac <seclectmenu+0xc48>)
 8001854:	f7fe ff36 	bl	80006c4 <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "  DA CO THE 2 ");
 8001858:	4998      	ldr	r1, [pc, #608]	@ (8001abc <seclectmenu+0xc58>)
 800185a:	4894      	ldr	r0, [pc, #592]	@ (8001aac <seclectmenu+0xc48>)
 800185c:	f7fe ff99 	bl	8000792 <CLCD_WriteString>
											HAL_Delay(1000);
 8001860:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001864:	f002 fa20 	bl	8003ca8 <HAL_Delay>
											CLCD_Clear(&LCD1);
 8001868:	4890      	ldr	r0, [pc, #576]	@ (8001aac <seclectmenu+0xc48>)
 800186a:	f7fe ffa9 	bl	80007c0 <CLCD_Clear>
											CLCD_SetCursor(&LCD1, 0, 0);
 800186e:	2200      	movs	r2, #0
 8001870:	2100      	movs	r1, #0
 8001872:	488e      	ldr	r0, [pc, #568]	@ (8001aac <seclectmenu+0xc48>)
 8001874:	f7fe ff26 	bl	80006c4 <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "=>  THE 2 ");
 8001878:	4991      	ldr	r1, [pc, #580]	@ (8001ac0 <seclectmenu+0xc5c>)
 800187a:	488c      	ldr	r0, [pc, #560]	@ (8001aac <seclectmenu+0xc48>)
 800187c:	f7fe ff89 	bl	8000792 <CLCD_WriteString>
											CLCD_SetCursor(&LCD1, 0, 1);
 8001880:	2201      	movs	r2, #1
 8001882:	2100      	movs	r1, #0
 8001884:	4889      	ldr	r0, [pc, #548]	@ (8001aac <seclectmenu+0xc48>)
 8001886:	f7fe ff1d 	bl	80006c4 <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "    THE 3 ");
 800188a:	498e      	ldr	r1, [pc, #568]	@ (8001ac4 <seclectmenu+0xc60>)
 800188c:	4887      	ldr	r0, [pc, #540]	@ (8001aac <seclectmenu+0xc48>)
 800188e:	f7fe ff80 	bl	8000792 <CLCD_WriteString>
											CLCD_SetCursor(&LCD1, 0, 0);
											CLCD_WriteString(&LCD1, "=>  THE 2 ");
											CLCD_SetCursor(&LCD1, 0, 1);
											CLCD_WriteString(&LCD1, "    THE 3 ");
										}
										break;
 8001892:	e0aa      	b.n	80019ea <seclectmenu+0xb86>
											adduid(keyadd2);
 8001894:	78fb      	ldrb	r3, [r7, #3]
 8001896:	4618      	mov	r0, r3
 8001898:	f001 fa6c 	bl	8002d74 <adduid>
											CLCD_Clear(&LCD1);
 800189c:	4883      	ldr	r0, [pc, #524]	@ (8001aac <seclectmenu+0xc48>)
 800189e:	f7fe ff8f 	bl	80007c0 <CLCD_Clear>
											CLCD_SetCursor(&LCD1, 0, 0);
 80018a2:	2200      	movs	r2, #0
 80018a4:	2100      	movs	r1, #0
 80018a6:	4881      	ldr	r0, [pc, #516]	@ (8001aac <seclectmenu+0xc48>)
 80018a8:	f7fe ff0c 	bl	80006c4 <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "=>  THE 2 ");
 80018ac:	4984      	ldr	r1, [pc, #528]	@ (8001ac0 <seclectmenu+0xc5c>)
 80018ae:	487f      	ldr	r0, [pc, #508]	@ (8001aac <seclectmenu+0xc48>)
 80018b0:	f7fe ff6f 	bl	8000792 <CLCD_WriteString>
											CLCD_SetCursor(&LCD1, 0, 1);
 80018b4:	2201      	movs	r2, #1
 80018b6:	2100      	movs	r1, #0
 80018b8:	487c      	ldr	r0, [pc, #496]	@ (8001aac <seclectmenu+0xc48>)
 80018ba:	f7fe ff03 	bl	80006c4 <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "    THE 3 ");
 80018be:	4981      	ldr	r1, [pc, #516]	@ (8001ac4 <seclectmenu+0xc60>)
 80018c0:	487a      	ldr	r0, [pc, #488]	@ (8001aac <seclectmenu+0xc48>)
 80018c2:	f7fe ff66 	bl	8000792 <CLCD_WriteString>
										break;
 80018c6:	e090      	b.n	80019ea <seclectmenu+0xb86>
									case 3:
										if (CheckKey(keyadd2) != 0)
 80018c8:	78fb      	ldrb	r3, [r7, #3]
 80018ca:	4618      	mov	r0, r3
 80018cc:	f001 fc16 	bl	80030fc <CheckKey>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d025      	beq.n	8001922 <seclectmenu+0xabe>
										{
											CLCD_Clear(&LCD1);
 80018d6:	4875      	ldr	r0, [pc, #468]	@ (8001aac <seclectmenu+0xc48>)
 80018d8:	f7fe ff72 	bl	80007c0 <CLCD_Clear>
											CLCD_SetCursor(&LCD1, 0, 0);
 80018dc:	2200      	movs	r2, #0
 80018de:	2100      	movs	r1, #0
 80018e0:	4872      	ldr	r0, [pc, #456]	@ (8001aac <seclectmenu+0xc48>)
 80018e2:	f7fe feef 	bl	80006c4 <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "  DA CO THE 3 ");
 80018e6:	4978      	ldr	r1, [pc, #480]	@ (8001ac8 <seclectmenu+0xc64>)
 80018e8:	4870      	ldr	r0, [pc, #448]	@ (8001aac <seclectmenu+0xc48>)
 80018ea:	f7fe ff52 	bl	8000792 <CLCD_WriteString>
											HAL_Delay(1000);
 80018ee:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80018f2:	f002 f9d9 	bl	8003ca8 <HAL_Delay>
											CLCD_Clear(&LCD1);
 80018f6:	486d      	ldr	r0, [pc, #436]	@ (8001aac <seclectmenu+0xc48>)
 80018f8:	f7fe ff62 	bl	80007c0 <CLCD_Clear>
											CLCD_SetCursor(&LCD1, 0, 0);
 80018fc:	2200      	movs	r2, #0
 80018fe:	2100      	movs	r1, #0
 8001900:	486a      	ldr	r0, [pc, #424]	@ (8001aac <seclectmenu+0xc48>)
 8001902:	f7fe fedf 	bl	80006c4 <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "=>  THE 3 ");
 8001906:	4971      	ldr	r1, [pc, #452]	@ (8001acc <seclectmenu+0xc68>)
 8001908:	4868      	ldr	r0, [pc, #416]	@ (8001aac <seclectmenu+0xc48>)
 800190a:	f7fe ff42 	bl	8000792 <CLCD_WriteString>
											CLCD_SetCursor(&LCD1, 0, 1);
 800190e:	2201      	movs	r2, #1
 8001910:	2100      	movs	r1, #0
 8001912:	4866      	ldr	r0, [pc, #408]	@ (8001aac <seclectmenu+0xc48>)
 8001914:	f7fe fed6 	bl	80006c4 <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "    THE 4 ");
 8001918:	496d      	ldr	r1, [pc, #436]	@ (8001ad0 <seclectmenu+0xc6c>)
 800191a:	4864      	ldr	r0, [pc, #400]	@ (8001aac <seclectmenu+0xc48>)
 800191c:	f7fe ff39 	bl	8000792 <CLCD_WriteString>
											CLCD_SetCursor(&LCD1, 0, 0);
											CLCD_WriteString(&LCD1, "=>  THE 3 ");
											CLCD_SetCursor(&LCD1, 0, 1);
											CLCD_WriteString(&LCD1, "    THE 4 ");
										}
										break;
 8001920:	e063      	b.n	80019ea <seclectmenu+0xb86>
											adduid(keyadd2);
 8001922:	78fb      	ldrb	r3, [r7, #3]
 8001924:	4618      	mov	r0, r3
 8001926:	f001 fa25 	bl	8002d74 <adduid>
											CLCD_Clear(&LCD1);
 800192a:	4860      	ldr	r0, [pc, #384]	@ (8001aac <seclectmenu+0xc48>)
 800192c:	f7fe ff48 	bl	80007c0 <CLCD_Clear>
											CLCD_SetCursor(&LCD1, 0, 0);
 8001930:	2200      	movs	r2, #0
 8001932:	2100      	movs	r1, #0
 8001934:	485d      	ldr	r0, [pc, #372]	@ (8001aac <seclectmenu+0xc48>)
 8001936:	f7fe fec5 	bl	80006c4 <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "=>  THE 3 ");
 800193a:	4964      	ldr	r1, [pc, #400]	@ (8001acc <seclectmenu+0xc68>)
 800193c:	485b      	ldr	r0, [pc, #364]	@ (8001aac <seclectmenu+0xc48>)
 800193e:	f7fe ff28 	bl	8000792 <CLCD_WriteString>
											CLCD_SetCursor(&LCD1, 0, 1);
 8001942:	2201      	movs	r2, #1
 8001944:	2100      	movs	r1, #0
 8001946:	4859      	ldr	r0, [pc, #356]	@ (8001aac <seclectmenu+0xc48>)
 8001948:	f7fe febc 	bl	80006c4 <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "    THE 4 ");
 800194c:	4960      	ldr	r1, [pc, #384]	@ (8001ad0 <seclectmenu+0xc6c>)
 800194e:	4857      	ldr	r0, [pc, #348]	@ (8001aac <seclectmenu+0xc48>)
 8001950:	f7fe ff1f 	bl	8000792 <CLCD_WriteString>
										break;
 8001954:	e049      	b.n	80019ea <seclectmenu+0xb86>
									case 4:
										if (CheckKey(keyadd2) != 0)
 8001956:	78fb      	ldrb	r3, [r7, #3]
 8001958:	4618      	mov	r0, r3
 800195a:	f001 fbcf 	bl	80030fc <CheckKey>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d025      	beq.n	80019b0 <seclectmenu+0xb4c>
										{
											CLCD_Clear(&LCD1);
 8001964:	4851      	ldr	r0, [pc, #324]	@ (8001aac <seclectmenu+0xc48>)
 8001966:	f7fe ff2b 	bl	80007c0 <CLCD_Clear>
											CLCD_SetCursor(&LCD1, 0, 0);
 800196a:	2200      	movs	r2, #0
 800196c:	2100      	movs	r1, #0
 800196e:	484f      	ldr	r0, [pc, #316]	@ (8001aac <seclectmenu+0xc48>)
 8001970:	f7fe fea8 	bl	80006c4 <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "  DA CO THE 4 ");
 8001974:	4957      	ldr	r1, [pc, #348]	@ (8001ad4 <seclectmenu+0xc70>)
 8001976:	484d      	ldr	r0, [pc, #308]	@ (8001aac <seclectmenu+0xc48>)
 8001978:	f7fe ff0b 	bl	8000792 <CLCD_WriteString>
											HAL_Delay(1000);
 800197c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001980:	f002 f992 	bl	8003ca8 <HAL_Delay>
											CLCD_Clear(&LCD1);
 8001984:	4849      	ldr	r0, [pc, #292]	@ (8001aac <seclectmenu+0xc48>)
 8001986:	f7fe ff1b 	bl	80007c0 <CLCD_Clear>
											CLCD_SetCursor(&LCD1, 0, 0);
 800198a:	2200      	movs	r2, #0
 800198c:	2100      	movs	r1, #0
 800198e:	4847      	ldr	r0, [pc, #284]	@ (8001aac <seclectmenu+0xc48>)
 8001990:	f7fe fe98 	bl	80006c4 <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "=>  THE 4 ");
 8001994:	4950      	ldr	r1, [pc, #320]	@ (8001ad8 <seclectmenu+0xc74>)
 8001996:	4845      	ldr	r0, [pc, #276]	@ (8001aac <seclectmenu+0xc48>)
 8001998:	f7fe fefb 	bl	8000792 <CLCD_WriteString>
											CLCD_SetCursor(&LCD1, 0, 1);
 800199c:	2201      	movs	r2, #1
 800199e:	2100      	movs	r1, #0
 80019a0:	4842      	ldr	r0, [pc, #264]	@ (8001aac <seclectmenu+0xc48>)
 80019a2:	f7fe fe8f 	bl	80006c4 <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "    BACK ");
 80019a6:	494d      	ldr	r1, [pc, #308]	@ (8001adc <seclectmenu+0xc78>)
 80019a8:	4840      	ldr	r0, [pc, #256]	@ (8001aac <seclectmenu+0xc48>)
 80019aa:	f7fe fef2 	bl	8000792 <CLCD_WriteString>
											CLCD_SetCursor(&LCD1, 0, 0);
											CLCD_WriteString(&LCD1, "=>  THE 4 ");
											CLCD_SetCursor(&LCD1, 0, 1);
											CLCD_WriteString(&LCD1, "    BACK ");
										}
										break;
 80019ae:	e01c      	b.n	80019ea <seclectmenu+0xb86>
											adduid(keyadd2);
 80019b0:	78fb      	ldrb	r3, [r7, #3]
 80019b2:	4618      	mov	r0, r3
 80019b4:	f001 f9de 	bl	8002d74 <adduid>
											CLCD_Clear(&LCD1);
 80019b8:	483c      	ldr	r0, [pc, #240]	@ (8001aac <seclectmenu+0xc48>)
 80019ba:	f7fe ff01 	bl	80007c0 <CLCD_Clear>
											CLCD_SetCursor(&LCD1, 0, 0);
 80019be:	2200      	movs	r2, #0
 80019c0:	2100      	movs	r1, #0
 80019c2:	483a      	ldr	r0, [pc, #232]	@ (8001aac <seclectmenu+0xc48>)
 80019c4:	f7fe fe7e 	bl	80006c4 <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "=>  THE 4 ");
 80019c8:	4943      	ldr	r1, [pc, #268]	@ (8001ad8 <seclectmenu+0xc74>)
 80019ca:	4838      	ldr	r0, [pc, #224]	@ (8001aac <seclectmenu+0xc48>)
 80019cc:	f7fe fee1 	bl	8000792 <CLCD_WriteString>
											CLCD_SetCursor(&LCD1, 0, 1);
 80019d0:	2201      	movs	r2, #1
 80019d2:	2100      	movs	r1, #0
 80019d4:	4835      	ldr	r0, [pc, #212]	@ (8001aac <seclectmenu+0xc48>)
 80019d6:	f7fe fe75 	bl	80006c4 <CLCD_SetCursor>
											CLCD_WriteString(&LCD1, "    BACK ");
 80019da:	4940      	ldr	r1, [pc, #256]	@ (8001adc <seclectmenu+0xc78>)
 80019dc:	4833      	ldr	r0, [pc, #204]	@ (8001aac <seclectmenu+0xc48>)
 80019de:	f7fe fed8 	bl	8000792 <CLCD_WriteString>
										break;
 80019e2:	e002      	b.n	80019ea <seclectmenu+0xb86>
									default:
										back12 = 0;
 80019e4:	2300      	movs	r3, #0
 80019e6:	747b      	strb	r3, [r7, #17]
										break;
 80019e8:	bf00      	nop
							while (back12 == 1)
 80019ea:	7c7b      	ldrb	r3, [r7, #17]
 80019ec:	2b01      	cmp	r3, #1
 80019ee:	f43f adfb 	beq.w	80015e8 <seclectmenu+0x784>
									}
								}
							}
							CLCD_Clear(&LCD1);
 80019f2:	482e      	ldr	r0, [pc, #184]	@ (8001aac <seclectmenu+0xc48>)
 80019f4:	f7fe fee4 	bl	80007c0 <CLCD_Clear>
							CLCD_SetCursor(&LCD1, 0, 0);
 80019f8:	2200      	movs	r2, #0
 80019fa:	2100      	movs	r1, #0
 80019fc:	482b      	ldr	r0, [pc, #172]	@ (8001aac <seclectmenu+0xc48>)
 80019fe:	f7fe fe61 	bl	80006c4 <CLCD_SetCursor>
							CLCD_WriteString(&LCD1, "   THE NGUOI LON");
 8001a02:	4937      	ldr	r1, [pc, #220]	@ (8001ae0 <seclectmenu+0xc7c>)
 8001a04:	4829      	ldr	r0, [pc, #164]	@ (8001aac <seclectmenu+0xc48>)
 8001a06:	f7fe fec4 	bl	8000792 <CLCD_WriteString>
							CLCD_SetCursor(&LCD1, 0, 1);
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	2100      	movs	r1, #0
 8001a0e:	4827      	ldr	r0, [pc, #156]	@ (8001aac <seclectmenu+0xc48>)
 8001a10:	f7fe fe58 	bl	80006c4 <CLCD_SetCursor>
							CLCD_WriteString(&LCD1, "=> THE TRE EM");
 8001a14:	4933      	ldr	r1, [pc, #204]	@ (8001ae4 <seclectmenu+0xc80>)
 8001a16:	4825      	ldr	r0, [pc, #148]	@ (8001aac <seclectmenu+0xc48>)
 8001a18:	f7fe febb 	bl	8000792 <CLCD_WriteString>
							break;
 8001a1c:	e002      	b.n	8001a24 <seclectmenu+0xbc0>
						default:
							back = 0;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	757b      	strb	r3, [r7, #21]
							break;
 8001a22:	bf00      	nop
				while (back == 1)
 8001a24:	7d7b      	ldrb	r3, [r7, #21]
 8001a26:	2b01      	cmp	r3, #1
 8001a28:	f43f aae7 	beq.w	8000ffa <seclectmenu+0x196>
						}
					}
				}
				CLCD_Clear(&LCD1);
 8001a2c:	481f      	ldr	r0, [pc, #124]	@ (8001aac <seclectmenu+0xc48>)
 8001a2e:	f7fe fec7 	bl	80007c0 <CLCD_Clear>
				CLCD_SetCursor(&LCD1, 0, 0);
 8001a32:	2200      	movs	r2, #0
 8001a34:	2100      	movs	r1, #0
 8001a36:	481d      	ldr	r0, [pc, #116]	@ (8001aac <seclectmenu+0xc48>)
 8001a38:	f7fe fe44 	bl	80006c4 <CLCD_SetCursor>
				CLCD_WriteString(&LCD1, "=>  THEM THE");
 8001a3c:	492a      	ldr	r1, [pc, #168]	@ (8001ae8 <seclectmenu+0xc84>)
 8001a3e:	481b      	ldr	r0, [pc, #108]	@ (8001aac <seclectmenu+0xc48>)
 8001a40:	f7fe fea7 	bl	8000792 <CLCD_WriteString>
				CLCD_SetCursor(&LCD1, 0, 1);
 8001a44:	2201      	movs	r2, #1
 8001a46:	2100      	movs	r1, #0
 8001a48:	4818      	ldr	r0, [pc, #96]	@ (8001aac <seclectmenu+0xc48>)
 8001a4a:	f7fe fe3b 	bl	80006c4 <CLCD_SetCursor>
				CLCD_WriteString(&LCD1, "    XOA THE");
 8001a4e:	4927      	ldr	r1, [pc, #156]	@ (8001aec <seclectmenu+0xc88>)
 8001a50:	4816      	ldr	r0, [pc, #88]	@ (8001aac <seclectmenu+0xc48>)
 8001a52:	f7fe fe9e 	bl	8000792 <CLCD_WriteString>
				break;
 8001a56:	f001 b8d4 	b.w	8002c02 <seclectmenu+0x1d9e>
			case 1:
				CLCD_Clear(&LCD1);
 8001a5a:	4814      	ldr	r0, [pc, #80]	@ (8001aac <seclectmenu+0xc48>)
 8001a5c:	f7fe feb0 	bl	80007c0 <CLCD_Clear>
				CLCD_SetCursor(&LCD1, 0, 0);
 8001a60:	2200      	movs	r2, #0
 8001a62:	2100      	movs	r1, #0
 8001a64:	4811      	ldr	r0, [pc, #68]	@ (8001aac <seclectmenu+0xc48>)
 8001a66:	f7fe fe2d 	bl	80006c4 <CLCD_SetCursor>
				CLCD_WriteString(&LCD1, "     SELECT ");
 8001a6a:	4921      	ldr	r1, [pc, #132]	@ (8001af0 <seclectmenu+0xc8c>)
 8001a6c:	480f      	ldr	r0, [pc, #60]	@ (8001aac <seclectmenu+0xc48>)
 8001a6e:	f7fe fe90 	bl	8000792 <CLCD_WriteString>
				CLCD_SetCursor(&LCD1, 0, 1);
 8001a72:	2201      	movs	r2, #1
 8001a74:	2100      	movs	r1, #0
 8001a76:	480d      	ldr	r0, [pc, #52]	@ (8001aac <seclectmenu+0xc48>)
 8001a78:	f7fe fe24 	bl	80006c4 <CLCD_SetCursor>
				CLCD_WriteString(&LCD1, "   XOA 1 THE");
 8001a7c:	491d      	ldr	r1, [pc, #116]	@ (8001af4 <seclectmenu+0xc90>)
 8001a7e:	480b      	ldr	r0, [pc, #44]	@ (8001aac <seclectmenu+0xc48>)
 8001a80:	f7fe fe87 	bl	8000792 <CLCD_WriteString>
				uint8_t statusremove = -1;
 8001a84:	23ff      	movs	r3, #255	@ 0xff
 8001a86:	743b      	strb	r3, [r7, #16]
				uint8_t backrm = 1;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	73fb      	strb	r3, [r7, #15]
				while (backrm == 1)
 8001a8c:	f001 b883 	b.w	8002b96 <seclectmenu+0x1d32>
				{
					if (exitmenu == 0)
 8001a90:	4b19      	ldr	r3, [pc, #100]	@ (8001af8 <seclectmenu+0xc94>)
 8001a92:	781b      	ldrb	r3, [r3, #0]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d131      	bne.n	8001afc <seclectmenu+0xc98>
					{
						CLCD_Clear(&LCD1);
 8001a98:	4804      	ldr	r0, [pc, #16]	@ (8001aac <seclectmenu+0xc48>)
 8001a9a:	f7fe fe91 	bl	80007c0 <CLCD_Clear>
						HAL_Delay(1000);
 8001a9e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001aa2:	f002 f901 	bl	8003ca8 <HAL_Delay>
						return;
 8001aa6:	f001 b8b8 	b.w	8002c1a <seclectmenu+0x1db6>
 8001aaa:	bf00      	nop
 8001aac:	200000f4 	.word	0x200000f4
 8001ab0:	08005df8 	.word	0x08005df8
 8001ab4:	08005d8c 	.word	0x08005d8c
 8001ab8:	08005d98 	.word	0x08005d98
 8001abc:	08005e08 	.word	0x08005e08
 8001ac0:	08005da4 	.word	0x08005da4
 8001ac4:	08005db0 	.word	0x08005db0
 8001ac8:	08005e18 	.word	0x08005e18
 8001acc:	08005dbc 	.word	0x08005dbc
 8001ad0:	08005dc8 	.word	0x08005dc8
 8001ad4:	08005e28 	.word	0x08005e28
 8001ad8:	08005dd4 	.word	0x08005dd4
 8001adc:	08005de0 	.word	0x08005de0
 8001ae0:	08005d3c 	.word	0x08005d3c
 8001ae4:	08005d74 	.word	0x08005d74
 8001ae8:	08005ce4 	.word	0x08005ce4
 8001aec:	08005cf4 	.word	0x08005cf4
 8001af0:	08005e38 	.word	0x08005e38
 8001af4:	08005e48 	.word	0x08005e48
 8001af8:	20000000 	.word	0x20000000
					}
					if (checkbuton(SELECCT_GPIO_Port, SELECCT_Pin) != 0)
 8001afc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001b00:	48ae      	ldr	r0, [pc, #696]	@ (8001dbc <seclectmenu+0xf58>)
 8001b02:	f7ff f961 	bl	8000dc8 <checkbuton>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d054      	beq.n	8001bb6 <seclectmenu+0xd52>
					{
						exitmenu = 15;
 8001b0c:	4bac      	ldr	r3, [pc, #688]	@ (8001dc0 <seclectmenu+0xf5c>)
 8001b0e:	220f      	movs	r2, #15
 8001b10:	701a      	strb	r2, [r3, #0]
						statusremove++;
 8001b12:	7c3b      	ldrb	r3, [r7, #16]
 8001b14:	3301      	adds	r3, #1
 8001b16:	743b      	strb	r3, [r7, #16]
						statusremove = (statusremove > 2) ? 0 : statusremove;
 8001b18:	7c3b      	ldrb	r3, [r7, #16]
 8001b1a:	2b02      	cmp	r3, #2
 8001b1c:	d801      	bhi.n	8001b22 <seclectmenu+0xcbe>
 8001b1e:	7c3b      	ldrb	r3, [r7, #16]
 8001b20:	e000      	b.n	8001b24 <seclectmenu+0xcc0>
 8001b22:	2300      	movs	r3, #0
 8001b24:	743b      	strb	r3, [r7, #16]
						switch (statusremove)
 8001b26:	7c3b      	ldrb	r3, [r7, #16]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d002      	beq.n	8001b32 <seclectmenu+0xcce>
 8001b2c:	2b01      	cmp	r3, #1
 8001b2e:	d016      	beq.n	8001b5e <seclectmenu+0xcfa>
 8001b30:	e02b      	b.n	8001b8a <seclectmenu+0xd26>
						{
						case 0:
							CLCD_Clear(&LCD1);
 8001b32:	48a4      	ldr	r0, [pc, #656]	@ (8001dc4 <seclectmenu+0xf60>)
 8001b34:	f7fe fe44 	bl	80007c0 <CLCD_Clear>
							CLCD_SetCursor(&LCD1, 0, 0);
 8001b38:	2200      	movs	r2, #0
 8001b3a:	2100      	movs	r1, #0
 8001b3c:	48a1      	ldr	r0, [pc, #644]	@ (8001dc4 <seclectmenu+0xf60>)
 8001b3e:	f7fe fdc1 	bl	80006c4 <CLCD_SetCursor>
							CLCD_WriteString(&LCD1, "=> XOA 1 THE");
 8001b42:	49a1      	ldr	r1, [pc, #644]	@ (8001dc8 <seclectmenu+0xf64>)
 8001b44:	489f      	ldr	r0, [pc, #636]	@ (8001dc4 <seclectmenu+0xf60>)
 8001b46:	f7fe fe24 	bl	8000792 <CLCD_WriteString>
							CLCD_SetCursor(&LCD1, 0, 1);
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	2100      	movs	r1, #0
 8001b4e:	489d      	ldr	r0, [pc, #628]	@ (8001dc4 <seclectmenu+0xf60>)
 8001b50:	f7fe fdb8 	bl	80006c4 <CLCD_SetCursor>
							CLCD_WriteString(&LCD1, "   XOA TAT CA");
 8001b54:	499d      	ldr	r1, [pc, #628]	@ (8001dcc <seclectmenu+0xf68>)
 8001b56:	489b      	ldr	r0, [pc, #620]	@ (8001dc4 <seclectmenu+0xf60>)
 8001b58:	f7fe fe1b 	bl	8000792 <CLCD_WriteString>
							break;
 8001b5c:	e02b      	b.n	8001bb6 <seclectmenu+0xd52>
						case 1:
							CLCD_Clear(&LCD1);
 8001b5e:	4899      	ldr	r0, [pc, #612]	@ (8001dc4 <seclectmenu+0xf60>)
 8001b60:	f7fe fe2e 	bl	80007c0 <CLCD_Clear>
							CLCD_SetCursor(&LCD1, 0, 0);
 8001b64:	2200      	movs	r2, #0
 8001b66:	2100      	movs	r1, #0
 8001b68:	4896      	ldr	r0, [pc, #600]	@ (8001dc4 <seclectmenu+0xf60>)
 8001b6a:	f7fe fdab 	bl	80006c4 <CLCD_SetCursor>
							CLCD_WriteString(&LCD1, "   XOA 1 THE");
 8001b6e:	4998      	ldr	r1, [pc, #608]	@ (8001dd0 <seclectmenu+0xf6c>)
 8001b70:	4894      	ldr	r0, [pc, #592]	@ (8001dc4 <seclectmenu+0xf60>)
 8001b72:	f7fe fe0e 	bl	8000792 <CLCD_WriteString>
							CLCD_SetCursor(&LCD1, 0, 1);
 8001b76:	2201      	movs	r2, #1
 8001b78:	2100      	movs	r1, #0
 8001b7a:	4892      	ldr	r0, [pc, #584]	@ (8001dc4 <seclectmenu+0xf60>)
 8001b7c:	f7fe fda2 	bl	80006c4 <CLCD_SetCursor>
							CLCD_WriteString(&LCD1, "=> XOA TAT CA");
 8001b80:	4994      	ldr	r1, [pc, #592]	@ (8001dd4 <seclectmenu+0xf70>)
 8001b82:	4890      	ldr	r0, [pc, #576]	@ (8001dc4 <seclectmenu+0xf60>)
 8001b84:	f7fe fe05 	bl	8000792 <CLCD_WriteString>
							break;
 8001b88:	e015      	b.n	8001bb6 <seclectmenu+0xd52>
						default:
							CLCD_Clear(&LCD1);
 8001b8a:	488e      	ldr	r0, [pc, #568]	@ (8001dc4 <seclectmenu+0xf60>)
 8001b8c:	f7fe fe18 	bl	80007c0 <CLCD_Clear>
							CLCD_SetCursor(&LCD1, 0, 0);
 8001b90:	2200      	movs	r2, #0
 8001b92:	2100      	movs	r1, #0
 8001b94:	488b      	ldr	r0, [pc, #556]	@ (8001dc4 <seclectmenu+0xf60>)
 8001b96:	f7fe fd95 	bl	80006c4 <CLCD_SetCursor>
							CLCD_WriteString(&LCD1, "   XOA TAT CA");
 8001b9a:	498c      	ldr	r1, [pc, #560]	@ (8001dcc <seclectmenu+0xf68>)
 8001b9c:	4889      	ldr	r0, [pc, #548]	@ (8001dc4 <seclectmenu+0xf60>)
 8001b9e:	f7fe fdf8 	bl	8000792 <CLCD_WriteString>
							CLCD_SetCursor(&LCD1, 0, 1);
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	2100      	movs	r1, #0
 8001ba6:	4887      	ldr	r0, [pc, #540]	@ (8001dc4 <seclectmenu+0xf60>)
 8001ba8:	f7fe fd8c 	bl	80006c4 <CLCD_SetCursor>
							CLCD_WriteString(&LCD1, "=> BACK");
 8001bac:	498a      	ldr	r1, [pc, #552]	@ (8001dd8 <seclectmenu+0xf74>)
 8001bae:	4885      	ldr	r0, [pc, #532]	@ (8001dc4 <seclectmenu+0xf60>)
 8001bb0:	f7fe fdef 	bl	8000792 <CLCD_WriteString>
							break;
 8001bb4:	bf00      	nop
						}
					}
					if (checkbuton(MENU_GPIO_Port, MENU_Pin) != 0)
 8001bb6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001bba:	4888      	ldr	r0, [pc, #544]	@ (8001ddc <seclectmenu+0xf78>)
 8001bbc:	f7ff f904 	bl	8000dc8 <checkbuton>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	f000 87e7 	beq.w	8002b96 <seclectmenu+0x1d32>
					{
						exitmenu = 15;
 8001bc8:	4b7d      	ldr	r3, [pc, #500]	@ (8001dc0 <seclectmenu+0xf5c>)
 8001bca:	220f      	movs	r2, #15
 8001bcc:	701a      	strb	r2, [r3, #0]
						switch (statusremove)
 8001bce:	7c3b      	ldrb	r3, [r7, #16]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d004      	beq.n	8001bde <seclectmenu+0xd7a>
 8001bd4:	2b01      	cmp	r3, #1
 8001bd6:	f000 87d3 	beq.w	8002b80 <seclectmenu+0x1d1c>
 8001bda:	f000 bfd9 	b.w	8002b90 <seclectmenu+0x1d2c>
						{
						case 0:
							CLCD_Clear(&LCD1);
 8001bde:	4879      	ldr	r0, [pc, #484]	@ (8001dc4 <seclectmenu+0xf60>)
 8001be0:	f7fe fdee 	bl	80007c0 <CLCD_Clear>
							CLCD_SetCursor(&LCD1, 0, 0);
 8001be4:	2200      	movs	r2, #0
 8001be6:	2100      	movs	r1, #0
 8001be8:	4876      	ldr	r0, [pc, #472]	@ (8001dc4 <seclectmenu+0xf60>)
 8001bea:	f7fe fd6b 	bl	80006c4 <CLCD_SetCursor>
							CLCD_WriteString(&LCD1, "=> CHON THE");
 8001bee:	497c      	ldr	r1, [pc, #496]	@ (8001de0 <seclectmenu+0xf7c>)
 8001bf0:	4874      	ldr	r0, [pc, #464]	@ (8001dc4 <seclectmenu+0xf60>)
 8001bf2:	f7fe fdce 	bl	8000792 <CLCD_WriteString>
							CLCD_SetCursor(&LCD1, 0, 1);
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	2100      	movs	r1, #0
 8001bfa:	4872      	ldr	r0, [pc, #456]	@ (8001dc4 <seclectmenu+0xf60>)
 8001bfc:	f7fe fd62 	bl	80006c4 <CLCD_SetCursor>
							CLCD_WriteString(&LCD1, "   QUET THE");
 8001c00:	4978      	ldr	r1, [pc, #480]	@ (8001de4 <seclectmenu+0xf80>)
 8001c02:	4870      	ldr	r0, [pc, #448]	@ (8001dc4 <seclectmenu+0xf60>)
 8001c04:	f7fe fdc5 	bl	8000792 <CLCD_WriteString>
							uint8_t statusrm1 = 0;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	73bb      	strb	r3, [r7, #14]
							uint8_t backrm1 = 1;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	737b      	strb	r3, [r7, #13]
							while (backrm1 == 1)
 8001c10:	f000 bf9c 	b.w	8002b4c <seclectmenu+0x1ce8>
							{
								if (exitmenu == 0)
 8001c14:	4b6a      	ldr	r3, [pc, #424]	@ (8001dc0 <seclectmenu+0xf5c>)
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d108      	bne.n	8001c2e <seclectmenu+0xdca>
								{
									CLCD_Clear(&LCD1);
 8001c1c:	4869      	ldr	r0, [pc, #420]	@ (8001dc4 <seclectmenu+0xf60>)
 8001c1e:	f7fe fdcf 	bl	80007c0 <CLCD_Clear>
									HAL_Delay(1000);
 8001c22:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001c26:	f002 f83f 	bl	8003ca8 <HAL_Delay>
									return;
 8001c2a:	f000 bff6 	b.w	8002c1a <seclectmenu+0x1db6>
								}
								if (checkbuton(SELECCT_GPIO_Port, SELECCT_Pin) != 0)
 8001c2e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001c32:	4862      	ldr	r0, [pc, #392]	@ (8001dbc <seclectmenu+0xf58>)
 8001c34:	f7ff f8c8 	bl	8000dc8 <checkbuton>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d051      	beq.n	8001ce2 <seclectmenu+0xe7e>
								{
									statusrm1++;
 8001c3e:	7bbb      	ldrb	r3, [r7, #14]
 8001c40:	3301      	adds	r3, #1
 8001c42:	73bb      	strb	r3, [r7, #14]
									statusrm1 = (statusrm1 > 2) ? 0 : statusrm1;
 8001c44:	7bbb      	ldrb	r3, [r7, #14]
 8001c46:	2b02      	cmp	r3, #2
 8001c48:	d801      	bhi.n	8001c4e <seclectmenu+0xdea>
 8001c4a:	7bbb      	ldrb	r3, [r7, #14]
 8001c4c:	e000      	b.n	8001c50 <seclectmenu+0xdec>
 8001c4e:	2300      	movs	r3, #0
 8001c50:	73bb      	strb	r3, [r7, #14]
									switch (statusrm1)
 8001c52:	7bbb      	ldrb	r3, [r7, #14]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d002      	beq.n	8001c5e <seclectmenu+0xdfa>
 8001c58:	2b01      	cmp	r3, #1
 8001c5a:	d016      	beq.n	8001c8a <seclectmenu+0xe26>
 8001c5c:	e02b      	b.n	8001cb6 <seclectmenu+0xe52>
									{
									case 0:
										CLCD_Clear(&LCD1);
 8001c5e:	4859      	ldr	r0, [pc, #356]	@ (8001dc4 <seclectmenu+0xf60>)
 8001c60:	f7fe fdae 	bl	80007c0 <CLCD_Clear>
										CLCD_SetCursor(&LCD1, 0, 0);
 8001c64:	2200      	movs	r2, #0
 8001c66:	2100      	movs	r1, #0
 8001c68:	4856      	ldr	r0, [pc, #344]	@ (8001dc4 <seclectmenu+0xf60>)
 8001c6a:	f7fe fd2b 	bl	80006c4 <CLCD_SetCursor>
										CLCD_WriteString(&LCD1, "=> CHON THE");
 8001c6e:	495c      	ldr	r1, [pc, #368]	@ (8001de0 <seclectmenu+0xf7c>)
 8001c70:	4854      	ldr	r0, [pc, #336]	@ (8001dc4 <seclectmenu+0xf60>)
 8001c72:	f7fe fd8e 	bl	8000792 <CLCD_WriteString>
										CLCD_SetCursor(&LCD1, 0, 1);
 8001c76:	2201      	movs	r2, #1
 8001c78:	2100      	movs	r1, #0
 8001c7a:	4852      	ldr	r0, [pc, #328]	@ (8001dc4 <seclectmenu+0xf60>)
 8001c7c:	f7fe fd22 	bl	80006c4 <CLCD_SetCursor>
										CLCD_WriteString(&LCD1, "   QUET THE");
 8001c80:	4958      	ldr	r1, [pc, #352]	@ (8001de4 <seclectmenu+0xf80>)
 8001c82:	4850      	ldr	r0, [pc, #320]	@ (8001dc4 <seclectmenu+0xf60>)
 8001c84:	f7fe fd85 	bl	8000792 <CLCD_WriteString>
										break;
 8001c88:	e02b      	b.n	8001ce2 <seclectmenu+0xe7e>
									case 1:
										CLCD_Clear(&LCD1);
 8001c8a:	484e      	ldr	r0, [pc, #312]	@ (8001dc4 <seclectmenu+0xf60>)
 8001c8c:	f7fe fd98 	bl	80007c0 <CLCD_Clear>
										CLCD_SetCursor(&LCD1, 0, 0);
 8001c90:	2200      	movs	r2, #0
 8001c92:	2100      	movs	r1, #0
 8001c94:	484b      	ldr	r0, [pc, #300]	@ (8001dc4 <seclectmenu+0xf60>)
 8001c96:	f7fe fd15 	bl	80006c4 <CLCD_SetCursor>
										CLCD_WriteString(&LCD1, "   CHON THE");
 8001c9a:	4953      	ldr	r1, [pc, #332]	@ (8001de8 <seclectmenu+0xf84>)
 8001c9c:	4849      	ldr	r0, [pc, #292]	@ (8001dc4 <seclectmenu+0xf60>)
 8001c9e:	f7fe fd78 	bl	8000792 <CLCD_WriteString>
										CLCD_SetCursor(&LCD1, 0, 1);
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	2100      	movs	r1, #0
 8001ca6:	4847      	ldr	r0, [pc, #284]	@ (8001dc4 <seclectmenu+0xf60>)
 8001ca8:	f7fe fd0c 	bl	80006c4 <CLCD_SetCursor>
										CLCD_WriteString(&LCD1, "=> QUET THE");
 8001cac:	494f      	ldr	r1, [pc, #316]	@ (8001dec <seclectmenu+0xf88>)
 8001cae:	4845      	ldr	r0, [pc, #276]	@ (8001dc4 <seclectmenu+0xf60>)
 8001cb0:	f7fe fd6f 	bl	8000792 <CLCD_WriteString>
										;
										break;
 8001cb4:	e015      	b.n	8001ce2 <seclectmenu+0xe7e>
									default:
										CLCD_Clear(&LCD1);
 8001cb6:	4843      	ldr	r0, [pc, #268]	@ (8001dc4 <seclectmenu+0xf60>)
 8001cb8:	f7fe fd82 	bl	80007c0 <CLCD_Clear>
										CLCD_SetCursor(&LCD1, 0, 0);
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	2100      	movs	r1, #0
 8001cc0:	4840      	ldr	r0, [pc, #256]	@ (8001dc4 <seclectmenu+0xf60>)
 8001cc2:	f7fe fcff 	bl	80006c4 <CLCD_SetCursor>
										CLCD_WriteString(&LCD1, "   QUET THE");
 8001cc6:	4947      	ldr	r1, [pc, #284]	@ (8001de4 <seclectmenu+0xf80>)
 8001cc8:	483e      	ldr	r0, [pc, #248]	@ (8001dc4 <seclectmenu+0xf60>)
 8001cca:	f7fe fd62 	bl	8000792 <CLCD_WriteString>
										CLCD_SetCursor(&LCD1, 0, 1);
 8001cce:	2201      	movs	r2, #1
 8001cd0:	2100      	movs	r1, #0
 8001cd2:	483c      	ldr	r0, [pc, #240]	@ (8001dc4 <seclectmenu+0xf60>)
 8001cd4:	f7fe fcf6 	bl	80006c4 <CLCD_SetCursor>
										CLCD_WriteString(&LCD1, "=> BACK");
 8001cd8:	493f      	ldr	r1, [pc, #252]	@ (8001dd8 <seclectmenu+0xf74>)
 8001cda:	483a      	ldr	r0, [pc, #232]	@ (8001dc4 <seclectmenu+0xf60>)
 8001cdc:	f7fe fd59 	bl	8000792 <CLCD_WriteString>
										break;
 8001ce0:	bf00      	nop
									}
								}
								if (checkbuton(MENU_GPIO_Port, MENU_Pin) != 0)
 8001ce2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001ce6:	483d      	ldr	r0, [pc, #244]	@ (8001ddc <seclectmenu+0xf78>)
 8001ce8:	f7ff f86e 	bl	8000dc8 <checkbuton>
 8001cec:	4603      	mov	r3, r0
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	f000 872c 	beq.w	8002b4c <seclectmenu+0x1ce8>
								{
									exitmenu = 15;
 8001cf4:	4b32      	ldr	r3, [pc, #200]	@ (8001dc0 <seclectmenu+0xf5c>)
 8001cf6:	220f      	movs	r2, #15
 8001cf8:	701a      	strb	r2, [r3, #0]
									switch (statusrm1)
 8001cfa:	7bbb      	ldrb	r3, [r7, #14]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d004      	beq.n	8001d0a <seclectmenu+0xea6>
 8001d00:	2b01      	cmp	r3, #1
 8001d02:	f000 8633 	beq.w	800296c <seclectmenu+0x1b08>
 8001d06:	f000 bf1e 	b.w	8002b46 <seclectmenu+0x1ce2>
									{
									case 0:
										CLCD_Clear(&LCD1);
 8001d0a:	482e      	ldr	r0, [pc, #184]	@ (8001dc4 <seclectmenu+0xf60>)
 8001d0c:	f7fe fd58 	bl	80007c0 <CLCD_Clear>
										CLCD_SetCursor(&LCD1, 0, 0);
 8001d10:	2200      	movs	r2, #0
 8001d12:	2100      	movs	r1, #0
 8001d14:	482b      	ldr	r0, [pc, #172]	@ (8001dc4 <seclectmenu+0xf60>)
 8001d16:	f7fe fcd5 	bl	80006c4 <CLCD_SetCursor>
										CLCD_WriteString(&LCD1, "=> THE NGUOI LON");
 8001d1a:	4935      	ldr	r1, [pc, #212]	@ (8001df0 <seclectmenu+0xf8c>)
 8001d1c:	4829      	ldr	r0, [pc, #164]	@ (8001dc4 <seclectmenu+0xf60>)
 8001d1e:	f7fe fd38 	bl	8000792 <CLCD_WriteString>
										CLCD_SetCursor(&LCD1, 0, 1);
 8001d22:	2201      	movs	r2, #1
 8001d24:	2100      	movs	r1, #0
 8001d26:	4827      	ldr	r0, [pc, #156]	@ (8001dc4 <seclectmenu+0xf60>)
 8001d28:	f7fe fccc 	bl	80006c4 <CLCD_SetCursor>
										CLCD_WriteString(&LCD1, "   THE TRE EM");
 8001d2c:	4931      	ldr	r1, [pc, #196]	@ (8001df4 <seclectmenu+0xf90>)
 8001d2e:	4825      	ldr	r0, [pc, #148]	@ (8001dc4 <seclectmenu+0xf60>)
 8001d30:	f7fe fd2f 	bl	8000792 <CLCD_WriteString>
										uint8_t statusadd = 1;
 8001d34:	2301      	movs	r3, #1
 8001d36:	733b      	strb	r3, [r7, #12]
										uint8_t backrm10 = 1;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	72fb      	strb	r3, [r7, #11]
										while (backrm10 == 1)
 8001d3c:	f000 bdfc 	b.w	8002938 <seclectmenu+0x1ad4>
										{
											if (exitmenu == 0)
 8001d40:	4b1f      	ldr	r3, [pc, #124]	@ (8001dc0 <seclectmenu+0xf5c>)
 8001d42:	781b      	ldrb	r3, [r3, #0]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d108      	bne.n	8001d5a <seclectmenu+0xef6>
											{
												CLCD_Clear(&LCD1);
 8001d48:	481e      	ldr	r0, [pc, #120]	@ (8001dc4 <seclectmenu+0xf60>)
 8001d4a:	f7fe fd39 	bl	80007c0 <CLCD_Clear>
												HAL_Delay(1000);
 8001d4e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001d52:	f001 ffa9 	bl	8003ca8 <HAL_Delay>
												return;
 8001d56:	f000 bf60 	b.w	8002c1a <seclectmenu+0x1db6>
											}
											if (checkbuton(SELECCT_GPIO_Port, SELECCT_Pin) != 0)
 8001d5a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001d5e:	4817      	ldr	r0, [pc, #92]	@ (8001dbc <seclectmenu+0xf58>)
 8001d60:	f7ff f832 	bl	8000dc8 <checkbuton>
 8001d64:	4603      	mov	r3, r0
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d072      	beq.n	8001e50 <seclectmenu+0xfec>
											{
												exitmenu = 15;
 8001d6a:	4b15      	ldr	r3, [pc, #84]	@ (8001dc0 <seclectmenu+0xf5c>)
 8001d6c:	220f      	movs	r2, #15
 8001d6e:	701a      	strb	r2, [r3, #0]
												statusadd++;
 8001d70:	7b3b      	ldrb	r3, [r7, #12]
 8001d72:	3301      	adds	r3, #1
 8001d74:	733b      	strb	r3, [r7, #12]
												statusadd = (statusadd > 2) ? 0 : statusadd;
 8001d76:	7b3b      	ldrb	r3, [r7, #12]
 8001d78:	2b02      	cmp	r3, #2
 8001d7a:	d801      	bhi.n	8001d80 <seclectmenu+0xf1c>
 8001d7c:	7b3b      	ldrb	r3, [r7, #12]
 8001d7e:	e000      	b.n	8001d82 <seclectmenu+0xf1e>
 8001d80:	2300      	movs	r3, #0
 8001d82:	733b      	strb	r3, [r7, #12]
												switch (statusadd)
 8001d84:	7b3b      	ldrb	r3, [r7, #12]
 8001d86:	2b01      	cmp	r3, #1
 8001d88:	d002      	beq.n	8001d90 <seclectmenu+0xf2c>
 8001d8a:	2b02      	cmp	r3, #2
 8001d8c:	d034      	beq.n	8001df8 <seclectmenu+0xf94>
 8001d8e:	e049      	b.n	8001e24 <seclectmenu+0xfc0>
												{
												case 1:
													CLCD_Clear(&LCD1);
 8001d90:	480c      	ldr	r0, [pc, #48]	@ (8001dc4 <seclectmenu+0xf60>)
 8001d92:	f7fe fd15 	bl	80007c0 <CLCD_Clear>
													CLCD_SetCursor(&LCD1, 0, 0);
 8001d96:	2200      	movs	r2, #0
 8001d98:	2100      	movs	r1, #0
 8001d9a:	480a      	ldr	r0, [pc, #40]	@ (8001dc4 <seclectmenu+0xf60>)
 8001d9c:	f7fe fc92 	bl	80006c4 <CLCD_SetCursor>
													CLCD_WriteString(&LCD1, "=> THE NGUOI LON");
 8001da0:	4913      	ldr	r1, [pc, #76]	@ (8001df0 <seclectmenu+0xf8c>)
 8001da2:	4808      	ldr	r0, [pc, #32]	@ (8001dc4 <seclectmenu+0xf60>)
 8001da4:	f7fe fcf5 	bl	8000792 <CLCD_WriteString>
													CLCD_SetCursor(&LCD1, 0, 1);
 8001da8:	2201      	movs	r2, #1
 8001daa:	2100      	movs	r1, #0
 8001dac:	4805      	ldr	r0, [pc, #20]	@ (8001dc4 <seclectmenu+0xf60>)
 8001dae:	f7fe fc89 	bl	80006c4 <CLCD_SetCursor>
													CLCD_WriteString(&LCD1, "   THE TRE EM");
 8001db2:	4910      	ldr	r1, [pc, #64]	@ (8001df4 <seclectmenu+0xf90>)
 8001db4:	4803      	ldr	r0, [pc, #12]	@ (8001dc4 <seclectmenu+0xf60>)
 8001db6:	f7fe fcec 	bl	8000792 <CLCD_WriteString>
													break;
 8001dba:	e049      	b.n	8001e50 <seclectmenu+0xfec>
 8001dbc:	40010c00 	.word	0x40010c00
 8001dc0:	20000000 	.word	0x20000000
 8001dc4:	200000f4 	.word	0x200000f4
 8001dc8:	08005e58 	.word	0x08005e58
 8001dcc:	08005e68 	.word	0x08005e68
 8001dd0:	08005e48 	.word	0x08005e48
 8001dd4:	08005e78 	.word	0x08005e78
 8001dd8:	08005d84 	.word	0x08005d84
 8001ddc:	40010800 	.word	0x40010800
 8001de0:	08005e88 	.word	0x08005e88
 8001de4:	08005e94 	.word	0x08005e94
 8001de8:	08005ea0 	.word	0x08005ea0
 8001dec:	08005eac 	.word	0x08005eac
 8001df0:	08005d50 	.word	0x08005d50
 8001df4:	08005d64 	.word	0x08005d64
												case 2:
													CLCD_Clear(&LCD1);
 8001df8:	48b5      	ldr	r0, [pc, #724]	@ (80020d0 <seclectmenu+0x126c>)
 8001dfa:	f7fe fce1 	bl	80007c0 <CLCD_Clear>
													CLCD_SetCursor(&LCD1, 0, 0);
 8001dfe:	2200      	movs	r2, #0
 8001e00:	2100      	movs	r1, #0
 8001e02:	48b3      	ldr	r0, [pc, #716]	@ (80020d0 <seclectmenu+0x126c>)
 8001e04:	f7fe fc5e 	bl	80006c4 <CLCD_SetCursor>
													CLCD_WriteString(&LCD1, "   THE NGUOI LON");
 8001e08:	49b2      	ldr	r1, [pc, #712]	@ (80020d4 <seclectmenu+0x1270>)
 8001e0a:	48b1      	ldr	r0, [pc, #708]	@ (80020d0 <seclectmenu+0x126c>)
 8001e0c:	f7fe fcc1 	bl	8000792 <CLCD_WriteString>
													CLCD_SetCursor(&LCD1, 0, 1);
 8001e10:	2201      	movs	r2, #1
 8001e12:	2100      	movs	r1, #0
 8001e14:	48ae      	ldr	r0, [pc, #696]	@ (80020d0 <seclectmenu+0x126c>)
 8001e16:	f7fe fc55 	bl	80006c4 <CLCD_SetCursor>
													CLCD_WriteString(&LCD1, "=> THE TRE EM");
 8001e1a:	49af      	ldr	r1, [pc, #700]	@ (80020d8 <seclectmenu+0x1274>)
 8001e1c:	48ac      	ldr	r0, [pc, #688]	@ (80020d0 <seclectmenu+0x126c>)
 8001e1e:	f7fe fcb8 	bl	8000792 <CLCD_WriteString>
													break;
 8001e22:	e015      	b.n	8001e50 <seclectmenu+0xfec>
												default:
													CLCD_Clear(&LCD1);
 8001e24:	48aa      	ldr	r0, [pc, #680]	@ (80020d0 <seclectmenu+0x126c>)
 8001e26:	f7fe fccb 	bl	80007c0 <CLCD_Clear>
													CLCD_SetCursor(&LCD1, 0, 0);
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	2100      	movs	r1, #0
 8001e2e:	48a8      	ldr	r0, [pc, #672]	@ (80020d0 <seclectmenu+0x126c>)
 8001e30:	f7fe fc48 	bl	80006c4 <CLCD_SetCursor>
													CLCD_WriteString(&LCD1, "   THE TRE EM");
 8001e34:	49a9      	ldr	r1, [pc, #676]	@ (80020dc <seclectmenu+0x1278>)
 8001e36:	48a6      	ldr	r0, [pc, #664]	@ (80020d0 <seclectmenu+0x126c>)
 8001e38:	f7fe fcab 	bl	8000792 <CLCD_WriteString>
													CLCD_SetCursor(&LCD1, 0, 1);
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	2100      	movs	r1, #0
 8001e40:	48a3      	ldr	r0, [pc, #652]	@ (80020d0 <seclectmenu+0x126c>)
 8001e42:	f7fe fc3f 	bl	80006c4 <CLCD_SetCursor>
													CLCD_WriteString(&LCD1, "=> BACK");
 8001e46:	49a6      	ldr	r1, [pc, #664]	@ (80020e0 <seclectmenu+0x127c>)
 8001e48:	48a1      	ldr	r0, [pc, #644]	@ (80020d0 <seclectmenu+0x126c>)
 8001e4a:	f7fe fca2 	bl	8000792 <CLCD_WriteString>
													break;
 8001e4e:	bf00      	nop
												}
											}
											if (checkbuton(MENU_GPIO_Port, MENU_Pin) != 0)
 8001e50:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001e54:	48a3      	ldr	r0, [pc, #652]	@ (80020e4 <seclectmenu+0x1280>)
 8001e56:	f7fe ffb7 	bl	8000dc8 <checkbuton>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	f000 856b 	beq.w	8002938 <seclectmenu+0x1ad4>
											{
												exitmenu = 15;
 8001e62:	4ba1      	ldr	r3, [pc, #644]	@ (80020e8 <seclectmenu+0x1284>)
 8001e64:	220f      	movs	r2, #15
 8001e66:	701a      	strb	r2, [r3, #0]
												switch (statusadd)
 8001e68:	7b3b      	ldrb	r3, [r7, #12]
 8001e6a:	2b01      	cmp	r3, #1
 8001e6c:	d004      	beq.n	8001e78 <seclectmenu+0x1014>
 8001e6e:	2b02      	cmp	r3, #2
 8001e70:	f000 82b9 	beq.w	80023e6 <seclectmenu+0x1582>
 8001e74:	f000 bd5d 	b.w	8002932 <seclectmenu+0x1ace>
												{
												case 1:
													CLCD_Clear(&LCD1);
 8001e78:	4895      	ldr	r0, [pc, #596]	@ (80020d0 <seclectmenu+0x126c>)
 8001e7a:	f7fe fca1 	bl	80007c0 <CLCD_Clear>
													CLCD_SetCursor(&LCD1, 0, 0);
 8001e7e:	2200      	movs	r2, #0
 8001e80:	2100      	movs	r1, #0
 8001e82:	4893      	ldr	r0, [pc, #588]	@ (80020d0 <seclectmenu+0x126c>)
 8001e84:	f7fe fc1e 	bl	80006c4 <CLCD_SetCursor>
													CLCD_WriteString(&LCD1, "=>  THE 1 ");
 8001e88:	4998      	ldr	r1, [pc, #608]	@ (80020ec <seclectmenu+0x1288>)
 8001e8a:	4891      	ldr	r0, [pc, #580]	@ (80020d0 <seclectmenu+0x126c>)
 8001e8c:	f7fe fc81 	bl	8000792 <CLCD_WriteString>
													CLCD_SetCursor(&LCD1, 0, 1);
 8001e90:	2201      	movs	r2, #1
 8001e92:	2100      	movs	r1, #0
 8001e94:	488e      	ldr	r0, [pc, #568]	@ (80020d0 <seclectmenu+0x126c>)
 8001e96:	f7fe fc15 	bl	80006c4 <CLCD_SetCursor>
													CLCD_WriteString(&LCD1, "    THE 2 ");
 8001e9a:	4995      	ldr	r1, [pc, #596]	@ (80020f0 <seclectmenu+0x128c>)
 8001e9c:	488c      	ldr	r0, [pc, #560]	@ (80020d0 <seclectmenu+0x126c>)
 8001e9e:	f7fe fc78 	bl	8000792 <CLCD_WriteString>
													uint8_t statusadd1 = 1;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	72bb      	strb	r3, [r7, #10]
													uint8_t back11 = 1;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	727b      	strb	r3, [r7, #9]
													while (back11 == 1)
 8001eaa:	e282      	b.n	80023b2 <seclectmenu+0x154e>
													{
														if (exitmenu == 0)
 8001eac:	4b8e      	ldr	r3, [pc, #568]	@ (80020e8 <seclectmenu+0x1284>)
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d108      	bne.n	8001ec6 <seclectmenu+0x1062>
														{
															CLCD_Clear(&LCD1);
 8001eb4:	4886      	ldr	r0, [pc, #536]	@ (80020d0 <seclectmenu+0x126c>)
 8001eb6:	f7fe fc83 	bl	80007c0 <CLCD_Clear>
															HAL_Delay(1000);
 8001eba:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001ebe:	f001 fef3 	bl	8003ca8 <HAL_Delay>
															return;
 8001ec2:	f000 beaa 	b.w	8002c1a <seclectmenu+0x1db6>
														}
														if (checkbuton(SELECCT_GPIO_Port, SELECCT_Pin) != 0)
 8001ec6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001eca:	488a      	ldr	r0, [pc, #552]	@ (80020f4 <seclectmenu+0x1290>)
 8001ecc:	f7fe ff7c 	bl	8000dc8 <checkbuton>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	f000 808a 	beq.w	8001fec <seclectmenu+0x1188>
														{
															exitmenu = 15;
 8001ed8:	4b83      	ldr	r3, [pc, #524]	@ (80020e8 <seclectmenu+0x1284>)
 8001eda:	220f      	movs	r2, #15
 8001edc:	701a      	strb	r2, [r3, #0]
															statusadd1++;
 8001ede:	7abb      	ldrb	r3, [r7, #10]
 8001ee0:	3301      	adds	r3, #1
 8001ee2:	72bb      	strb	r3, [r7, #10]
															statusadd1 = (statusadd1 > 4) ? 0 : statusadd1;
 8001ee4:	7abb      	ldrb	r3, [r7, #10]
 8001ee6:	2b04      	cmp	r3, #4
 8001ee8:	d801      	bhi.n	8001eee <seclectmenu+0x108a>
 8001eea:	7abb      	ldrb	r3, [r7, #10]
 8001eec:	e000      	b.n	8001ef0 <seclectmenu+0x108c>
 8001eee:	2300      	movs	r3, #0
 8001ef0:	72bb      	strb	r3, [r7, #10]
															switch (statusadd1)
 8001ef2:	7abb      	ldrb	r3, [r7, #10]
 8001ef4:	3b01      	subs	r3, #1
 8001ef6:	2b03      	cmp	r3, #3
 8001ef8:	d862      	bhi.n	8001fc0 <seclectmenu+0x115c>
 8001efa:	a201      	add	r2, pc, #4	@ (adr r2, 8001f00 <seclectmenu+0x109c>)
 8001efc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f00:	08001f11 	.word	0x08001f11
 8001f04:	08001f3d 	.word	0x08001f3d
 8001f08:	08001f69 	.word	0x08001f69
 8001f0c:	08001f95 	.word	0x08001f95
															{
															case 1:
																CLCD_Clear(&LCD1);
 8001f10:	486f      	ldr	r0, [pc, #444]	@ (80020d0 <seclectmenu+0x126c>)
 8001f12:	f7fe fc55 	bl	80007c0 <CLCD_Clear>
																CLCD_SetCursor(&LCD1, 0, 0);
 8001f16:	2200      	movs	r2, #0
 8001f18:	2100      	movs	r1, #0
 8001f1a:	486d      	ldr	r0, [pc, #436]	@ (80020d0 <seclectmenu+0x126c>)
 8001f1c:	f7fe fbd2 	bl	80006c4 <CLCD_SetCursor>
																CLCD_WriteString(&LCD1, "=>  THE 1 ");
 8001f20:	4972      	ldr	r1, [pc, #456]	@ (80020ec <seclectmenu+0x1288>)
 8001f22:	486b      	ldr	r0, [pc, #428]	@ (80020d0 <seclectmenu+0x126c>)
 8001f24:	f7fe fc35 	bl	8000792 <CLCD_WriteString>
																CLCD_SetCursor(&LCD1, 0, 1);
 8001f28:	2201      	movs	r2, #1
 8001f2a:	2100      	movs	r1, #0
 8001f2c:	4868      	ldr	r0, [pc, #416]	@ (80020d0 <seclectmenu+0x126c>)
 8001f2e:	f7fe fbc9 	bl	80006c4 <CLCD_SetCursor>
																CLCD_WriteString(&LCD1, "    THE 2 ");
 8001f32:	496f      	ldr	r1, [pc, #444]	@ (80020f0 <seclectmenu+0x128c>)
 8001f34:	4866      	ldr	r0, [pc, #408]	@ (80020d0 <seclectmenu+0x126c>)
 8001f36:	f7fe fc2c 	bl	8000792 <CLCD_WriteString>
																break;
 8001f3a:	e057      	b.n	8001fec <seclectmenu+0x1188>
															case 2:
																CLCD_Clear(&LCD1);
 8001f3c:	4864      	ldr	r0, [pc, #400]	@ (80020d0 <seclectmenu+0x126c>)
 8001f3e:	f7fe fc3f 	bl	80007c0 <CLCD_Clear>
																CLCD_SetCursor(&LCD1, 0, 0);
 8001f42:	2200      	movs	r2, #0
 8001f44:	2100      	movs	r1, #0
 8001f46:	4862      	ldr	r0, [pc, #392]	@ (80020d0 <seclectmenu+0x126c>)
 8001f48:	f7fe fbbc 	bl	80006c4 <CLCD_SetCursor>
																CLCD_WriteString(&LCD1, "=>  THE 2 ");
 8001f4c:	496a      	ldr	r1, [pc, #424]	@ (80020f8 <seclectmenu+0x1294>)
 8001f4e:	4860      	ldr	r0, [pc, #384]	@ (80020d0 <seclectmenu+0x126c>)
 8001f50:	f7fe fc1f 	bl	8000792 <CLCD_WriteString>
																CLCD_SetCursor(&LCD1, 0, 1);
 8001f54:	2201      	movs	r2, #1
 8001f56:	2100      	movs	r1, #0
 8001f58:	485d      	ldr	r0, [pc, #372]	@ (80020d0 <seclectmenu+0x126c>)
 8001f5a:	f7fe fbb3 	bl	80006c4 <CLCD_SetCursor>
																CLCD_WriteString(&LCD1, "    THE 3 ");
 8001f5e:	4967      	ldr	r1, [pc, #412]	@ (80020fc <seclectmenu+0x1298>)
 8001f60:	485b      	ldr	r0, [pc, #364]	@ (80020d0 <seclectmenu+0x126c>)
 8001f62:	f7fe fc16 	bl	8000792 <CLCD_WriteString>
																break;
 8001f66:	e041      	b.n	8001fec <seclectmenu+0x1188>
															case 3:
																CLCD_Clear(&LCD1);
 8001f68:	4859      	ldr	r0, [pc, #356]	@ (80020d0 <seclectmenu+0x126c>)
 8001f6a:	f7fe fc29 	bl	80007c0 <CLCD_Clear>
																CLCD_SetCursor(&LCD1, 0, 0);
 8001f6e:	2200      	movs	r2, #0
 8001f70:	2100      	movs	r1, #0
 8001f72:	4857      	ldr	r0, [pc, #348]	@ (80020d0 <seclectmenu+0x126c>)
 8001f74:	f7fe fba6 	bl	80006c4 <CLCD_SetCursor>
																CLCD_WriteString(&LCD1, "=>  THE 3 ");
 8001f78:	4961      	ldr	r1, [pc, #388]	@ (8002100 <seclectmenu+0x129c>)
 8001f7a:	4855      	ldr	r0, [pc, #340]	@ (80020d0 <seclectmenu+0x126c>)
 8001f7c:	f7fe fc09 	bl	8000792 <CLCD_WriteString>
																CLCD_SetCursor(&LCD1, 0, 1);
 8001f80:	2201      	movs	r2, #1
 8001f82:	2100      	movs	r1, #0
 8001f84:	4852      	ldr	r0, [pc, #328]	@ (80020d0 <seclectmenu+0x126c>)
 8001f86:	f7fe fb9d 	bl	80006c4 <CLCD_SetCursor>
																CLCD_WriteString(&LCD1, "    THE 4 ");
 8001f8a:	495e      	ldr	r1, [pc, #376]	@ (8002104 <seclectmenu+0x12a0>)
 8001f8c:	4850      	ldr	r0, [pc, #320]	@ (80020d0 <seclectmenu+0x126c>)
 8001f8e:	f7fe fc00 	bl	8000792 <CLCD_WriteString>
																break;
 8001f92:	e02b      	b.n	8001fec <seclectmenu+0x1188>
															case 4:
																CLCD_Clear(&LCD1);
 8001f94:	484e      	ldr	r0, [pc, #312]	@ (80020d0 <seclectmenu+0x126c>)
 8001f96:	f7fe fc13 	bl	80007c0 <CLCD_Clear>
																CLCD_SetCursor(&LCD1, 0, 0);
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	2100      	movs	r1, #0
 8001f9e:	484c      	ldr	r0, [pc, #304]	@ (80020d0 <seclectmenu+0x126c>)
 8001fa0:	f7fe fb90 	bl	80006c4 <CLCD_SetCursor>
																CLCD_WriteString(&LCD1, "=>  THE 4 ");
 8001fa4:	4958      	ldr	r1, [pc, #352]	@ (8002108 <seclectmenu+0x12a4>)
 8001fa6:	484a      	ldr	r0, [pc, #296]	@ (80020d0 <seclectmenu+0x126c>)
 8001fa8:	f7fe fbf3 	bl	8000792 <CLCD_WriteString>
																CLCD_SetCursor(&LCD1, 0, 1);
 8001fac:	2201      	movs	r2, #1
 8001fae:	2100      	movs	r1, #0
 8001fb0:	4847      	ldr	r0, [pc, #284]	@ (80020d0 <seclectmenu+0x126c>)
 8001fb2:	f7fe fb87 	bl	80006c4 <CLCD_SetCursor>
																CLCD_WriteString(&LCD1, "    BACK ");
 8001fb6:	4955      	ldr	r1, [pc, #340]	@ (800210c <seclectmenu+0x12a8>)
 8001fb8:	4845      	ldr	r0, [pc, #276]	@ (80020d0 <seclectmenu+0x126c>)
 8001fba:	f7fe fbea 	bl	8000792 <CLCD_WriteString>
																break;
 8001fbe:	e015      	b.n	8001fec <seclectmenu+0x1188>
															default:
																CLCD_Clear(&LCD1);
 8001fc0:	4843      	ldr	r0, [pc, #268]	@ (80020d0 <seclectmenu+0x126c>)
 8001fc2:	f7fe fbfd 	bl	80007c0 <CLCD_Clear>
																CLCD_SetCursor(&LCD1, 0, 0);
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	2100      	movs	r1, #0
 8001fca:	4841      	ldr	r0, [pc, #260]	@ (80020d0 <seclectmenu+0x126c>)
 8001fcc:	f7fe fb7a 	bl	80006c4 <CLCD_SetCursor>
																CLCD_WriteString(&LCD1, "    THE 4 ");
 8001fd0:	494c      	ldr	r1, [pc, #304]	@ (8002104 <seclectmenu+0x12a0>)
 8001fd2:	483f      	ldr	r0, [pc, #252]	@ (80020d0 <seclectmenu+0x126c>)
 8001fd4:	f7fe fbdd 	bl	8000792 <CLCD_WriteString>
																CLCD_SetCursor(&LCD1, 0, 1);
 8001fd8:	2201      	movs	r2, #1
 8001fda:	2100      	movs	r1, #0
 8001fdc:	483c      	ldr	r0, [pc, #240]	@ (80020d0 <seclectmenu+0x126c>)
 8001fde:	f7fe fb71 	bl	80006c4 <CLCD_SetCursor>
																CLCD_WriteString(&LCD1, "=>  BACK");
 8001fe2:	494b      	ldr	r1, [pc, #300]	@ (8002110 <seclectmenu+0x12ac>)
 8001fe4:	483a      	ldr	r0, [pc, #232]	@ (80020d0 <seclectmenu+0x126c>)
 8001fe6:	f7fe fbd4 	bl	8000792 <CLCD_WriteString>
																break;
 8001fea:	bf00      	nop
															}
														}
														if (checkbuton(MENU_GPIO_Port, MENU_Pin) != 0)
 8001fec:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001ff0:	483c      	ldr	r0, [pc, #240]	@ (80020e4 <seclectmenu+0x1280>)
 8001ff2:	f7fe fee9 	bl	8000dc8 <checkbuton>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	f000 81da 	beq.w	80023b2 <seclectmenu+0x154e>
														{
															exitmenu = 15;
 8001ffe:	4b3a      	ldr	r3, [pc, #232]	@ (80020e8 <seclectmenu+0x1284>)
 8002000:	220f      	movs	r2, #15
 8002002:	701a      	strb	r2, [r3, #0]
															uint8_t keyadd1 = (statusadd << 4) + statusadd1;
 8002004:	7b3b      	ldrb	r3, [r7, #12]
 8002006:	011b      	lsls	r3, r3, #4
 8002008:	b2da      	uxtb	r2, r3
 800200a:	7abb      	ldrb	r3, [r7, #10]
 800200c:	4413      	add	r3, r2
 800200e:	713b      	strb	r3, [r7, #4]
															switch (statusadd1)
 8002010:	7abb      	ldrb	r3, [r7, #10]
 8002012:	3b01      	subs	r3, #1
 8002014:	2b03      	cmp	r3, #3
 8002016:	f200 81c9 	bhi.w	80023ac <seclectmenu+0x1548>
 800201a:	a201      	add	r2, pc, #4	@ (adr r2, 8002020 <seclectmenu+0x11bc>)
 800201c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002020:	08002031 	.word	0x08002031
 8002024:	08002149 	.word	0x08002149
 8002028:	08002215 	.word	0x08002215
 800202c:	080022e1 	.word	0x080022e1
															{
															case 1:
																if (CheckKey(keyadd1) == 0)
 8002030:	793b      	ldrb	r3, [r7, #4]
 8002032:	4618      	mov	r0, r3
 8002034:	f001 f862 	bl	80030fc <CheckKey>
 8002038:	4603      	mov	r3, r0
 800203a:	2b00      	cmp	r3, #0
 800203c:	d125      	bne.n	800208a <seclectmenu+0x1226>
																{
																	CLCD_Clear(&LCD1);
 800203e:	4824      	ldr	r0, [pc, #144]	@ (80020d0 <seclectmenu+0x126c>)
 8002040:	f7fe fbbe 	bl	80007c0 <CLCD_Clear>
																	CLCD_SetCursor(&LCD1, 0, 0);
 8002044:	2200      	movs	r2, #0
 8002046:	2100      	movs	r1, #0
 8002048:	4821      	ldr	r0, [pc, #132]	@ (80020d0 <seclectmenu+0x126c>)
 800204a:	f7fe fb3b 	bl	80006c4 <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "CHUA CO THE 1 ");
 800204e:	4931      	ldr	r1, [pc, #196]	@ (8002114 <seclectmenu+0x12b0>)
 8002050:	481f      	ldr	r0, [pc, #124]	@ (80020d0 <seclectmenu+0x126c>)
 8002052:	f7fe fb9e 	bl	8000792 <CLCD_WriteString>
																	HAL_Delay(1000);
 8002056:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800205a:	f001 fe25 	bl	8003ca8 <HAL_Delay>
																	CLCD_Clear(&LCD1);
 800205e:	481c      	ldr	r0, [pc, #112]	@ (80020d0 <seclectmenu+0x126c>)
 8002060:	f7fe fbae 	bl	80007c0 <CLCD_Clear>
																	CLCD_SetCursor(&LCD1, 0, 0);
 8002064:	2200      	movs	r2, #0
 8002066:	2100      	movs	r1, #0
 8002068:	4819      	ldr	r0, [pc, #100]	@ (80020d0 <seclectmenu+0x126c>)
 800206a:	f7fe fb2b 	bl	80006c4 <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "=>  THE 1 ");
 800206e:	491f      	ldr	r1, [pc, #124]	@ (80020ec <seclectmenu+0x1288>)
 8002070:	4817      	ldr	r0, [pc, #92]	@ (80020d0 <seclectmenu+0x126c>)
 8002072:	f7fe fb8e 	bl	8000792 <CLCD_WriteString>
																	CLCD_SetCursor(&LCD1, 0, 1);
 8002076:	2201      	movs	r2, #1
 8002078:	2100      	movs	r1, #0
 800207a:	4815      	ldr	r0, [pc, #84]	@ (80020d0 <seclectmenu+0x126c>)
 800207c:	f7fe fb22 	bl	80006c4 <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "    THE 2 ");
 8002080:	491b      	ldr	r1, [pc, #108]	@ (80020f0 <seclectmenu+0x128c>)
 8002082:	4813      	ldr	r0, [pc, #76]	@ (80020d0 <seclectmenu+0x126c>)
 8002084:	f7fe fb85 	bl	8000792 <CLCD_WriteString>
																		CLCD_WriteString(&LCD1, "=>  THE 1 ");
																		CLCD_SetCursor(&LCD1, 0, 1);
																		CLCD_WriteString(&LCD1, "    THE 2 ");
																	}
																}
																break;
 8002088:	e193      	b.n	80023b2 <seclectmenu+0x154e>
																	removeuid(CheckKey(keyadd1));
 800208a:	793b      	ldrb	r3, [r7, #4]
 800208c:	4618      	mov	r0, r3
 800208e:	f001 f835 	bl	80030fc <CheckKey>
 8002092:	4603      	mov	r3, r0
 8002094:	4618      	mov	r0, r3
 8002096:	f001 f85f 	bl	8003158 <removeuid>
																	CLCD_Clear(&LCD1);
 800209a:	480d      	ldr	r0, [pc, #52]	@ (80020d0 <seclectmenu+0x126c>)
 800209c:	f7fe fb90 	bl	80007c0 <CLCD_Clear>
																	CLCD_SetCursor(&LCD1, 0, 0);
 80020a0:	2200      	movs	r2, #0
 80020a2:	2100      	movs	r1, #0
 80020a4:	480a      	ldr	r0, [pc, #40]	@ (80020d0 <seclectmenu+0x126c>)
 80020a6:	f7fe fb0d 	bl	80006c4 <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "XOA THANH CONG");
 80020aa:	491b      	ldr	r1, [pc, #108]	@ (8002118 <seclectmenu+0x12b4>)
 80020ac:	4808      	ldr	r0, [pc, #32]	@ (80020d0 <seclectmenu+0x126c>)
 80020ae:	f7fe fb70 	bl	8000792 <CLCD_WriteString>
																	HAL_Delay(1000);
 80020b2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80020b6:	f001 fdf7 	bl	8003ca8 <HAL_Delay>
																	if (checkcountUID() == 0)
 80020ba:	f000 fe29 	bl	8002d10 <checkcountUID>
 80020be:	4603      	mov	r3, r0
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d12b      	bne.n	800211c <seclectmenu+0x12b8>
																		startadd();
 80020c4:	f001 f856 	bl	8003174 <startadd>
																		exitmenu = 0;
 80020c8:	4b07      	ldr	r3, [pc, #28]	@ (80020e8 <seclectmenu+0x1284>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	701a      	strb	r2, [r3, #0]
																break;
 80020ce:	e170      	b.n	80023b2 <seclectmenu+0x154e>
 80020d0:	200000f4 	.word	0x200000f4
 80020d4:	08005d3c 	.word	0x08005d3c
 80020d8:	08005d74 	.word	0x08005d74
 80020dc:	08005d64 	.word	0x08005d64
 80020e0:	08005d84 	.word	0x08005d84
 80020e4:	40010800 	.word	0x40010800
 80020e8:	20000000 	.word	0x20000000
 80020ec:	08005d8c 	.word	0x08005d8c
 80020f0:	08005d98 	.word	0x08005d98
 80020f4:	40010c00 	.word	0x40010c00
 80020f8:	08005da4 	.word	0x08005da4
 80020fc:	08005db0 	.word	0x08005db0
 8002100:	08005dbc 	.word	0x08005dbc
 8002104:	08005dc8 	.word	0x08005dc8
 8002108:	08005dd4 	.word	0x08005dd4
 800210c:	08005de0 	.word	0x08005de0
 8002110:	08005dec 	.word	0x08005dec
 8002114:	08005eb8 	.word	0x08005eb8
 8002118:	08005ec8 	.word	0x08005ec8
																		CLCD_Clear(&LCD1);
 800211c:	48bf      	ldr	r0, [pc, #764]	@ (800241c <seclectmenu+0x15b8>)
 800211e:	f7fe fb4f 	bl	80007c0 <CLCD_Clear>
																		CLCD_SetCursor(&LCD1, 0, 0);
 8002122:	2200      	movs	r2, #0
 8002124:	2100      	movs	r1, #0
 8002126:	48bd      	ldr	r0, [pc, #756]	@ (800241c <seclectmenu+0x15b8>)
 8002128:	f7fe facc 	bl	80006c4 <CLCD_SetCursor>
																		CLCD_WriteString(&LCD1, "=>  THE 1 ");
 800212c:	49bc      	ldr	r1, [pc, #752]	@ (8002420 <seclectmenu+0x15bc>)
 800212e:	48bb      	ldr	r0, [pc, #748]	@ (800241c <seclectmenu+0x15b8>)
 8002130:	f7fe fb2f 	bl	8000792 <CLCD_WriteString>
																		CLCD_SetCursor(&LCD1, 0, 1);
 8002134:	2201      	movs	r2, #1
 8002136:	2100      	movs	r1, #0
 8002138:	48b8      	ldr	r0, [pc, #736]	@ (800241c <seclectmenu+0x15b8>)
 800213a:	f7fe fac3 	bl	80006c4 <CLCD_SetCursor>
																		CLCD_WriteString(&LCD1, "    THE 2 ");
 800213e:	49b9      	ldr	r1, [pc, #740]	@ (8002424 <seclectmenu+0x15c0>)
 8002140:	48b6      	ldr	r0, [pc, #728]	@ (800241c <seclectmenu+0x15b8>)
 8002142:	f7fe fb26 	bl	8000792 <CLCD_WriteString>
																break;
 8002146:	e134      	b.n	80023b2 <seclectmenu+0x154e>
															case 2:
																if (CheckKey(keyadd1) == 0)
 8002148:	793b      	ldrb	r3, [r7, #4]
 800214a:	4618      	mov	r0, r3
 800214c:	f000 ffd6 	bl	80030fc <CheckKey>
 8002150:	4603      	mov	r3, r0
 8002152:	2b00      	cmp	r3, #0
 8002154:	d125      	bne.n	80021a2 <seclectmenu+0x133e>
																{
																	CLCD_Clear(&LCD1);
 8002156:	48b1      	ldr	r0, [pc, #708]	@ (800241c <seclectmenu+0x15b8>)
 8002158:	f7fe fb32 	bl	80007c0 <CLCD_Clear>
																	CLCD_SetCursor(&LCD1, 0, 0);
 800215c:	2200      	movs	r2, #0
 800215e:	2100      	movs	r1, #0
 8002160:	48ae      	ldr	r0, [pc, #696]	@ (800241c <seclectmenu+0x15b8>)
 8002162:	f7fe faaf 	bl	80006c4 <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "CHUA CO THE 2 ");
 8002166:	49b0      	ldr	r1, [pc, #704]	@ (8002428 <seclectmenu+0x15c4>)
 8002168:	48ac      	ldr	r0, [pc, #688]	@ (800241c <seclectmenu+0x15b8>)
 800216a:	f7fe fb12 	bl	8000792 <CLCD_WriteString>
																	HAL_Delay(1000);
 800216e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002172:	f001 fd99 	bl	8003ca8 <HAL_Delay>
																	CLCD_Clear(&LCD1);
 8002176:	48a9      	ldr	r0, [pc, #676]	@ (800241c <seclectmenu+0x15b8>)
 8002178:	f7fe fb22 	bl	80007c0 <CLCD_Clear>
																	CLCD_SetCursor(&LCD1, 0, 0);
 800217c:	2200      	movs	r2, #0
 800217e:	2100      	movs	r1, #0
 8002180:	48a6      	ldr	r0, [pc, #664]	@ (800241c <seclectmenu+0x15b8>)
 8002182:	f7fe fa9f 	bl	80006c4 <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "=>  THE 2 ");
 8002186:	49a9      	ldr	r1, [pc, #676]	@ (800242c <seclectmenu+0x15c8>)
 8002188:	48a4      	ldr	r0, [pc, #656]	@ (800241c <seclectmenu+0x15b8>)
 800218a:	f7fe fb02 	bl	8000792 <CLCD_WriteString>
																	CLCD_SetCursor(&LCD1, 0, 1);
 800218e:	2201      	movs	r2, #1
 8002190:	2100      	movs	r1, #0
 8002192:	48a2      	ldr	r0, [pc, #648]	@ (800241c <seclectmenu+0x15b8>)
 8002194:	f7fe fa96 	bl	80006c4 <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "    THE 3 ");
 8002198:	49a5      	ldr	r1, [pc, #660]	@ (8002430 <seclectmenu+0x15cc>)
 800219a:	48a0      	ldr	r0, [pc, #640]	@ (800241c <seclectmenu+0x15b8>)
 800219c:	f7fe faf9 	bl	8000792 <CLCD_WriteString>
																		CLCD_WriteString(&LCD1, "=>  THE 2 ");
																		CLCD_SetCursor(&LCD1, 0, 1);
																		CLCD_WriteString(&LCD1, "    THE 3 ");
																	}
																}
																break;
 80021a0:	e107      	b.n	80023b2 <seclectmenu+0x154e>
																	removeuid(CheckKey(keyadd1));
 80021a2:	793b      	ldrb	r3, [r7, #4]
 80021a4:	4618      	mov	r0, r3
 80021a6:	f000 ffa9 	bl	80030fc <CheckKey>
 80021aa:	4603      	mov	r3, r0
 80021ac:	4618      	mov	r0, r3
 80021ae:	f000 ffd3 	bl	8003158 <removeuid>
																	CLCD_Clear(&LCD1);
 80021b2:	489a      	ldr	r0, [pc, #616]	@ (800241c <seclectmenu+0x15b8>)
 80021b4:	f7fe fb04 	bl	80007c0 <CLCD_Clear>
																	CLCD_SetCursor(&LCD1, 0, 0);
 80021b8:	2200      	movs	r2, #0
 80021ba:	2100      	movs	r1, #0
 80021bc:	4897      	ldr	r0, [pc, #604]	@ (800241c <seclectmenu+0x15b8>)
 80021be:	f7fe fa81 	bl	80006c4 <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "XOA THANH CONG");
 80021c2:	499c      	ldr	r1, [pc, #624]	@ (8002434 <seclectmenu+0x15d0>)
 80021c4:	4895      	ldr	r0, [pc, #596]	@ (800241c <seclectmenu+0x15b8>)
 80021c6:	f7fe fae4 	bl	8000792 <CLCD_WriteString>
																	HAL_Delay(1000);
 80021ca:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80021ce:	f001 fd6b 	bl	8003ca8 <HAL_Delay>
																	if (checkcountUID() == 0)
 80021d2:	f000 fd9d 	bl	8002d10 <checkcountUID>
 80021d6:	4603      	mov	r3, r0
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d105      	bne.n	80021e8 <seclectmenu+0x1384>
																		startadd();
 80021dc:	f000 ffca 	bl	8003174 <startadd>
																		exitmenu = 0;
 80021e0:	4b95      	ldr	r3, [pc, #596]	@ (8002438 <seclectmenu+0x15d4>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	701a      	strb	r2, [r3, #0]
																break;
 80021e6:	e0e4      	b.n	80023b2 <seclectmenu+0x154e>
																		CLCD_Clear(&LCD1);
 80021e8:	488c      	ldr	r0, [pc, #560]	@ (800241c <seclectmenu+0x15b8>)
 80021ea:	f7fe fae9 	bl	80007c0 <CLCD_Clear>
																		CLCD_SetCursor(&LCD1, 0, 0);
 80021ee:	2200      	movs	r2, #0
 80021f0:	2100      	movs	r1, #0
 80021f2:	488a      	ldr	r0, [pc, #552]	@ (800241c <seclectmenu+0x15b8>)
 80021f4:	f7fe fa66 	bl	80006c4 <CLCD_SetCursor>
																		CLCD_WriteString(&LCD1, "=>  THE 2 ");
 80021f8:	498c      	ldr	r1, [pc, #560]	@ (800242c <seclectmenu+0x15c8>)
 80021fa:	4888      	ldr	r0, [pc, #544]	@ (800241c <seclectmenu+0x15b8>)
 80021fc:	f7fe fac9 	bl	8000792 <CLCD_WriteString>
																		CLCD_SetCursor(&LCD1, 0, 1);
 8002200:	2201      	movs	r2, #1
 8002202:	2100      	movs	r1, #0
 8002204:	4885      	ldr	r0, [pc, #532]	@ (800241c <seclectmenu+0x15b8>)
 8002206:	f7fe fa5d 	bl	80006c4 <CLCD_SetCursor>
																		CLCD_WriteString(&LCD1, "    THE 3 ");
 800220a:	4989      	ldr	r1, [pc, #548]	@ (8002430 <seclectmenu+0x15cc>)
 800220c:	4883      	ldr	r0, [pc, #524]	@ (800241c <seclectmenu+0x15b8>)
 800220e:	f7fe fac0 	bl	8000792 <CLCD_WriteString>
																break;
 8002212:	e0ce      	b.n	80023b2 <seclectmenu+0x154e>
															case 3:
																if (CheckKey(keyadd1) == 0)
 8002214:	793b      	ldrb	r3, [r7, #4]
 8002216:	4618      	mov	r0, r3
 8002218:	f000 ff70 	bl	80030fc <CheckKey>
 800221c:	4603      	mov	r3, r0
 800221e:	2b00      	cmp	r3, #0
 8002220:	d125      	bne.n	800226e <seclectmenu+0x140a>
																{
																	CLCD_Clear(&LCD1);
 8002222:	487e      	ldr	r0, [pc, #504]	@ (800241c <seclectmenu+0x15b8>)
 8002224:	f7fe facc 	bl	80007c0 <CLCD_Clear>
																	CLCD_SetCursor(&LCD1, 0, 0);
 8002228:	2200      	movs	r2, #0
 800222a:	2100      	movs	r1, #0
 800222c:	487b      	ldr	r0, [pc, #492]	@ (800241c <seclectmenu+0x15b8>)
 800222e:	f7fe fa49 	bl	80006c4 <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "CHUA CO THE 3 ");
 8002232:	4982      	ldr	r1, [pc, #520]	@ (800243c <seclectmenu+0x15d8>)
 8002234:	4879      	ldr	r0, [pc, #484]	@ (800241c <seclectmenu+0x15b8>)
 8002236:	f7fe faac 	bl	8000792 <CLCD_WriteString>
																	HAL_Delay(1000);
 800223a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800223e:	f001 fd33 	bl	8003ca8 <HAL_Delay>
																	CLCD_Clear(&LCD1);
 8002242:	4876      	ldr	r0, [pc, #472]	@ (800241c <seclectmenu+0x15b8>)
 8002244:	f7fe fabc 	bl	80007c0 <CLCD_Clear>
																	CLCD_SetCursor(&LCD1, 0, 0);
 8002248:	2200      	movs	r2, #0
 800224a:	2100      	movs	r1, #0
 800224c:	4873      	ldr	r0, [pc, #460]	@ (800241c <seclectmenu+0x15b8>)
 800224e:	f7fe fa39 	bl	80006c4 <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "=>  THE 3 ");
 8002252:	497b      	ldr	r1, [pc, #492]	@ (8002440 <seclectmenu+0x15dc>)
 8002254:	4871      	ldr	r0, [pc, #452]	@ (800241c <seclectmenu+0x15b8>)
 8002256:	f7fe fa9c 	bl	8000792 <CLCD_WriteString>
																	CLCD_SetCursor(&LCD1, 0, 1);
 800225a:	2201      	movs	r2, #1
 800225c:	2100      	movs	r1, #0
 800225e:	486f      	ldr	r0, [pc, #444]	@ (800241c <seclectmenu+0x15b8>)
 8002260:	f7fe fa30 	bl	80006c4 <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "    THE 4 ");
 8002264:	4977      	ldr	r1, [pc, #476]	@ (8002444 <seclectmenu+0x15e0>)
 8002266:	486d      	ldr	r0, [pc, #436]	@ (800241c <seclectmenu+0x15b8>)
 8002268:	f7fe fa93 	bl	8000792 <CLCD_WriteString>
																		CLCD_WriteString(&LCD1, "=>  THE 3 ");
																		CLCD_SetCursor(&LCD1, 0, 1);
																		CLCD_WriteString(&LCD1, "    THE 4 ");
																	}
																}
																break;
 800226c:	e0a1      	b.n	80023b2 <seclectmenu+0x154e>
																	removeuid(CheckKey(keyadd1));
 800226e:	793b      	ldrb	r3, [r7, #4]
 8002270:	4618      	mov	r0, r3
 8002272:	f000 ff43 	bl	80030fc <CheckKey>
 8002276:	4603      	mov	r3, r0
 8002278:	4618      	mov	r0, r3
 800227a:	f000 ff6d 	bl	8003158 <removeuid>
																	CLCD_Clear(&LCD1);
 800227e:	4867      	ldr	r0, [pc, #412]	@ (800241c <seclectmenu+0x15b8>)
 8002280:	f7fe fa9e 	bl	80007c0 <CLCD_Clear>
																	CLCD_SetCursor(&LCD1, 0, 0);
 8002284:	2200      	movs	r2, #0
 8002286:	2100      	movs	r1, #0
 8002288:	4864      	ldr	r0, [pc, #400]	@ (800241c <seclectmenu+0x15b8>)
 800228a:	f7fe fa1b 	bl	80006c4 <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "XOA THANH CONG");
 800228e:	4969      	ldr	r1, [pc, #420]	@ (8002434 <seclectmenu+0x15d0>)
 8002290:	4862      	ldr	r0, [pc, #392]	@ (800241c <seclectmenu+0x15b8>)
 8002292:	f7fe fa7e 	bl	8000792 <CLCD_WriteString>
																	HAL_Delay(1000);
 8002296:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800229a:	f001 fd05 	bl	8003ca8 <HAL_Delay>
																	if (checkcountUID() == 0)
 800229e:	f000 fd37 	bl	8002d10 <checkcountUID>
 80022a2:	4603      	mov	r3, r0
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d105      	bne.n	80022b4 <seclectmenu+0x1450>
																		startadd();
 80022a8:	f000 ff64 	bl	8003174 <startadd>
																		exitmenu = 0;
 80022ac:	4b62      	ldr	r3, [pc, #392]	@ (8002438 <seclectmenu+0x15d4>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	701a      	strb	r2, [r3, #0]
																break;
 80022b2:	e07e      	b.n	80023b2 <seclectmenu+0x154e>
																		CLCD_Clear(&LCD1);
 80022b4:	4859      	ldr	r0, [pc, #356]	@ (800241c <seclectmenu+0x15b8>)
 80022b6:	f7fe fa83 	bl	80007c0 <CLCD_Clear>
																		CLCD_SetCursor(&LCD1, 0, 0);
 80022ba:	2200      	movs	r2, #0
 80022bc:	2100      	movs	r1, #0
 80022be:	4857      	ldr	r0, [pc, #348]	@ (800241c <seclectmenu+0x15b8>)
 80022c0:	f7fe fa00 	bl	80006c4 <CLCD_SetCursor>
																		CLCD_WriteString(&LCD1, "=>  THE 3 ");
 80022c4:	495e      	ldr	r1, [pc, #376]	@ (8002440 <seclectmenu+0x15dc>)
 80022c6:	4855      	ldr	r0, [pc, #340]	@ (800241c <seclectmenu+0x15b8>)
 80022c8:	f7fe fa63 	bl	8000792 <CLCD_WriteString>
																		CLCD_SetCursor(&LCD1, 0, 1);
 80022cc:	2201      	movs	r2, #1
 80022ce:	2100      	movs	r1, #0
 80022d0:	4852      	ldr	r0, [pc, #328]	@ (800241c <seclectmenu+0x15b8>)
 80022d2:	f7fe f9f7 	bl	80006c4 <CLCD_SetCursor>
																		CLCD_WriteString(&LCD1, "    THE 4 ");
 80022d6:	495b      	ldr	r1, [pc, #364]	@ (8002444 <seclectmenu+0x15e0>)
 80022d8:	4850      	ldr	r0, [pc, #320]	@ (800241c <seclectmenu+0x15b8>)
 80022da:	f7fe fa5a 	bl	8000792 <CLCD_WriteString>
																break;
 80022de:	e068      	b.n	80023b2 <seclectmenu+0x154e>
															case 4:
																if (CheckKey(keyadd1) == 0)
 80022e0:	793b      	ldrb	r3, [r7, #4]
 80022e2:	4618      	mov	r0, r3
 80022e4:	f000 ff0a 	bl	80030fc <CheckKey>
 80022e8:	4603      	mov	r3, r0
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d125      	bne.n	800233a <seclectmenu+0x14d6>
																{
																	CLCD_Clear(&LCD1);
 80022ee:	484b      	ldr	r0, [pc, #300]	@ (800241c <seclectmenu+0x15b8>)
 80022f0:	f7fe fa66 	bl	80007c0 <CLCD_Clear>
																	CLCD_SetCursor(&LCD1, 0, 0);
 80022f4:	2200      	movs	r2, #0
 80022f6:	2100      	movs	r1, #0
 80022f8:	4848      	ldr	r0, [pc, #288]	@ (800241c <seclectmenu+0x15b8>)
 80022fa:	f7fe f9e3 	bl	80006c4 <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "CHUA CO THE 4 ");
 80022fe:	4952      	ldr	r1, [pc, #328]	@ (8002448 <seclectmenu+0x15e4>)
 8002300:	4846      	ldr	r0, [pc, #280]	@ (800241c <seclectmenu+0x15b8>)
 8002302:	f7fe fa46 	bl	8000792 <CLCD_WriteString>
																	HAL_Delay(1000);
 8002306:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800230a:	f001 fccd 	bl	8003ca8 <HAL_Delay>
																	CLCD_Clear(&LCD1);
 800230e:	4843      	ldr	r0, [pc, #268]	@ (800241c <seclectmenu+0x15b8>)
 8002310:	f7fe fa56 	bl	80007c0 <CLCD_Clear>
																	CLCD_SetCursor(&LCD1, 0, 0);
 8002314:	2200      	movs	r2, #0
 8002316:	2100      	movs	r1, #0
 8002318:	4840      	ldr	r0, [pc, #256]	@ (800241c <seclectmenu+0x15b8>)
 800231a:	f7fe f9d3 	bl	80006c4 <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "=>  THE 4 ");
 800231e:	494b      	ldr	r1, [pc, #300]	@ (800244c <seclectmenu+0x15e8>)
 8002320:	483e      	ldr	r0, [pc, #248]	@ (800241c <seclectmenu+0x15b8>)
 8002322:	f7fe fa36 	bl	8000792 <CLCD_WriteString>
																	CLCD_SetCursor(&LCD1, 0, 1);
 8002326:	2201      	movs	r2, #1
 8002328:	2100      	movs	r1, #0
 800232a:	483c      	ldr	r0, [pc, #240]	@ (800241c <seclectmenu+0x15b8>)
 800232c:	f7fe f9ca 	bl	80006c4 <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "    BACK ");
 8002330:	4947      	ldr	r1, [pc, #284]	@ (8002450 <seclectmenu+0x15ec>)
 8002332:	483a      	ldr	r0, [pc, #232]	@ (800241c <seclectmenu+0x15b8>)
 8002334:	f7fe fa2d 	bl	8000792 <CLCD_WriteString>
																		CLCD_WriteString(&LCD1, "=>  THE 4 ");
																		CLCD_SetCursor(&LCD1, 0, 1);
																		CLCD_WriteString(&LCD1, "    BACK ");
																	}
																}
																break;
 8002338:	e03b      	b.n	80023b2 <seclectmenu+0x154e>
																	removeuid(CheckKey(keyadd1));
 800233a:	793b      	ldrb	r3, [r7, #4]
 800233c:	4618      	mov	r0, r3
 800233e:	f000 fedd 	bl	80030fc <CheckKey>
 8002342:	4603      	mov	r3, r0
 8002344:	4618      	mov	r0, r3
 8002346:	f000 ff07 	bl	8003158 <removeuid>
																	CLCD_Clear(&LCD1);
 800234a:	4834      	ldr	r0, [pc, #208]	@ (800241c <seclectmenu+0x15b8>)
 800234c:	f7fe fa38 	bl	80007c0 <CLCD_Clear>
																	CLCD_SetCursor(&LCD1, 0, 0);
 8002350:	2200      	movs	r2, #0
 8002352:	2100      	movs	r1, #0
 8002354:	4831      	ldr	r0, [pc, #196]	@ (800241c <seclectmenu+0x15b8>)
 8002356:	f7fe f9b5 	bl	80006c4 <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "XOA THANH CONG");
 800235a:	4936      	ldr	r1, [pc, #216]	@ (8002434 <seclectmenu+0x15d0>)
 800235c:	482f      	ldr	r0, [pc, #188]	@ (800241c <seclectmenu+0x15b8>)
 800235e:	f7fe fa18 	bl	8000792 <CLCD_WriteString>
																	HAL_Delay(1000);
 8002362:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002366:	f001 fc9f 	bl	8003ca8 <HAL_Delay>
																	if (checkcountUID() == 0)
 800236a:	f000 fcd1 	bl	8002d10 <checkcountUID>
 800236e:	4603      	mov	r3, r0
 8002370:	2b00      	cmp	r3, #0
 8002372:	d105      	bne.n	8002380 <seclectmenu+0x151c>
																		startadd();
 8002374:	f000 fefe 	bl	8003174 <startadd>
																		exitmenu = 0;
 8002378:	4b2f      	ldr	r3, [pc, #188]	@ (8002438 <seclectmenu+0x15d4>)
 800237a:	2200      	movs	r2, #0
 800237c:	701a      	strb	r2, [r3, #0]
																break;
 800237e:	e018      	b.n	80023b2 <seclectmenu+0x154e>
																		CLCD_Clear(&LCD1);
 8002380:	4826      	ldr	r0, [pc, #152]	@ (800241c <seclectmenu+0x15b8>)
 8002382:	f7fe fa1d 	bl	80007c0 <CLCD_Clear>
																		CLCD_SetCursor(&LCD1, 0, 0);
 8002386:	2200      	movs	r2, #0
 8002388:	2100      	movs	r1, #0
 800238a:	4824      	ldr	r0, [pc, #144]	@ (800241c <seclectmenu+0x15b8>)
 800238c:	f7fe f99a 	bl	80006c4 <CLCD_SetCursor>
																		CLCD_WriteString(&LCD1, "=>  THE 4 ");
 8002390:	492e      	ldr	r1, [pc, #184]	@ (800244c <seclectmenu+0x15e8>)
 8002392:	4822      	ldr	r0, [pc, #136]	@ (800241c <seclectmenu+0x15b8>)
 8002394:	f7fe f9fd 	bl	8000792 <CLCD_WriteString>
																		CLCD_SetCursor(&LCD1, 0, 1);
 8002398:	2201      	movs	r2, #1
 800239a:	2100      	movs	r1, #0
 800239c:	481f      	ldr	r0, [pc, #124]	@ (800241c <seclectmenu+0x15b8>)
 800239e:	f7fe f991 	bl	80006c4 <CLCD_SetCursor>
																		CLCD_WriteString(&LCD1, "    BACK ");
 80023a2:	492b      	ldr	r1, [pc, #172]	@ (8002450 <seclectmenu+0x15ec>)
 80023a4:	481d      	ldr	r0, [pc, #116]	@ (800241c <seclectmenu+0x15b8>)
 80023a6:	f7fe f9f4 	bl	8000792 <CLCD_WriteString>
																break;
 80023aa:	e002      	b.n	80023b2 <seclectmenu+0x154e>
															default:
																back11 = 0;
 80023ac:	2300      	movs	r3, #0
 80023ae:	727b      	strb	r3, [r7, #9]
																break;
 80023b0:	bf00      	nop
													while (back11 == 1)
 80023b2:	7a7b      	ldrb	r3, [r7, #9]
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	f43f ad79 	beq.w	8001eac <seclectmenu+0x1048>
															}
														}
													}
													CLCD_Clear(&LCD1);
 80023ba:	4818      	ldr	r0, [pc, #96]	@ (800241c <seclectmenu+0x15b8>)
 80023bc:	f7fe fa00 	bl	80007c0 <CLCD_Clear>
													CLCD_SetCursor(&LCD1, 0, 0);
 80023c0:	2200      	movs	r2, #0
 80023c2:	2100      	movs	r1, #0
 80023c4:	4815      	ldr	r0, [pc, #84]	@ (800241c <seclectmenu+0x15b8>)
 80023c6:	f7fe f97d 	bl	80006c4 <CLCD_SetCursor>
													CLCD_WriteString(&LCD1, "=> THE NGUOI LON");
 80023ca:	4922      	ldr	r1, [pc, #136]	@ (8002454 <seclectmenu+0x15f0>)
 80023cc:	4813      	ldr	r0, [pc, #76]	@ (800241c <seclectmenu+0x15b8>)
 80023ce:	f7fe f9e0 	bl	8000792 <CLCD_WriteString>
													CLCD_SetCursor(&LCD1, 0, 1);
 80023d2:	2201      	movs	r2, #1
 80023d4:	2100      	movs	r1, #0
 80023d6:	4811      	ldr	r0, [pc, #68]	@ (800241c <seclectmenu+0x15b8>)
 80023d8:	f7fe f974 	bl	80006c4 <CLCD_SetCursor>
													CLCD_WriteString(&LCD1, "   THE TRE EM");
 80023dc:	491e      	ldr	r1, [pc, #120]	@ (8002458 <seclectmenu+0x15f4>)
 80023de:	480f      	ldr	r0, [pc, #60]	@ (800241c <seclectmenu+0x15b8>)
 80023e0:	f7fe f9d7 	bl	8000792 <CLCD_WriteString>
													break;
 80023e4:	e2a8      	b.n	8002938 <seclectmenu+0x1ad4>
												case 2:
													CLCD_Clear(&LCD1);
 80023e6:	480d      	ldr	r0, [pc, #52]	@ (800241c <seclectmenu+0x15b8>)
 80023e8:	f7fe f9ea 	bl	80007c0 <CLCD_Clear>
													CLCD_SetCursor(&LCD1, 0, 0);
 80023ec:	2200      	movs	r2, #0
 80023ee:	2100      	movs	r1, #0
 80023f0:	480a      	ldr	r0, [pc, #40]	@ (800241c <seclectmenu+0x15b8>)
 80023f2:	f7fe f967 	bl	80006c4 <CLCD_SetCursor>
													CLCD_WriteString(&LCD1, "=>  THE 1 ");
 80023f6:	490a      	ldr	r1, [pc, #40]	@ (8002420 <seclectmenu+0x15bc>)
 80023f8:	4808      	ldr	r0, [pc, #32]	@ (800241c <seclectmenu+0x15b8>)
 80023fa:	f7fe f9ca 	bl	8000792 <CLCD_WriteString>
													CLCD_SetCursor(&LCD1, 0, 1);
 80023fe:	2201      	movs	r2, #1
 8002400:	2100      	movs	r1, #0
 8002402:	4806      	ldr	r0, [pc, #24]	@ (800241c <seclectmenu+0x15b8>)
 8002404:	f7fe f95e 	bl	80006c4 <CLCD_SetCursor>
													CLCD_WriteString(&LCD1, "    THE 2 ");
 8002408:	4906      	ldr	r1, [pc, #24]	@ (8002424 <seclectmenu+0x15c0>)
 800240a:	4804      	ldr	r0, [pc, #16]	@ (800241c <seclectmenu+0x15b8>)
 800240c:	f7fe f9c1 	bl	8000792 <CLCD_WriteString>
													uint8_t statusadd2 = 1;
 8002410:	2301      	movs	r3, #1
 8002412:	723b      	strb	r3, [r7, #8]
													uint8_t back12 = 1;
 8002414:	2301      	movs	r3, #1
 8002416:	71fb      	strb	r3, [r7, #7]
													while (back12 == 1)
 8002418:	e271      	b.n	80028fe <seclectmenu+0x1a9a>
 800241a:	bf00      	nop
 800241c:	200000f4 	.word	0x200000f4
 8002420:	08005d8c 	.word	0x08005d8c
 8002424:	08005d98 	.word	0x08005d98
 8002428:	08005ed8 	.word	0x08005ed8
 800242c:	08005da4 	.word	0x08005da4
 8002430:	08005db0 	.word	0x08005db0
 8002434:	08005ec8 	.word	0x08005ec8
 8002438:	20000000 	.word	0x20000000
 800243c:	08005ee8 	.word	0x08005ee8
 8002440:	08005dbc 	.word	0x08005dbc
 8002444:	08005dc8 	.word	0x08005dc8
 8002448:	08005ef8 	.word	0x08005ef8
 800244c:	08005dd4 	.word	0x08005dd4
 8002450:	08005de0 	.word	0x08005de0
 8002454:	08005d50 	.word	0x08005d50
 8002458:	08005d64 	.word	0x08005d64
													{
														if (exitmenu == 0)
 800245c:	4bbb      	ldr	r3, [pc, #748]	@ (800274c <seclectmenu+0x18e8>)
 800245e:	781b      	ldrb	r3, [r3, #0]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d107      	bne.n	8002474 <seclectmenu+0x1610>
														{
															CLCD_Clear(&LCD1);
 8002464:	48ba      	ldr	r0, [pc, #744]	@ (8002750 <seclectmenu+0x18ec>)
 8002466:	f7fe f9ab 	bl	80007c0 <CLCD_Clear>
															HAL_Delay(1000);
 800246a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800246e:	f001 fc1b 	bl	8003ca8 <HAL_Delay>
															return;
 8002472:	e3d2      	b.n	8002c1a <seclectmenu+0x1db6>
														}
														if (checkbuton(SELECCT_GPIO_Port, SELECCT_Pin) != 0)
 8002474:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002478:	48b6      	ldr	r0, [pc, #728]	@ (8002754 <seclectmenu+0x18f0>)
 800247a:	f7fe fca5 	bl	8000dc8 <checkbuton>
 800247e:	4603      	mov	r3, r0
 8002480:	2b00      	cmp	r3, #0
 8002482:	f000 808b 	beq.w	800259c <seclectmenu+0x1738>
														{
															exitmenu = 15;
 8002486:	4bb1      	ldr	r3, [pc, #708]	@ (800274c <seclectmenu+0x18e8>)
 8002488:	220f      	movs	r2, #15
 800248a:	701a      	strb	r2, [r3, #0]
															statusadd2++;
 800248c:	7a3b      	ldrb	r3, [r7, #8]
 800248e:	3301      	adds	r3, #1
 8002490:	723b      	strb	r3, [r7, #8]
															statusadd2 = (statusadd2 > 4) ? 0 : statusadd2;
 8002492:	7a3b      	ldrb	r3, [r7, #8]
 8002494:	2b04      	cmp	r3, #4
 8002496:	d801      	bhi.n	800249c <seclectmenu+0x1638>
 8002498:	7a3b      	ldrb	r3, [r7, #8]
 800249a:	e000      	b.n	800249e <seclectmenu+0x163a>
 800249c:	2300      	movs	r3, #0
 800249e:	723b      	strb	r3, [r7, #8]
															switch (statusadd2)
 80024a0:	7a3b      	ldrb	r3, [r7, #8]
 80024a2:	3b01      	subs	r3, #1
 80024a4:	2b03      	cmp	r3, #3
 80024a6:	d863      	bhi.n	8002570 <seclectmenu+0x170c>
 80024a8:	a201      	add	r2, pc, #4	@ (adr r2, 80024b0 <seclectmenu+0x164c>)
 80024aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024ae:	bf00      	nop
 80024b0:	080024c1 	.word	0x080024c1
 80024b4:	080024ed 	.word	0x080024ed
 80024b8:	08002519 	.word	0x08002519
 80024bc:	08002545 	.word	0x08002545
															{
															case 1:
																CLCD_Clear(&LCD1);
 80024c0:	48a3      	ldr	r0, [pc, #652]	@ (8002750 <seclectmenu+0x18ec>)
 80024c2:	f7fe f97d 	bl	80007c0 <CLCD_Clear>
																CLCD_SetCursor(&LCD1, 0, 0);
 80024c6:	2200      	movs	r2, #0
 80024c8:	2100      	movs	r1, #0
 80024ca:	48a1      	ldr	r0, [pc, #644]	@ (8002750 <seclectmenu+0x18ec>)
 80024cc:	f7fe f8fa 	bl	80006c4 <CLCD_SetCursor>
																CLCD_WriteString(&LCD1, "=>  THE 1 ");
 80024d0:	49a1      	ldr	r1, [pc, #644]	@ (8002758 <seclectmenu+0x18f4>)
 80024d2:	489f      	ldr	r0, [pc, #636]	@ (8002750 <seclectmenu+0x18ec>)
 80024d4:	f7fe f95d 	bl	8000792 <CLCD_WriteString>
																CLCD_SetCursor(&LCD1, 0, 1);
 80024d8:	2201      	movs	r2, #1
 80024da:	2100      	movs	r1, #0
 80024dc:	489c      	ldr	r0, [pc, #624]	@ (8002750 <seclectmenu+0x18ec>)
 80024de:	f7fe f8f1 	bl	80006c4 <CLCD_SetCursor>
																CLCD_WriteString(&LCD1, "    THE 2 ");
 80024e2:	499e      	ldr	r1, [pc, #632]	@ (800275c <seclectmenu+0x18f8>)
 80024e4:	489a      	ldr	r0, [pc, #616]	@ (8002750 <seclectmenu+0x18ec>)
 80024e6:	f7fe f954 	bl	8000792 <CLCD_WriteString>
																break;
 80024ea:	e057      	b.n	800259c <seclectmenu+0x1738>
															case 2:
																CLCD_Clear(&LCD1);
 80024ec:	4898      	ldr	r0, [pc, #608]	@ (8002750 <seclectmenu+0x18ec>)
 80024ee:	f7fe f967 	bl	80007c0 <CLCD_Clear>
																CLCD_SetCursor(&LCD1, 0, 0);
 80024f2:	2200      	movs	r2, #0
 80024f4:	2100      	movs	r1, #0
 80024f6:	4896      	ldr	r0, [pc, #600]	@ (8002750 <seclectmenu+0x18ec>)
 80024f8:	f7fe f8e4 	bl	80006c4 <CLCD_SetCursor>
																CLCD_WriteString(&LCD1, "=>  THE 2 ");
 80024fc:	4998      	ldr	r1, [pc, #608]	@ (8002760 <seclectmenu+0x18fc>)
 80024fe:	4894      	ldr	r0, [pc, #592]	@ (8002750 <seclectmenu+0x18ec>)
 8002500:	f7fe f947 	bl	8000792 <CLCD_WriteString>
																CLCD_SetCursor(&LCD1, 0, 1);
 8002504:	2201      	movs	r2, #1
 8002506:	2100      	movs	r1, #0
 8002508:	4891      	ldr	r0, [pc, #580]	@ (8002750 <seclectmenu+0x18ec>)
 800250a:	f7fe f8db 	bl	80006c4 <CLCD_SetCursor>
																CLCD_WriteString(&LCD1, "    THE 3 ");
 800250e:	4995      	ldr	r1, [pc, #596]	@ (8002764 <seclectmenu+0x1900>)
 8002510:	488f      	ldr	r0, [pc, #572]	@ (8002750 <seclectmenu+0x18ec>)
 8002512:	f7fe f93e 	bl	8000792 <CLCD_WriteString>
																break;
 8002516:	e041      	b.n	800259c <seclectmenu+0x1738>
															case 3:
																CLCD_Clear(&LCD1);
 8002518:	488d      	ldr	r0, [pc, #564]	@ (8002750 <seclectmenu+0x18ec>)
 800251a:	f7fe f951 	bl	80007c0 <CLCD_Clear>
																CLCD_SetCursor(&LCD1, 0, 0);
 800251e:	2200      	movs	r2, #0
 8002520:	2100      	movs	r1, #0
 8002522:	488b      	ldr	r0, [pc, #556]	@ (8002750 <seclectmenu+0x18ec>)
 8002524:	f7fe f8ce 	bl	80006c4 <CLCD_SetCursor>
																CLCD_WriteString(&LCD1, "=>  THE 3 ");
 8002528:	498f      	ldr	r1, [pc, #572]	@ (8002768 <seclectmenu+0x1904>)
 800252a:	4889      	ldr	r0, [pc, #548]	@ (8002750 <seclectmenu+0x18ec>)
 800252c:	f7fe f931 	bl	8000792 <CLCD_WriteString>
																CLCD_SetCursor(&LCD1, 0, 1);
 8002530:	2201      	movs	r2, #1
 8002532:	2100      	movs	r1, #0
 8002534:	4886      	ldr	r0, [pc, #536]	@ (8002750 <seclectmenu+0x18ec>)
 8002536:	f7fe f8c5 	bl	80006c4 <CLCD_SetCursor>
																CLCD_WriteString(&LCD1, "    THE 4 ");
 800253a:	498c      	ldr	r1, [pc, #560]	@ (800276c <seclectmenu+0x1908>)
 800253c:	4884      	ldr	r0, [pc, #528]	@ (8002750 <seclectmenu+0x18ec>)
 800253e:	f7fe f928 	bl	8000792 <CLCD_WriteString>
																break;
 8002542:	e02b      	b.n	800259c <seclectmenu+0x1738>
															case 4:
																CLCD_Clear(&LCD1);
 8002544:	4882      	ldr	r0, [pc, #520]	@ (8002750 <seclectmenu+0x18ec>)
 8002546:	f7fe f93b 	bl	80007c0 <CLCD_Clear>
																CLCD_SetCursor(&LCD1, 0, 0);
 800254a:	2200      	movs	r2, #0
 800254c:	2100      	movs	r1, #0
 800254e:	4880      	ldr	r0, [pc, #512]	@ (8002750 <seclectmenu+0x18ec>)
 8002550:	f7fe f8b8 	bl	80006c4 <CLCD_SetCursor>
																CLCD_WriteString(&LCD1, "=>  THE 4 ");
 8002554:	4986      	ldr	r1, [pc, #536]	@ (8002770 <seclectmenu+0x190c>)
 8002556:	487e      	ldr	r0, [pc, #504]	@ (8002750 <seclectmenu+0x18ec>)
 8002558:	f7fe f91b 	bl	8000792 <CLCD_WriteString>
																CLCD_SetCursor(&LCD1, 0, 1);
 800255c:	2201      	movs	r2, #1
 800255e:	2100      	movs	r1, #0
 8002560:	487b      	ldr	r0, [pc, #492]	@ (8002750 <seclectmenu+0x18ec>)
 8002562:	f7fe f8af 	bl	80006c4 <CLCD_SetCursor>
																CLCD_WriteString(&LCD1, "    BACK ");
 8002566:	4983      	ldr	r1, [pc, #524]	@ (8002774 <seclectmenu+0x1910>)
 8002568:	4879      	ldr	r0, [pc, #484]	@ (8002750 <seclectmenu+0x18ec>)
 800256a:	f7fe f912 	bl	8000792 <CLCD_WriteString>
																break;
 800256e:	e015      	b.n	800259c <seclectmenu+0x1738>
															default:
																CLCD_Clear(&LCD1);
 8002570:	4877      	ldr	r0, [pc, #476]	@ (8002750 <seclectmenu+0x18ec>)
 8002572:	f7fe f925 	bl	80007c0 <CLCD_Clear>
																CLCD_SetCursor(&LCD1, 0, 0);
 8002576:	2200      	movs	r2, #0
 8002578:	2100      	movs	r1, #0
 800257a:	4875      	ldr	r0, [pc, #468]	@ (8002750 <seclectmenu+0x18ec>)
 800257c:	f7fe f8a2 	bl	80006c4 <CLCD_SetCursor>
																CLCD_WriteString(&LCD1, "    THE 4 ");
 8002580:	497a      	ldr	r1, [pc, #488]	@ (800276c <seclectmenu+0x1908>)
 8002582:	4873      	ldr	r0, [pc, #460]	@ (8002750 <seclectmenu+0x18ec>)
 8002584:	f7fe f905 	bl	8000792 <CLCD_WriteString>
																CLCD_SetCursor(&LCD1, 0, 1);
 8002588:	2201      	movs	r2, #1
 800258a:	2100      	movs	r1, #0
 800258c:	4870      	ldr	r0, [pc, #448]	@ (8002750 <seclectmenu+0x18ec>)
 800258e:	f7fe f899 	bl	80006c4 <CLCD_SetCursor>
																CLCD_WriteString(&LCD1, "=>  BACK");
 8002592:	4979      	ldr	r1, [pc, #484]	@ (8002778 <seclectmenu+0x1914>)
 8002594:	486e      	ldr	r0, [pc, #440]	@ (8002750 <seclectmenu+0x18ec>)
 8002596:	f7fe f8fc 	bl	8000792 <CLCD_WriteString>
																break;
 800259a:	bf00      	nop
															}
														}
														if (checkbuton(MENU_GPIO_Port, MENU_Pin) != 0)
 800259c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80025a0:	4876      	ldr	r0, [pc, #472]	@ (800277c <seclectmenu+0x1918>)
 80025a2:	f7fe fc11 	bl	8000dc8 <checkbuton>
 80025a6:	4603      	mov	r3, r0
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	f000 81a8 	beq.w	80028fe <seclectmenu+0x1a9a>
														{
															exitmenu = 15;
 80025ae:	4b67      	ldr	r3, [pc, #412]	@ (800274c <seclectmenu+0x18e8>)
 80025b0:	220f      	movs	r2, #15
 80025b2:	701a      	strb	r2, [r3, #0]
															uint8_t keyadd2 = (statusadd << 4) + statusadd2;
 80025b4:	7b3b      	ldrb	r3, [r7, #12]
 80025b6:	011b      	lsls	r3, r3, #4
 80025b8:	b2da      	uxtb	r2, r3
 80025ba:	7a3b      	ldrb	r3, [r7, #8]
 80025bc:	4413      	add	r3, r2
 80025be:	717b      	strb	r3, [r7, #5]
															switch (statusadd2)
 80025c0:	7a3b      	ldrb	r3, [r7, #8]
 80025c2:	3b01      	subs	r3, #1
 80025c4:	2b03      	cmp	r3, #3
 80025c6:	f200 8197 	bhi.w	80028f8 <seclectmenu+0x1a94>
 80025ca:	a201      	add	r2, pc, #4	@ (adr r2, 80025d0 <seclectmenu+0x176c>)
 80025cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025d0:	080025e1 	.word	0x080025e1
 80025d4:	08002697 	.word	0x08002697
 80025d8:	0800278d 	.word	0x0800278d
 80025dc:	08002843 	.word	0x08002843
															{
															case 1:
																if (CheckKey(keyadd2) == 0)
 80025e0:	797b      	ldrb	r3, [r7, #5]
 80025e2:	4618      	mov	r0, r3
 80025e4:	f000 fd8a 	bl	80030fc <CheckKey>
 80025e8:	4603      	mov	r3, r0
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d125      	bne.n	800263a <seclectmenu+0x17d6>
																{
																	CLCD_Clear(&LCD1);
 80025ee:	4858      	ldr	r0, [pc, #352]	@ (8002750 <seclectmenu+0x18ec>)
 80025f0:	f7fe f8e6 	bl	80007c0 <CLCD_Clear>
																	CLCD_SetCursor(&LCD1, 0, 0);
 80025f4:	2200      	movs	r2, #0
 80025f6:	2100      	movs	r1, #0
 80025f8:	4855      	ldr	r0, [pc, #340]	@ (8002750 <seclectmenu+0x18ec>)
 80025fa:	f7fe f863 	bl	80006c4 <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "CHUA CO THE 1 ");
 80025fe:	4960      	ldr	r1, [pc, #384]	@ (8002780 <seclectmenu+0x191c>)
 8002600:	4853      	ldr	r0, [pc, #332]	@ (8002750 <seclectmenu+0x18ec>)
 8002602:	f7fe f8c6 	bl	8000792 <CLCD_WriteString>
																	HAL_Delay(1000);
 8002606:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800260a:	f001 fb4d 	bl	8003ca8 <HAL_Delay>
																	CLCD_Clear(&LCD1);
 800260e:	4850      	ldr	r0, [pc, #320]	@ (8002750 <seclectmenu+0x18ec>)
 8002610:	f7fe f8d6 	bl	80007c0 <CLCD_Clear>
																	CLCD_SetCursor(&LCD1, 0, 0);
 8002614:	2200      	movs	r2, #0
 8002616:	2100      	movs	r1, #0
 8002618:	484d      	ldr	r0, [pc, #308]	@ (8002750 <seclectmenu+0x18ec>)
 800261a:	f7fe f853 	bl	80006c4 <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "=>  THE 1 ");
 800261e:	494e      	ldr	r1, [pc, #312]	@ (8002758 <seclectmenu+0x18f4>)
 8002620:	484b      	ldr	r0, [pc, #300]	@ (8002750 <seclectmenu+0x18ec>)
 8002622:	f7fe f8b6 	bl	8000792 <CLCD_WriteString>
																	CLCD_SetCursor(&LCD1, 0, 1);
 8002626:	2201      	movs	r2, #1
 8002628:	2100      	movs	r1, #0
 800262a:	4849      	ldr	r0, [pc, #292]	@ (8002750 <seclectmenu+0x18ec>)
 800262c:	f7fe f84a 	bl	80006c4 <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "    THE 2 ");
 8002630:	494a      	ldr	r1, [pc, #296]	@ (800275c <seclectmenu+0x18f8>)
 8002632:	4847      	ldr	r0, [pc, #284]	@ (8002750 <seclectmenu+0x18ec>)
 8002634:	f7fe f8ad 	bl	8000792 <CLCD_WriteString>
																	CLCD_SetCursor(&LCD1, 0, 0);
																	CLCD_WriteString(&LCD1, "=>  THE 1 ");
																	CLCD_SetCursor(&LCD1, 0, 1);
																	CLCD_WriteString(&LCD1, "    THE 2 ");
																}
																break;
 8002638:	e161      	b.n	80028fe <seclectmenu+0x1a9a>
																	removeuid(CheckKey(keyadd2));
 800263a:	797b      	ldrb	r3, [r7, #5]
 800263c:	4618      	mov	r0, r3
 800263e:	f000 fd5d 	bl	80030fc <CheckKey>
 8002642:	4603      	mov	r3, r0
 8002644:	4618      	mov	r0, r3
 8002646:	f000 fd87 	bl	8003158 <removeuid>
																	CLCD_Clear(&LCD1);
 800264a:	4841      	ldr	r0, [pc, #260]	@ (8002750 <seclectmenu+0x18ec>)
 800264c:	f7fe f8b8 	bl	80007c0 <CLCD_Clear>
																	CLCD_SetCursor(&LCD1, 0, 0);
 8002650:	2200      	movs	r2, #0
 8002652:	2100      	movs	r1, #0
 8002654:	483e      	ldr	r0, [pc, #248]	@ (8002750 <seclectmenu+0x18ec>)
 8002656:	f7fe f835 	bl	80006c4 <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "XOA THANH CONG");
 800265a:	494a      	ldr	r1, [pc, #296]	@ (8002784 <seclectmenu+0x1920>)
 800265c:	483c      	ldr	r0, [pc, #240]	@ (8002750 <seclectmenu+0x18ec>)
 800265e:	f7fe f898 	bl	8000792 <CLCD_WriteString>
																	HAL_Delay(1000);
 8002662:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002666:	f001 fb1f 	bl	8003ca8 <HAL_Delay>
																	CLCD_Clear(&LCD1);
 800266a:	4839      	ldr	r0, [pc, #228]	@ (8002750 <seclectmenu+0x18ec>)
 800266c:	f7fe f8a8 	bl	80007c0 <CLCD_Clear>
																	CLCD_SetCursor(&LCD1, 0, 0);
 8002670:	2200      	movs	r2, #0
 8002672:	2100      	movs	r1, #0
 8002674:	4836      	ldr	r0, [pc, #216]	@ (8002750 <seclectmenu+0x18ec>)
 8002676:	f7fe f825 	bl	80006c4 <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "=>  THE 1 ");
 800267a:	4937      	ldr	r1, [pc, #220]	@ (8002758 <seclectmenu+0x18f4>)
 800267c:	4834      	ldr	r0, [pc, #208]	@ (8002750 <seclectmenu+0x18ec>)
 800267e:	f7fe f888 	bl	8000792 <CLCD_WriteString>
																	CLCD_SetCursor(&LCD1, 0, 1);
 8002682:	2201      	movs	r2, #1
 8002684:	2100      	movs	r1, #0
 8002686:	4832      	ldr	r0, [pc, #200]	@ (8002750 <seclectmenu+0x18ec>)
 8002688:	f7fe f81c 	bl	80006c4 <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "    THE 2 ");
 800268c:	4933      	ldr	r1, [pc, #204]	@ (800275c <seclectmenu+0x18f8>)
 800268e:	4830      	ldr	r0, [pc, #192]	@ (8002750 <seclectmenu+0x18ec>)
 8002690:	f7fe f87f 	bl	8000792 <CLCD_WriteString>
																break;
 8002694:	e133      	b.n	80028fe <seclectmenu+0x1a9a>
															case 2:
																if (CheckKey(keyadd2) == 0)
 8002696:	797b      	ldrb	r3, [r7, #5]
 8002698:	4618      	mov	r0, r3
 800269a:	f000 fd2f 	bl	80030fc <CheckKey>
 800269e:	4603      	mov	r3, r0
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d125      	bne.n	80026f0 <seclectmenu+0x188c>
																{
																	CLCD_Clear(&LCD1);
 80026a4:	482a      	ldr	r0, [pc, #168]	@ (8002750 <seclectmenu+0x18ec>)
 80026a6:	f7fe f88b 	bl	80007c0 <CLCD_Clear>
																	CLCD_SetCursor(&LCD1, 0, 0);
 80026aa:	2200      	movs	r2, #0
 80026ac:	2100      	movs	r1, #0
 80026ae:	4828      	ldr	r0, [pc, #160]	@ (8002750 <seclectmenu+0x18ec>)
 80026b0:	f7fe f808 	bl	80006c4 <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "CHUA CO THE 2 ");
 80026b4:	4934      	ldr	r1, [pc, #208]	@ (8002788 <seclectmenu+0x1924>)
 80026b6:	4826      	ldr	r0, [pc, #152]	@ (8002750 <seclectmenu+0x18ec>)
 80026b8:	f7fe f86b 	bl	8000792 <CLCD_WriteString>
																	HAL_Delay(1000);
 80026bc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80026c0:	f001 faf2 	bl	8003ca8 <HAL_Delay>
																	CLCD_Clear(&LCD1);
 80026c4:	4822      	ldr	r0, [pc, #136]	@ (8002750 <seclectmenu+0x18ec>)
 80026c6:	f7fe f87b 	bl	80007c0 <CLCD_Clear>
																	CLCD_SetCursor(&LCD1, 0, 0);
 80026ca:	2200      	movs	r2, #0
 80026cc:	2100      	movs	r1, #0
 80026ce:	4820      	ldr	r0, [pc, #128]	@ (8002750 <seclectmenu+0x18ec>)
 80026d0:	f7fd fff8 	bl	80006c4 <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "=>  THE 2 ");
 80026d4:	4922      	ldr	r1, [pc, #136]	@ (8002760 <seclectmenu+0x18fc>)
 80026d6:	481e      	ldr	r0, [pc, #120]	@ (8002750 <seclectmenu+0x18ec>)
 80026d8:	f7fe f85b 	bl	8000792 <CLCD_WriteString>
																	CLCD_SetCursor(&LCD1, 0, 1);
 80026dc:	2201      	movs	r2, #1
 80026de:	2100      	movs	r1, #0
 80026e0:	481b      	ldr	r0, [pc, #108]	@ (8002750 <seclectmenu+0x18ec>)
 80026e2:	f7fd ffef 	bl	80006c4 <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "    THE 3 ");
 80026e6:	491f      	ldr	r1, [pc, #124]	@ (8002764 <seclectmenu+0x1900>)
 80026e8:	4819      	ldr	r0, [pc, #100]	@ (8002750 <seclectmenu+0x18ec>)
 80026ea:	f7fe f852 	bl	8000792 <CLCD_WriteString>
																	CLCD_SetCursor(&LCD1, 0, 0);
																	CLCD_WriteString(&LCD1, "=>  THE 2 ");
																	CLCD_SetCursor(&LCD1, 0, 1);
																	CLCD_WriteString(&LCD1, "    THE 3 ");
																}
																break;
 80026ee:	e106      	b.n	80028fe <seclectmenu+0x1a9a>
																	removeuid(CheckKey(keyadd2));
 80026f0:	797b      	ldrb	r3, [r7, #5]
 80026f2:	4618      	mov	r0, r3
 80026f4:	f000 fd02 	bl	80030fc <CheckKey>
 80026f8:	4603      	mov	r3, r0
 80026fa:	4618      	mov	r0, r3
 80026fc:	f000 fd2c 	bl	8003158 <removeuid>
																	CLCD_Clear(&LCD1);
 8002700:	4813      	ldr	r0, [pc, #76]	@ (8002750 <seclectmenu+0x18ec>)
 8002702:	f7fe f85d 	bl	80007c0 <CLCD_Clear>
																	CLCD_SetCursor(&LCD1, 0, 0);
 8002706:	2200      	movs	r2, #0
 8002708:	2100      	movs	r1, #0
 800270a:	4811      	ldr	r0, [pc, #68]	@ (8002750 <seclectmenu+0x18ec>)
 800270c:	f7fd ffda 	bl	80006c4 <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "XOA THANH CONG");
 8002710:	491c      	ldr	r1, [pc, #112]	@ (8002784 <seclectmenu+0x1920>)
 8002712:	480f      	ldr	r0, [pc, #60]	@ (8002750 <seclectmenu+0x18ec>)
 8002714:	f7fe f83d 	bl	8000792 <CLCD_WriteString>
																	HAL_Delay(1000);
 8002718:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800271c:	f001 fac4 	bl	8003ca8 <HAL_Delay>
																	CLCD_Clear(&LCD1);
 8002720:	480b      	ldr	r0, [pc, #44]	@ (8002750 <seclectmenu+0x18ec>)
 8002722:	f7fe f84d 	bl	80007c0 <CLCD_Clear>
																	CLCD_SetCursor(&LCD1, 0, 0);
 8002726:	2200      	movs	r2, #0
 8002728:	2100      	movs	r1, #0
 800272a:	4809      	ldr	r0, [pc, #36]	@ (8002750 <seclectmenu+0x18ec>)
 800272c:	f7fd ffca 	bl	80006c4 <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "=>  THE 2 ");
 8002730:	490b      	ldr	r1, [pc, #44]	@ (8002760 <seclectmenu+0x18fc>)
 8002732:	4807      	ldr	r0, [pc, #28]	@ (8002750 <seclectmenu+0x18ec>)
 8002734:	f7fe f82d 	bl	8000792 <CLCD_WriteString>
																	CLCD_SetCursor(&LCD1, 0, 1);
 8002738:	2201      	movs	r2, #1
 800273a:	2100      	movs	r1, #0
 800273c:	4804      	ldr	r0, [pc, #16]	@ (8002750 <seclectmenu+0x18ec>)
 800273e:	f7fd ffc1 	bl	80006c4 <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "    THE 3 ");
 8002742:	4908      	ldr	r1, [pc, #32]	@ (8002764 <seclectmenu+0x1900>)
 8002744:	4802      	ldr	r0, [pc, #8]	@ (8002750 <seclectmenu+0x18ec>)
 8002746:	f7fe f824 	bl	8000792 <CLCD_WriteString>
																break;
 800274a:	e0d8      	b.n	80028fe <seclectmenu+0x1a9a>
 800274c:	20000000 	.word	0x20000000
 8002750:	200000f4 	.word	0x200000f4
 8002754:	40010c00 	.word	0x40010c00
 8002758:	08005d8c 	.word	0x08005d8c
 800275c:	08005d98 	.word	0x08005d98
 8002760:	08005da4 	.word	0x08005da4
 8002764:	08005db0 	.word	0x08005db0
 8002768:	08005dbc 	.word	0x08005dbc
 800276c:	08005dc8 	.word	0x08005dc8
 8002770:	08005dd4 	.word	0x08005dd4
 8002774:	08005de0 	.word	0x08005de0
 8002778:	08005dec 	.word	0x08005dec
 800277c:	40010800 	.word	0x40010800
 8002780:	08005eb8 	.word	0x08005eb8
 8002784:	08005ec8 	.word	0x08005ec8
 8002788:	08005ed8 	.word	0x08005ed8
															case 3:
																if (CheckKey(keyadd2) == 0)
 800278c:	797b      	ldrb	r3, [r7, #5]
 800278e:	4618      	mov	r0, r3
 8002790:	f000 fcb4 	bl	80030fc <CheckKey>
 8002794:	4603      	mov	r3, r0
 8002796:	2b00      	cmp	r3, #0
 8002798:	d125      	bne.n	80027e6 <seclectmenu+0x1982>
																{
																	CLCD_Clear(&LCD1);
 800279a:	48b4      	ldr	r0, [pc, #720]	@ (8002a6c <seclectmenu+0x1c08>)
 800279c:	f7fe f810 	bl	80007c0 <CLCD_Clear>
																	CLCD_SetCursor(&LCD1, 0, 0);
 80027a0:	2200      	movs	r2, #0
 80027a2:	2100      	movs	r1, #0
 80027a4:	48b1      	ldr	r0, [pc, #708]	@ (8002a6c <seclectmenu+0x1c08>)
 80027a6:	f7fd ff8d 	bl	80006c4 <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "CHUA CO THE 3 ");
 80027aa:	49b1      	ldr	r1, [pc, #708]	@ (8002a70 <seclectmenu+0x1c0c>)
 80027ac:	48af      	ldr	r0, [pc, #700]	@ (8002a6c <seclectmenu+0x1c08>)
 80027ae:	f7fd fff0 	bl	8000792 <CLCD_WriteString>
																	HAL_Delay(1000);
 80027b2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80027b6:	f001 fa77 	bl	8003ca8 <HAL_Delay>
																	CLCD_Clear(&LCD1);
 80027ba:	48ac      	ldr	r0, [pc, #688]	@ (8002a6c <seclectmenu+0x1c08>)
 80027bc:	f7fe f800 	bl	80007c0 <CLCD_Clear>
																	CLCD_SetCursor(&LCD1, 0, 0);
 80027c0:	2200      	movs	r2, #0
 80027c2:	2100      	movs	r1, #0
 80027c4:	48a9      	ldr	r0, [pc, #676]	@ (8002a6c <seclectmenu+0x1c08>)
 80027c6:	f7fd ff7d 	bl	80006c4 <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "=>  THE 3 ");
 80027ca:	49aa      	ldr	r1, [pc, #680]	@ (8002a74 <seclectmenu+0x1c10>)
 80027cc:	48a7      	ldr	r0, [pc, #668]	@ (8002a6c <seclectmenu+0x1c08>)
 80027ce:	f7fd ffe0 	bl	8000792 <CLCD_WriteString>
																	CLCD_SetCursor(&LCD1, 0, 1);
 80027d2:	2201      	movs	r2, #1
 80027d4:	2100      	movs	r1, #0
 80027d6:	48a5      	ldr	r0, [pc, #660]	@ (8002a6c <seclectmenu+0x1c08>)
 80027d8:	f7fd ff74 	bl	80006c4 <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "    THE 4 ");
 80027dc:	49a6      	ldr	r1, [pc, #664]	@ (8002a78 <seclectmenu+0x1c14>)
 80027de:	48a3      	ldr	r0, [pc, #652]	@ (8002a6c <seclectmenu+0x1c08>)
 80027e0:	f7fd ffd7 	bl	8000792 <CLCD_WriteString>
																	CLCD_SetCursor(&LCD1, 0, 0);
																	CLCD_WriteString(&LCD1, "=>  THE 3 ");
																	CLCD_SetCursor(&LCD1, 0, 1);
																	CLCD_WriteString(&LCD1, "    THE 4 ");
																}
																break;
 80027e4:	e08b      	b.n	80028fe <seclectmenu+0x1a9a>
																	removeuid(CheckKey(keyadd2));
 80027e6:	797b      	ldrb	r3, [r7, #5]
 80027e8:	4618      	mov	r0, r3
 80027ea:	f000 fc87 	bl	80030fc <CheckKey>
 80027ee:	4603      	mov	r3, r0
 80027f0:	4618      	mov	r0, r3
 80027f2:	f000 fcb1 	bl	8003158 <removeuid>
																	CLCD_Clear(&LCD1);
 80027f6:	489d      	ldr	r0, [pc, #628]	@ (8002a6c <seclectmenu+0x1c08>)
 80027f8:	f7fd ffe2 	bl	80007c0 <CLCD_Clear>
																	CLCD_SetCursor(&LCD1, 0, 0);
 80027fc:	2200      	movs	r2, #0
 80027fe:	2100      	movs	r1, #0
 8002800:	489a      	ldr	r0, [pc, #616]	@ (8002a6c <seclectmenu+0x1c08>)
 8002802:	f7fd ff5f 	bl	80006c4 <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "XOA THANH CONG");
 8002806:	499d      	ldr	r1, [pc, #628]	@ (8002a7c <seclectmenu+0x1c18>)
 8002808:	4898      	ldr	r0, [pc, #608]	@ (8002a6c <seclectmenu+0x1c08>)
 800280a:	f7fd ffc2 	bl	8000792 <CLCD_WriteString>
																	HAL_Delay(1000);
 800280e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002812:	f001 fa49 	bl	8003ca8 <HAL_Delay>
																	CLCD_Clear(&LCD1);
 8002816:	4895      	ldr	r0, [pc, #596]	@ (8002a6c <seclectmenu+0x1c08>)
 8002818:	f7fd ffd2 	bl	80007c0 <CLCD_Clear>
																	CLCD_SetCursor(&LCD1, 0, 0);
 800281c:	2200      	movs	r2, #0
 800281e:	2100      	movs	r1, #0
 8002820:	4892      	ldr	r0, [pc, #584]	@ (8002a6c <seclectmenu+0x1c08>)
 8002822:	f7fd ff4f 	bl	80006c4 <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "=>  THE 3 ");
 8002826:	4993      	ldr	r1, [pc, #588]	@ (8002a74 <seclectmenu+0x1c10>)
 8002828:	4890      	ldr	r0, [pc, #576]	@ (8002a6c <seclectmenu+0x1c08>)
 800282a:	f7fd ffb2 	bl	8000792 <CLCD_WriteString>
																	CLCD_SetCursor(&LCD1, 0, 1);
 800282e:	2201      	movs	r2, #1
 8002830:	2100      	movs	r1, #0
 8002832:	488e      	ldr	r0, [pc, #568]	@ (8002a6c <seclectmenu+0x1c08>)
 8002834:	f7fd ff46 	bl	80006c4 <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "    THE 4 ");
 8002838:	498f      	ldr	r1, [pc, #572]	@ (8002a78 <seclectmenu+0x1c14>)
 800283a:	488c      	ldr	r0, [pc, #560]	@ (8002a6c <seclectmenu+0x1c08>)
 800283c:	f7fd ffa9 	bl	8000792 <CLCD_WriteString>
																break;
 8002840:	e05d      	b.n	80028fe <seclectmenu+0x1a9a>
															case 4:
																if (CheckKey(keyadd2) == 0)
 8002842:	797b      	ldrb	r3, [r7, #5]
 8002844:	4618      	mov	r0, r3
 8002846:	f000 fc59 	bl	80030fc <CheckKey>
 800284a:	4603      	mov	r3, r0
 800284c:	2b00      	cmp	r3, #0
 800284e:	d125      	bne.n	800289c <seclectmenu+0x1a38>
																{
																	CLCD_Clear(&LCD1);
 8002850:	4886      	ldr	r0, [pc, #536]	@ (8002a6c <seclectmenu+0x1c08>)
 8002852:	f7fd ffb5 	bl	80007c0 <CLCD_Clear>
																	CLCD_SetCursor(&LCD1, 0, 0);
 8002856:	2200      	movs	r2, #0
 8002858:	2100      	movs	r1, #0
 800285a:	4884      	ldr	r0, [pc, #528]	@ (8002a6c <seclectmenu+0x1c08>)
 800285c:	f7fd ff32 	bl	80006c4 <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "CHUA CO THE 4 ");
 8002860:	4987      	ldr	r1, [pc, #540]	@ (8002a80 <seclectmenu+0x1c1c>)
 8002862:	4882      	ldr	r0, [pc, #520]	@ (8002a6c <seclectmenu+0x1c08>)
 8002864:	f7fd ff95 	bl	8000792 <CLCD_WriteString>
																	HAL_Delay(1000);
 8002868:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800286c:	f001 fa1c 	bl	8003ca8 <HAL_Delay>
																	CLCD_Clear(&LCD1);
 8002870:	487e      	ldr	r0, [pc, #504]	@ (8002a6c <seclectmenu+0x1c08>)
 8002872:	f7fd ffa5 	bl	80007c0 <CLCD_Clear>
																	CLCD_SetCursor(&LCD1, 0, 0);
 8002876:	2200      	movs	r2, #0
 8002878:	2100      	movs	r1, #0
 800287a:	487c      	ldr	r0, [pc, #496]	@ (8002a6c <seclectmenu+0x1c08>)
 800287c:	f7fd ff22 	bl	80006c4 <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "=>  THE 4 ");
 8002880:	4980      	ldr	r1, [pc, #512]	@ (8002a84 <seclectmenu+0x1c20>)
 8002882:	487a      	ldr	r0, [pc, #488]	@ (8002a6c <seclectmenu+0x1c08>)
 8002884:	f7fd ff85 	bl	8000792 <CLCD_WriteString>
																	CLCD_SetCursor(&LCD1, 0, 1);
 8002888:	2201      	movs	r2, #1
 800288a:	2100      	movs	r1, #0
 800288c:	4877      	ldr	r0, [pc, #476]	@ (8002a6c <seclectmenu+0x1c08>)
 800288e:	f7fd ff19 	bl	80006c4 <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "    BACK ");
 8002892:	497d      	ldr	r1, [pc, #500]	@ (8002a88 <seclectmenu+0x1c24>)
 8002894:	4875      	ldr	r0, [pc, #468]	@ (8002a6c <seclectmenu+0x1c08>)
 8002896:	f7fd ff7c 	bl	8000792 <CLCD_WriteString>
																	CLCD_SetCursor(&LCD1, 0, 0);
																	CLCD_WriteString(&LCD1, "=>  THE 4 ");
																	CLCD_SetCursor(&LCD1, 0, 1);
																	CLCD_WriteString(&LCD1, "    BACK ");
																}
																break;
 800289a:	e030      	b.n	80028fe <seclectmenu+0x1a9a>
																	removeuid(CheckKey(keyadd2));
 800289c:	797b      	ldrb	r3, [r7, #5]
 800289e:	4618      	mov	r0, r3
 80028a0:	f000 fc2c 	bl	80030fc <CheckKey>
 80028a4:	4603      	mov	r3, r0
 80028a6:	4618      	mov	r0, r3
 80028a8:	f000 fc56 	bl	8003158 <removeuid>
																	CLCD_Clear(&LCD1);
 80028ac:	486f      	ldr	r0, [pc, #444]	@ (8002a6c <seclectmenu+0x1c08>)
 80028ae:	f7fd ff87 	bl	80007c0 <CLCD_Clear>
																	CLCD_SetCursor(&LCD1, 0, 0);
 80028b2:	2200      	movs	r2, #0
 80028b4:	2100      	movs	r1, #0
 80028b6:	486d      	ldr	r0, [pc, #436]	@ (8002a6c <seclectmenu+0x1c08>)
 80028b8:	f7fd ff04 	bl	80006c4 <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "XOA THANH CONG");
 80028bc:	496f      	ldr	r1, [pc, #444]	@ (8002a7c <seclectmenu+0x1c18>)
 80028be:	486b      	ldr	r0, [pc, #428]	@ (8002a6c <seclectmenu+0x1c08>)
 80028c0:	f7fd ff67 	bl	8000792 <CLCD_WriteString>
																	HAL_Delay(1000);
 80028c4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80028c8:	f001 f9ee 	bl	8003ca8 <HAL_Delay>
																	CLCD_Clear(&LCD1);
 80028cc:	4867      	ldr	r0, [pc, #412]	@ (8002a6c <seclectmenu+0x1c08>)
 80028ce:	f7fd ff77 	bl	80007c0 <CLCD_Clear>
																	CLCD_SetCursor(&LCD1, 0, 0);
 80028d2:	2200      	movs	r2, #0
 80028d4:	2100      	movs	r1, #0
 80028d6:	4865      	ldr	r0, [pc, #404]	@ (8002a6c <seclectmenu+0x1c08>)
 80028d8:	f7fd fef4 	bl	80006c4 <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "=>  THE 4 ");
 80028dc:	4969      	ldr	r1, [pc, #420]	@ (8002a84 <seclectmenu+0x1c20>)
 80028de:	4863      	ldr	r0, [pc, #396]	@ (8002a6c <seclectmenu+0x1c08>)
 80028e0:	f7fd ff57 	bl	8000792 <CLCD_WriteString>
																	CLCD_SetCursor(&LCD1, 0, 1);
 80028e4:	2201      	movs	r2, #1
 80028e6:	2100      	movs	r1, #0
 80028e8:	4860      	ldr	r0, [pc, #384]	@ (8002a6c <seclectmenu+0x1c08>)
 80028ea:	f7fd feeb 	bl	80006c4 <CLCD_SetCursor>
																	CLCD_WriteString(&LCD1, "    BACK ");
 80028ee:	4966      	ldr	r1, [pc, #408]	@ (8002a88 <seclectmenu+0x1c24>)
 80028f0:	485e      	ldr	r0, [pc, #376]	@ (8002a6c <seclectmenu+0x1c08>)
 80028f2:	f7fd ff4e 	bl	8000792 <CLCD_WriteString>
																break;
 80028f6:	e002      	b.n	80028fe <seclectmenu+0x1a9a>
															default:
																back12 = 0;
 80028f8:	2300      	movs	r3, #0
 80028fa:	71fb      	strb	r3, [r7, #7]
																break;
 80028fc:	bf00      	nop
													while (back12 == 1)
 80028fe:	79fb      	ldrb	r3, [r7, #7]
 8002900:	2b01      	cmp	r3, #1
 8002902:	f43f adab 	beq.w	800245c <seclectmenu+0x15f8>
															}
														}
													}
													CLCD_Clear(&LCD1);
 8002906:	4859      	ldr	r0, [pc, #356]	@ (8002a6c <seclectmenu+0x1c08>)
 8002908:	f7fd ff5a 	bl	80007c0 <CLCD_Clear>
													CLCD_SetCursor(&LCD1, 0, 0);
 800290c:	2200      	movs	r2, #0
 800290e:	2100      	movs	r1, #0
 8002910:	4856      	ldr	r0, [pc, #344]	@ (8002a6c <seclectmenu+0x1c08>)
 8002912:	f7fd fed7 	bl	80006c4 <CLCD_SetCursor>
													CLCD_WriteString(&LCD1, "   THE NGUOI LON");
 8002916:	495d      	ldr	r1, [pc, #372]	@ (8002a8c <seclectmenu+0x1c28>)
 8002918:	4854      	ldr	r0, [pc, #336]	@ (8002a6c <seclectmenu+0x1c08>)
 800291a:	f7fd ff3a 	bl	8000792 <CLCD_WriteString>
													CLCD_SetCursor(&LCD1, 0, 1);
 800291e:	2201      	movs	r2, #1
 8002920:	2100      	movs	r1, #0
 8002922:	4852      	ldr	r0, [pc, #328]	@ (8002a6c <seclectmenu+0x1c08>)
 8002924:	f7fd fece 	bl	80006c4 <CLCD_SetCursor>
													CLCD_WriteString(&LCD1, "=> THE TRE EM");
 8002928:	4959      	ldr	r1, [pc, #356]	@ (8002a90 <seclectmenu+0x1c2c>)
 800292a:	4850      	ldr	r0, [pc, #320]	@ (8002a6c <seclectmenu+0x1c08>)
 800292c:	f7fd ff31 	bl	8000792 <CLCD_WriteString>
													break;
 8002930:	e002      	b.n	8002938 <seclectmenu+0x1ad4>
												default:
													backrm10 = 0;
 8002932:	2300      	movs	r3, #0
 8002934:	72fb      	strb	r3, [r7, #11]
													break;
 8002936:	bf00      	nop
										while (backrm10 == 1)
 8002938:	7afb      	ldrb	r3, [r7, #11]
 800293a:	2b01      	cmp	r3, #1
 800293c:	f43f aa00 	beq.w	8001d40 <seclectmenu+0xedc>
												}
											}
										}
										CLCD_Clear(&LCD1);
 8002940:	484a      	ldr	r0, [pc, #296]	@ (8002a6c <seclectmenu+0x1c08>)
 8002942:	f7fd ff3d 	bl	80007c0 <CLCD_Clear>
										CLCD_SetCursor(&LCD1, 0, 0);
 8002946:	2200      	movs	r2, #0
 8002948:	2100      	movs	r1, #0
 800294a:	4848      	ldr	r0, [pc, #288]	@ (8002a6c <seclectmenu+0x1c08>)
 800294c:	f7fd feba 	bl	80006c4 <CLCD_SetCursor>
										CLCD_WriteString(&LCD1, "=> CHON THE");
 8002950:	4950      	ldr	r1, [pc, #320]	@ (8002a94 <seclectmenu+0x1c30>)
 8002952:	4846      	ldr	r0, [pc, #280]	@ (8002a6c <seclectmenu+0x1c08>)
 8002954:	f7fd ff1d 	bl	8000792 <CLCD_WriteString>
										CLCD_SetCursor(&LCD1, 0, 1);
 8002958:	2201      	movs	r2, #1
 800295a:	2100      	movs	r1, #0
 800295c:	4843      	ldr	r0, [pc, #268]	@ (8002a6c <seclectmenu+0x1c08>)
 800295e:	f7fd feb1 	bl	80006c4 <CLCD_SetCursor>
										CLCD_WriteString(&LCD1, "   QUET THE");
 8002962:	494d      	ldr	r1, [pc, #308]	@ (8002a98 <seclectmenu+0x1c34>)
 8002964:	4841      	ldr	r0, [pc, #260]	@ (8002a6c <seclectmenu+0x1c08>)
 8002966:	f7fd ff14 	bl	8000792 <CLCD_WriteString>
										break;
 800296a:	e0ef      	b.n	8002b4c <seclectmenu+0x1ce8>
									case 1:
										CLCD_Clear(&LCD1);
 800296c:	483f      	ldr	r0, [pc, #252]	@ (8002a6c <seclectmenu+0x1c08>)
 800296e:	f7fd ff27 	bl	80007c0 <CLCD_Clear>
										CLCD_SetCursor(&LCD1, 0, 0);
 8002972:	2200      	movs	r2, #0
 8002974:	2100      	movs	r1, #0
 8002976:	483d      	ldr	r0, [pc, #244]	@ (8002a6c <seclectmenu+0x1c08>)
 8002978:	f7fd fea4 	bl	80006c4 <CLCD_SetCursor>
										CLCD_WriteString(&LCD1, "QUET THE");
 800297c:	4947      	ldr	r1, [pc, #284]	@ (8002a9c <seclectmenu+0x1c38>)
 800297e:	483b      	ldr	r0, [pc, #236]	@ (8002a6c <seclectmenu+0x1c08>)
 8002980:	f7fd ff07 	bl	8000792 <CLCD_WriteString>
										CLCD_SetCursor(&LCD1, 0, 1);
 8002984:	2201      	movs	r2, #1
 8002986:	2100      	movs	r1, #0
 8002988:	4838      	ldr	r0, [pc, #224]	@ (8002a6c <seclectmenu+0x1c08>)
 800298a:	f7fd fe9b 	bl	80006c4 <CLCD_SetCursor>
										CLCD_WriteString(&LCD1, "=>  BACK");
 800298e:	4944      	ldr	r1, [pc, #272]	@ (8002aa0 <seclectmenu+0x1c3c>)
 8002990:	4836      	ldr	r0, [pc, #216]	@ (8002a6c <seclectmenu+0x1c08>)
 8002992:	f7fd fefe 	bl	8000792 <CLCD_WriteString>
										uint8_t rmquet = 1;
 8002996:	2301      	movs	r3, #1
 8002998:	71bb      	strb	r3, [r7, #6]
										while (rmquet)
 800299a:	e0ba      	b.n	8002b12 <seclectmenu+0x1cae>
										{
											if (TM_MFRC522_Check(CardID) == MI_OK)
 800299c:	4841      	ldr	r0, [pc, #260]	@ (8002aa4 <seclectmenu+0x1c40>)
 800299e:	f000 fdcd 	bl	800353c <TM_MFRC522_Check>
 80029a2:	4603      	mov	r3, r0
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	f040 80aa 	bne.w	8002afe <seclectmenu+0x1c9a>
											{
												HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 1);
 80029aa:	2201      	movs	r2, #1
 80029ac:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80029b0:	483d      	ldr	r0, [pc, #244]	@ (8002aa8 <seclectmenu+0x1c44>)
 80029b2:	f001 fe46 	bl	8004642 <HAL_GPIO_WritePin>
												HAL_GPIO_WritePin(LOA_GPIO_Port, LOA_Pin, 1);
 80029b6:	2201      	movs	r2, #1
 80029b8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80029bc:	483a      	ldr	r0, [pc, #232]	@ (8002aa8 <seclectmenu+0x1c44>)
 80029be:	f001 fe40 	bl	8004642 <HAL_GPIO_WritePin>
												HAL_Delay(delayloa);
 80029c2:	4b3a      	ldr	r3, [pc, #232]	@ (8002aac <seclectmenu+0x1c48>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4618      	mov	r0, r3
 80029c8:	f001 f96e 	bl	8003ca8 <HAL_Delay>
												HAL_GPIO_WritePin(LOA_GPIO_Port, LOA_Pin, 0);
 80029cc:	2200      	movs	r2, #0
 80029ce:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80029d2:	4835      	ldr	r0, [pc, #212]	@ (8002aa8 <seclectmenu+0x1c44>)
 80029d4:	f001 fe35 	bl	8004642 <HAL_GPIO_WritePin>
												HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);
 80029d8:	2200      	movs	r2, #0
 80029da:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80029de:	4832      	ldr	r0, [pc, #200]	@ (8002aa8 <seclectmenu+0x1c44>)
 80029e0:	f001 fe2f 	bl	8004642 <HAL_GPIO_WritePin>
												if (CheckListUID(CardID) != 0)
 80029e4:	482f      	ldr	r0, [pc, #188]	@ (8002aa4 <seclectmenu+0x1c40>)
 80029e6:	f000 f963 	bl	8002cb0 <CheckListUID>
 80029ea:	4603      	mov	r3, r0
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d061      	beq.n	8002ab4 <seclectmenu+0x1c50>
												{
													removeuid(CheckKey(CheckListUID(CardID)));
 80029f0:	482c      	ldr	r0, [pc, #176]	@ (8002aa4 <seclectmenu+0x1c40>)
 80029f2:	f000 f95d 	bl	8002cb0 <CheckListUID>
 80029f6:	4603      	mov	r3, r0
 80029f8:	4618      	mov	r0, r3
 80029fa:	f000 fb7f 	bl	80030fc <CheckKey>
 80029fe:	4603      	mov	r3, r0
 8002a00:	4618      	mov	r0, r3
 8002a02:	f000 fba9 	bl	8003158 <removeuid>
													CLCD_Clear(&LCD1);
 8002a06:	4819      	ldr	r0, [pc, #100]	@ (8002a6c <seclectmenu+0x1c08>)
 8002a08:	f7fd feda 	bl	80007c0 <CLCD_Clear>
													CLCD_SetCursor(&LCD1, 0, 0);
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	2100      	movs	r1, #0
 8002a10:	4816      	ldr	r0, [pc, #88]	@ (8002a6c <seclectmenu+0x1c08>)
 8002a12:	f7fd fe57 	bl	80006c4 <CLCD_SetCursor>
													CLCD_WriteString(&LCD1, "XOA THANH CONG");
 8002a16:	4919      	ldr	r1, [pc, #100]	@ (8002a7c <seclectmenu+0x1c18>)
 8002a18:	4814      	ldr	r0, [pc, #80]	@ (8002a6c <seclectmenu+0x1c08>)
 8002a1a:	f7fd feba 	bl	8000792 <CLCD_WriteString>
													HAL_Delay(1000);
 8002a1e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002a22:	f001 f941 	bl	8003ca8 <HAL_Delay>
													if (checkcountUID() == 0)
 8002a26:	f000 f973 	bl	8002d10 <checkcountUID>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d107      	bne.n	8002a40 <seclectmenu+0x1bdc>
													{
														startadd();
 8002a30:	f000 fba0 	bl	8003174 <startadd>
														rmquet = 1;
 8002a34:	2301      	movs	r3, #1
 8002a36:	71bb      	strb	r3, [r7, #6]
														exitmenu = 0;
 8002a38:	4b1d      	ldr	r3, [pc, #116]	@ (8002ab0 <seclectmenu+0x1c4c>)
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	701a      	strb	r2, [r3, #0]
														return;
 8002a3e:	e0ec      	b.n	8002c1a <seclectmenu+0x1db6>
													}else{
														CLCD_Clear(&LCD1);
 8002a40:	480a      	ldr	r0, [pc, #40]	@ (8002a6c <seclectmenu+0x1c08>)
 8002a42:	f7fd febd 	bl	80007c0 <CLCD_Clear>
														CLCD_SetCursor(&LCD1, 0, 0);
 8002a46:	2200      	movs	r2, #0
 8002a48:	2100      	movs	r1, #0
 8002a4a:	4808      	ldr	r0, [pc, #32]	@ (8002a6c <seclectmenu+0x1c08>)
 8002a4c:	f7fd fe3a 	bl	80006c4 <CLCD_SetCursor>
														CLCD_WriteString(&LCD1, "QUET THE");
 8002a50:	4912      	ldr	r1, [pc, #72]	@ (8002a9c <seclectmenu+0x1c38>)
 8002a52:	4806      	ldr	r0, [pc, #24]	@ (8002a6c <seclectmenu+0x1c08>)
 8002a54:	f7fd fe9d 	bl	8000792 <CLCD_WriteString>
														CLCD_SetCursor(&LCD1, 0, 1);
 8002a58:	2201      	movs	r2, #1
 8002a5a:	2100      	movs	r1, #0
 8002a5c:	4803      	ldr	r0, [pc, #12]	@ (8002a6c <seclectmenu+0x1c08>)
 8002a5e:	f7fd fe31 	bl	80006c4 <CLCD_SetCursor>
														CLCD_WriteString(&LCD1, "=>  BACK");
 8002a62:	490f      	ldr	r1, [pc, #60]	@ (8002aa0 <seclectmenu+0x1c3c>)
 8002a64:	4801      	ldr	r0, [pc, #4]	@ (8002a6c <seclectmenu+0x1c08>)
 8002a66:	f7fd fe94 	bl	8000792 <CLCD_WriteString>
 8002a6a:	e048      	b.n	8002afe <seclectmenu+0x1c9a>
 8002a6c:	200000f4 	.word	0x200000f4
 8002a70:	08005ee8 	.word	0x08005ee8
 8002a74:	08005dbc 	.word	0x08005dbc
 8002a78:	08005dc8 	.word	0x08005dc8
 8002a7c:	08005ec8 	.word	0x08005ec8
 8002a80:	08005ef8 	.word	0x08005ef8
 8002a84:	08005dd4 	.word	0x08005dd4
 8002a88:	08005de0 	.word	0x08005de0
 8002a8c:	08005d3c 	.word	0x08005d3c
 8002a90:	08005d74 	.word	0x08005d74
 8002a94:	08005e88 	.word	0x08005e88
 8002a98:	08005e94 	.word	0x08005e94
 8002a9c:	08005f08 	.word	0x08005f08
 8002aa0:	08005dec 	.word	0x08005dec
 8002aa4:	200000e4 	.word	0x200000e4
 8002aa8:	40010c00 	.word	0x40010c00
 8002aac:	20000018 	.word	0x20000018
 8002ab0:	20000000 	.word	0x20000000
													}

												}
												else
												{
													CLCD_Clear(&LCD1);
 8002ab4:	485a      	ldr	r0, [pc, #360]	@ (8002c20 <seclectmenu+0x1dbc>)
 8002ab6:	f7fd fe83 	bl	80007c0 <CLCD_Clear>
													CLCD_SetCursor(&LCD1, 0, 0);
 8002aba:	2200      	movs	r2, #0
 8002abc:	2100      	movs	r1, #0
 8002abe:	4858      	ldr	r0, [pc, #352]	@ (8002c20 <seclectmenu+0x1dbc>)
 8002ac0:	f7fd fe00 	bl	80006c4 <CLCD_SetCursor>
													CLCD_WriteString(&LCD1, "THE CHUA THEM");
 8002ac4:	4957      	ldr	r1, [pc, #348]	@ (8002c24 <seclectmenu+0x1dc0>)
 8002ac6:	4856      	ldr	r0, [pc, #344]	@ (8002c20 <seclectmenu+0x1dbc>)
 8002ac8:	f7fd fe63 	bl	8000792 <CLCD_WriteString>
													HAL_Delay(1000);
 8002acc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002ad0:	f001 f8ea 	bl	8003ca8 <HAL_Delay>
													CLCD_Clear(&LCD1);
 8002ad4:	4852      	ldr	r0, [pc, #328]	@ (8002c20 <seclectmenu+0x1dbc>)
 8002ad6:	f7fd fe73 	bl	80007c0 <CLCD_Clear>
													CLCD_SetCursor(&LCD1, 0, 0);
 8002ada:	2200      	movs	r2, #0
 8002adc:	2100      	movs	r1, #0
 8002ade:	4850      	ldr	r0, [pc, #320]	@ (8002c20 <seclectmenu+0x1dbc>)
 8002ae0:	f7fd fdf0 	bl	80006c4 <CLCD_SetCursor>
													CLCD_WriteString(&LCD1, "QUET THE");
 8002ae4:	4950      	ldr	r1, [pc, #320]	@ (8002c28 <seclectmenu+0x1dc4>)
 8002ae6:	484e      	ldr	r0, [pc, #312]	@ (8002c20 <seclectmenu+0x1dbc>)
 8002ae8:	f7fd fe53 	bl	8000792 <CLCD_WriteString>
													CLCD_SetCursor(&LCD1, 0, 1);
 8002aec:	2201      	movs	r2, #1
 8002aee:	2100      	movs	r1, #0
 8002af0:	484b      	ldr	r0, [pc, #300]	@ (8002c20 <seclectmenu+0x1dbc>)
 8002af2:	f7fd fde7 	bl	80006c4 <CLCD_SetCursor>
													CLCD_WriteString(&LCD1, "=>  BACK");
 8002af6:	494d      	ldr	r1, [pc, #308]	@ (8002c2c <seclectmenu+0x1dc8>)
 8002af8:	4849      	ldr	r0, [pc, #292]	@ (8002c20 <seclectmenu+0x1dbc>)
 8002afa:	f7fd fe4a 	bl	8000792 <CLCD_WriteString>
												}
											}
											if (checkbuton(MENU_GPIO_Port, MENU_Pin) == 1)
 8002afe:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002b02:	484b      	ldr	r0, [pc, #300]	@ (8002c30 <seclectmenu+0x1dcc>)
 8002b04:	f7fe f960 	bl	8000dc8 <checkbuton>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	2b01      	cmp	r3, #1
 8002b0c:	d101      	bne.n	8002b12 <seclectmenu+0x1cae>
											{
												rmquet = 0;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	71bb      	strb	r3, [r7, #6]
										while (rmquet)
 8002b12:	79bb      	ldrb	r3, [r7, #6]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	f47f af41 	bne.w	800299c <seclectmenu+0x1b38>
											}
										}
										CLCD_Clear(&LCD1);
 8002b1a:	4841      	ldr	r0, [pc, #260]	@ (8002c20 <seclectmenu+0x1dbc>)
 8002b1c:	f7fd fe50 	bl	80007c0 <CLCD_Clear>
										CLCD_SetCursor(&LCD1, 0, 0);
 8002b20:	2200      	movs	r2, #0
 8002b22:	2100      	movs	r1, #0
 8002b24:	483e      	ldr	r0, [pc, #248]	@ (8002c20 <seclectmenu+0x1dbc>)
 8002b26:	f7fd fdcd 	bl	80006c4 <CLCD_SetCursor>
										CLCD_WriteString(&LCD1, "   CHON THE");
 8002b2a:	4942      	ldr	r1, [pc, #264]	@ (8002c34 <seclectmenu+0x1dd0>)
 8002b2c:	483c      	ldr	r0, [pc, #240]	@ (8002c20 <seclectmenu+0x1dbc>)
 8002b2e:	f7fd fe30 	bl	8000792 <CLCD_WriteString>
										CLCD_SetCursor(&LCD1, 0, 1);
 8002b32:	2201      	movs	r2, #1
 8002b34:	2100      	movs	r1, #0
 8002b36:	483a      	ldr	r0, [pc, #232]	@ (8002c20 <seclectmenu+0x1dbc>)
 8002b38:	f7fd fdc4 	bl	80006c4 <CLCD_SetCursor>
										CLCD_WriteString(&LCD1, "=> QUET THE");
 8002b3c:	493e      	ldr	r1, [pc, #248]	@ (8002c38 <seclectmenu+0x1dd4>)
 8002b3e:	4838      	ldr	r0, [pc, #224]	@ (8002c20 <seclectmenu+0x1dbc>)
 8002b40:	f7fd fe27 	bl	8000792 <CLCD_WriteString>
										break;
 8002b44:	e002      	b.n	8002b4c <seclectmenu+0x1ce8>
									default:
										backrm1 = 0;
 8002b46:	2300      	movs	r3, #0
 8002b48:	737b      	strb	r3, [r7, #13]
										break;
 8002b4a:	bf00      	nop
							while (backrm1 == 1)
 8002b4c:	7b7b      	ldrb	r3, [r7, #13]
 8002b4e:	2b01      	cmp	r3, #1
 8002b50:	f43f a860 	beq.w	8001c14 <seclectmenu+0xdb0>
									}
								}
							}
							CLCD_Clear(&LCD1);
 8002b54:	4832      	ldr	r0, [pc, #200]	@ (8002c20 <seclectmenu+0x1dbc>)
 8002b56:	f7fd fe33 	bl	80007c0 <CLCD_Clear>
							CLCD_SetCursor(&LCD1, 0, 0);
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	2100      	movs	r1, #0
 8002b5e:	4830      	ldr	r0, [pc, #192]	@ (8002c20 <seclectmenu+0x1dbc>)
 8002b60:	f7fd fdb0 	bl	80006c4 <CLCD_SetCursor>
							CLCD_WriteString(&LCD1, "=> XOA 1 THE");
 8002b64:	4935      	ldr	r1, [pc, #212]	@ (8002c3c <seclectmenu+0x1dd8>)
 8002b66:	482e      	ldr	r0, [pc, #184]	@ (8002c20 <seclectmenu+0x1dbc>)
 8002b68:	f7fd fe13 	bl	8000792 <CLCD_WriteString>
							CLCD_SetCursor(&LCD1, 0, 1);
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	2100      	movs	r1, #0
 8002b70:	482b      	ldr	r0, [pc, #172]	@ (8002c20 <seclectmenu+0x1dbc>)
 8002b72:	f7fd fda7 	bl	80006c4 <CLCD_SetCursor>
							CLCD_WriteString(&LCD1, "   XOA TAT CA");
 8002b76:	4932      	ldr	r1, [pc, #200]	@ (8002c40 <seclectmenu+0x1ddc>)
 8002b78:	4829      	ldr	r0, [pc, #164]	@ (8002c20 <seclectmenu+0x1dbc>)
 8002b7a:	f7fd fe0a 	bl	8000792 <CLCD_WriteString>
							break;
 8002b7e:	e00a      	b.n	8002b96 <seclectmenu+0x1d32>
						case 1:
							resetflash();
 8002b80:	f000 fc6e 	bl	8003460 <resetflash>
							startadd();
 8002b84:	f000 faf6 	bl	8003174 <startadd>
							exitmenu = 0;
 8002b88:	4b2e      	ldr	r3, [pc, #184]	@ (8002c44 <seclectmenu+0x1de0>)
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	701a      	strb	r2, [r3, #0]
							break;
 8002b8e:	e002      	b.n	8002b96 <seclectmenu+0x1d32>
						default:
							backrm = 0;
 8002b90:	2300      	movs	r3, #0
 8002b92:	73fb      	strb	r3, [r7, #15]
							break;
 8002b94:	bf00      	nop
				while (backrm == 1)
 8002b96:	7bfb      	ldrb	r3, [r7, #15]
 8002b98:	2b01      	cmp	r3, #1
 8002b9a:	f43e af79 	beq.w	8001a90 <seclectmenu+0xc2c>
						}
					}
				}
				CLCD_Clear(&LCD1);
 8002b9e:	4820      	ldr	r0, [pc, #128]	@ (8002c20 <seclectmenu+0x1dbc>)
 8002ba0:	f7fd fe0e 	bl	80007c0 <CLCD_Clear>
				CLCD_SetCursor(&LCD1, 0, 0);
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	2100      	movs	r1, #0
 8002ba8:	481d      	ldr	r0, [pc, #116]	@ (8002c20 <seclectmenu+0x1dbc>)
 8002baa:	f7fd fd8b 	bl	80006c4 <CLCD_SetCursor>
				CLCD_WriteString(&LCD1, "    THEM THE");
 8002bae:	4926      	ldr	r1, [pc, #152]	@ (8002c48 <seclectmenu+0x1de4>)
 8002bb0:	481b      	ldr	r0, [pc, #108]	@ (8002c20 <seclectmenu+0x1dbc>)
 8002bb2:	f7fd fdee 	bl	8000792 <CLCD_WriteString>
				CLCD_SetCursor(&LCD1, 0, 1);
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	2100      	movs	r1, #0
 8002bba:	4819      	ldr	r0, [pc, #100]	@ (8002c20 <seclectmenu+0x1dbc>)
 8002bbc:	f7fd fd82 	bl	80006c4 <CLCD_SetCursor>
				CLCD_WriteString(&LCD1, "=>  XOA THE");
 8002bc0:	4922      	ldr	r1, [pc, #136]	@ (8002c4c <seclectmenu+0x1de8>)
 8002bc2:	4817      	ldr	r0, [pc, #92]	@ (8002c20 <seclectmenu+0x1dbc>)
 8002bc4:	f7fd fde5 	bl	8000792 <CLCD_WriteString>
				break;
 8002bc8:	e01b      	b.n	8002c02 <seclectmenu+0x1d9e>
			case 2:
				checkthe();
 8002bca:	f000 f985 	bl	8002ed8 <checkthe>
				CLCD_Clear(&LCD1);
 8002bce:	4814      	ldr	r0, [pc, #80]	@ (8002c20 <seclectmenu+0x1dbc>)
 8002bd0:	f7fd fdf6 	bl	80007c0 <CLCD_Clear>
				CLCD_SetCursor(&LCD1, 0, 0);
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	2100      	movs	r1, #0
 8002bd8:	4811      	ldr	r0, [pc, #68]	@ (8002c20 <seclectmenu+0x1dbc>)
 8002bda:	f7fd fd73 	bl	80006c4 <CLCD_SetCursor>
				CLCD_WriteString(&LCD1, "    XOA THE");
 8002bde:	491c      	ldr	r1, [pc, #112]	@ (8002c50 <seclectmenu+0x1dec>)
 8002be0:	480f      	ldr	r0, [pc, #60]	@ (8002c20 <seclectmenu+0x1dbc>)
 8002be2:	f7fd fdd6 	bl	8000792 <CLCD_WriteString>
				CLCD_SetCursor(&LCD1, 0, 1);
 8002be6:	2201      	movs	r2, #1
 8002be8:	2100      	movs	r1, #0
 8002bea:	480d      	ldr	r0, [pc, #52]	@ (8002c20 <seclectmenu+0x1dbc>)
 8002bec:	f7fd fd6a 	bl	80006c4 <CLCD_SetCursor>
				CLCD_WriteString(&LCD1, "=>  TRA THE");
 8002bf0:	4918      	ldr	r1, [pc, #96]	@ (8002c54 <seclectmenu+0x1df0>)
 8002bf2:	480b      	ldr	r0, [pc, #44]	@ (8002c20 <seclectmenu+0x1dbc>)
 8002bf4:	f7fd fdcd 	bl	8000792 <CLCD_WriteString>
				break;
 8002bf8:	e003      	b.n	8002c02 <seclectmenu+0x1d9e>
				break;
			default:
				exitmenu = 0;
 8002bfa:	4b12      	ldr	r3, [pc, #72]	@ (8002c44 <seclectmenu+0x1de0>)
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	701a      	strb	r2, [r3, #0]
				break;
 8002c00:	bf00      	nop
	while (exitmenu )
 8002c02:	4b10      	ldr	r3, [pc, #64]	@ (8002c44 <seclectmenu+0x1de0>)
 8002c04:	781b      	ldrb	r3, [r3, #0]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	f47e a94b 	bne.w	8000ea2 <seclectmenu+0x3e>
			}
		}
	}
	CLCD_Clear(&LCD1);
 8002c0c:	4804      	ldr	r0, [pc, #16]	@ (8002c20 <seclectmenu+0x1dbc>)
 8002c0e:	f7fd fdd7 	bl	80007c0 <CLCD_Clear>
	HAL_Delay(1000);
 8002c12:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002c16:	f001 f847 	bl	8003ca8 <HAL_Delay>
}
 8002c1a:	3718      	adds	r7, #24
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}
 8002c20:	200000f4 	.word	0x200000f4
 8002c24:	08005f14 	.word	0x08005f14
 8002c28:	08005f08 	.word	0x08005f08
 8002c2c:	08005dec 	.word	0x08005dec
 8002c30:	40010800 	.word	0x40010800
 8002c34:	08005ea0 	.word	0x08005ea0
 8002c38:	08005eac 	.word	0x08005eac
 8002c3c:	08005e58 	.word	0x08005e58
 8002c40:	08005e68 	.word	0x08005e68
 8002c44:	20000000 	.word	0x20000000
 8002c48:	08005cd4 	.word	0x08005cd4
 8002c4c:	08005d00 	.word	0x08005d00
 8002c50:	08005cf4 	.word	0x08005cf4
 8002c54:	08005d0c 	.word	0x08005d0c

08002c58 <CheckUID>:
uint8_t CheckUID(uint8_t *data, uint32_t address)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b086      	sub	sp, #24
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
 8002c60:	6039      	str	r1, [r7, #0]
	uint8_t arr[8];
	Flash_Read_Array(address, arr, 8);
 8002c62:	f107 030c 	add.w	r3, r7, #12
 8002c66:	2208      	movs	r2, #8
 8002c68:	4619      	mov	r1, r3
 8002c6a:	6838      	ldr	r0, [r7, #0]
 8002c6c:	f7fd faea 	bl	8000244 <Flash_Read_Array>
	if (arr[6] != 0xFF)
 8002c70:	7cbb      	ldrb	r3, [r7, #18]
 8002c72:	2bff      	cmp	r3, #255	@ 0xff
 8002c74:	d001      	beq.n	8002c7a <CheckUID+0x22>
		return 0;
 8002c76:	2300      	movs	r3, #0
 8002c78:	e016      	b.n	8002ca8 <CheckUID+0x50>
	for (uint8_t i = 0; i < 5; i++)
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	75fb      	strb	r3, [r7, #23]
 8002c7e:	e00f      	b.n	8002ca0 <CheckUID+0x48>
	{
		if (data[i] != arr[i])
 8002c80:	7dfb      	ldrb	r3, [r7, #23]
 8002c82:	687a      	ldr	r2, [r7, #4]
 8002c84:	4413      	add	r3, r2
 8002c86:	781a      	ldrb	r2, [r3, #0]
 8002c88:	7dfb      	ldrb	r3, [r7, #23]
 8002c8a:	3318      	adds	r3, #24
 8002c8c:	443b      	add	r3, r7
 8002c8e:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8002c92:	429a      	cmp	r2, r3
 8002c94:	d001      	beq.n	8002c9a <CheckUID+0x42>
			return 0;
 8002c96:	2300      	movs	r3, #0
 8002c98:	e006      	b.n	8002ca8 <CheckUID+0x50>
	for (uint8_t i = 0; i < 5; i++)
 8002c9a:	7dfb      	ldrb	r3, [r7, #23]
 8002c9c:	3301      	adds	r3, #1
 8002c9e:	75fb      	strb	r3, [r7, #23]
 8002ca0:	7dfb      	ldrb	r3, [r7, #23]
 8002ca2:	2b04      	cmp	r3, #4
 8002ca4:	d9ec      	bls.n	8002c80 <CheckUID+0x28>
	}
	return 1;
 8002ca6:	2301      	movs	r3, #1
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	3718      	adds	r7, #24
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}

08002cb0 <CheckListUID>:

uint8_t CheckListUID(uint8_t *data)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b084      	sub	sp, #16
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
	uint32_t pt = StartAddressUID;
 8002cb8:	4b14      	ldr	r3, [pc, #80]	@ (8002d0c <CheckListUID+0x5c>)
 8002cba:	60fb      	str	r3, [r7, #12]
	while (Flash_Read_Byte(pt + 5) != 0xFF)
 8002cbc:	e018      	b.n	8002cf0 <CheckListUID+0x40>
	{
		if(Flash_Read_2Byte(pt + 6) == 0xFFFF){
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	3306      	adds	r3, #6
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f7fd faa5 	bl	8000212 <Flash_Read_2Byte>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	461a      	mov	r2, r3
 8002ccc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002cd0:	429a      	cmp	r2, r3
 8002cd2:	d10a      	bne.n	8002cea <CheckListUID+0x3a>
			if (CheckUID(data, pt) == 1)
 8002cd4:	68f9      	ldr	r1, [r7, #12]
 8002cd6:	6878      	ldr	r0, [r7, #4]
 8002cd8:	f7ff ffbe 	bl	8002c58 <CheckUID>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	2b01      	cmp	r3, #1
 8002ce0:	d103      	bne.n	8002cea <CheckListUID+0x3a>
				return *(uint8_t *)(pt + 5);
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	3305      	adds	r3, #5
 8002ce6:	781b      	ldrb	r3, [r3, #0]
 8002ce8:	e00b      	b.n	8002d02 <CheckListUID+0x52>
		}
		pt = pt + 8;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	3308      	adds	r3, #8
 8002cee:	60fb      	str	r3, [r7, #12]
	while (Flash_Read_Byte(pt + 5) != 0xFF)
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	3305      	adds	r3, #5
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f7fd fa80 	bl	80001fa <Flash_Read_Byte>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	2bff      	cmp	r3, #255	@ 0xff
 8002cfe:	d1de      	bne.n	8002cbe <CheckListUID+0xe>
	}
	return 0;
 8002d00:	2300      	movs	r3, #0
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	3710      	adds	r7, #16
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}
 8002d0a:	bf00      	nop
 8002d0c:	0800a000 	.word	0x0800a000

08002d10 <checkcountUID>:
uint8_t checkcountUID(void)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b082      	sub	sp, #8
 8002d14:	af00      	add	r7, sp, #0
	uint32_t pt = StartAddressUID;
 8002d16:	4b16      	ldr	r3, [pc, #88]	@ (8002d70 <checkcountUID+0x60>)
 8002d18:	607b      	str	r3, [r7, #4]
	uint8_t count = 0;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	70fb      	strb	r3, [r7, #3]
	while (Flash_Read_Byte(pt + 5) != 0xFF)
 8002d1e:	e01a      	b.n	8002d56 <checkcountUID+0x46>
	{
		if(Flash_Read_2Byte(pt + 6) == 0xFFFF){
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	3306      	adds	r3, #6
 8002d24:	4618      	mov	r0, r3
 8002d26:	f7fd fa74 	bl	8000212 <Flash_Read_2Byte>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	461a      	mov	r2, r3
 8002d2e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002d32:	429a      	cmp	r2, r3
 8002d34:	d10c      	bne.n	8002d50 <checkcountUID+0x40>
			if ((Flash_Read_Byte(pt + 5) >> 4) == 1)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	3305      	adds	r3, #5
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f7fd fa5d 	bl	80001fa <Flash_Read_Byte>
 8002d40:	4603      	mov	r3, r0
 8002d42:	091b      	lsrs	r3, r3, #4
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	2b01      	cmp	r3, #1
 8002d48:	d102      	bne.n	8002d50 <checkcountUID+0x40>
			{
				count++;
 8002d4a:	78fb      	ldrb	r3, [r7, #3]
 8002d4c:	3301      	adds	r3, #1
 8002d4e:	70fb      	strb	r3, [r7, #3]
			}
		}
		pt = pt + 8;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	3308      	adds	r3, #8
 8002d54:	607b      	str	r3, [r7, #4]
	while (Flash_Read_Byte(pt + 5) != 0xFF)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	3305      	adds	r3, #5
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f7fd fa4d 	bl	80001fa <Flash_Read_Byte>
 8002d60:	4603      	mov	r3, r0
 8002d62:	2bff      	cmp	r3, #255	@ 0xff
 8002d64:	d1dc      	bne.n	8002d20 <checkcountUID+0x10>
	}
	return count;
 8002d66:	78fb      	ldrb	r3, [r7, #3]
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	3708      	adds	r7, #8
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}
 8002d70:	0800a000 	.word	0x0800a000

08002d74 <adduid>:
void adduid(uint8_t key)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b082      	sub	sp, #8
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	71fb      	strb	r3, [r7, #7]
	setaddress();
 8002d7e:	f000 faa1 	bl	80032c4 <setaddress>
	CLCD_Clear(&LCD1);
 8002d82:	484a      	ldr	r0, [pc, #296]	@ (8002eac <adduid+0x138>)
 8002d84:	f7fd fd1c 	bl	80007c0 <CLCD_Clear>
	CLCD_SetCursor(&LCD1, 0, 0);
 8002d88:	2200      	movs	r2, #0
 8002d8a:	2100      	movs	r1, #0
 8002d8c:	4847      	ldr	r0, [pc, #284]	@ (8002eac <adduid+0x138>)
 8002d8e:	f7fd fc99 	bl	80006c4 <CLCD_SetCursor>
	CLCD_WriteString(&LCD1, "QUET THE");
 8002d92:	4947      	ldr	r1, [pc, #284]	@ (8002eb0 <adduid+0x13c>)
 8002d94:	4845      	ldr	r0, [pc, #276]	@ (8002eac <adduid+0x138>)
 8002d96:	f7fd fcfc 	bl	8000792 <CLCD_WriteString>
	CLCD_SetCursor(&LCD1, 0, 1);
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	2100      	movs	r1, #0
 8002d9e:	4843      	ldr	r0, [pc, #268]	@ (8002eac <adduid+0x138>)
 8002da0:	f7fd fc90 	bl	80006c4 <CLCD_SetCursor>
	CLCD_WriteString(&LCD1, "=>  BACK");
 8002da4:	4943      	ldr	r1, [pc, #268]	@ (8002eb4 <adduid+0x140>)
 8002da6:	4841      	ldr	r0, [pc, #260]	@ (8002eac <adduid+0x138>)
 8002da8:	f7fd fcf3 	bl	8000792 <CLCD_WriteString>
	while (exitmenu)
 8002dac:	e075      	b.n	8002e9a <adduid+0x126>
	{
		if (TM_MFRC522_Check(CardID) == MI_OK)
 8002dae:	4842      	ldr	r0, [pc, #264]	@ (8002eb8 <adduid+0x144>)
 8002db0:	f000 fbc4 	bl	800353c <TM_MFRC522_Check>
 8002db4:	4603      	mov	r3, r0
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d167      	bne.n	8002e8a <adduid+0x116>
		{
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 1);
 8002dba:	2201      	movs	r2, #1
 8002dbc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002dc0:	483e      	ldr	r0, [pc, #248]	@ (8002ebc <adduid+0x148>)
 8002dc2:	f001 fc3e 	bl	8004642 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LOA_GPIO_Port, LOA_Pin, 1);
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002dcc:	483b      	ldr	r0, [pc, #236]	@ (8002ebc <adduid+0x148>)
 8002dce:	f001 fc38 	bl	8004642 <HAL_GPIO_WritePin>
			HAL_Delay(delayloa);
 8002dd2:	4b3b      	ldr	r3, [pc, #236]	@ (8002ec0 <adduid+0x14c>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f000 ff66 	bl	8003ca8 <HAL_Delay>
			HAL_GPIO_WritePin(LOA_GPIO_Port, LOA_Pin, 0);
 8002ddc:	2200      	movs	r2, #0
 8002dde:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002de2:	4836      	ldr	r0, [pc, #216]	@ (8002ebc <adduid+0x148>)
 8002de4:	f001 fc2d 	bl	8004642 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);
 8002de8:	2200      	movs	r2, #0
 8002dea:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002dee:	4833      	ldr	r0, [pc, #204]	@ (8002ebc <adduid+0x148>)
 8002df0:	f001 fc27 	bl	8004642 <HAL_GPIO_WritePin>
			if (CheckListUID(CardID) == 0)
 8002df4:	4830      	ldr	r0, [pc, #192]	@ (8002eb8 <adduid+0x144>)
 8002df6:	f7ff ff5b 	bl	8002cb0 <CheckListUID>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d11f      	bne.n	8002e40 <adduid+0xcc>
			{
				CardID[5] = key;
 8002e00:	4a2d      	ldr	r2, [pc, #180]	@ (8002eb8 <adduid+0x144>)
 8002e02:	79fb      	ldrb	r3, [r7, #7]
 8002e04:	7153      	strb	r3, [r2, #5]
				Flash_Write_Array(AddressUID, CardID, 6);
 8002e06:	4b2f      	ldr	r3, [pc, #188]	@ (8002ec4 <adduid+0x150>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	2206      	movs	r2, #6
 8002e0c:	492a      	ldr	r1, [pc, #168]	@ (8002eb8 <adduid+0x144>)
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f7fd f9d0 	bl	80001b4 <Flash_Write_Array>
				AddressUID += 8;
 8002e14:	4b2b      	ldr	r3, [pc, #172]	@ (8002ec4 <adduid+0x150>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	3308      	adds	r3, #8
 8002e1a:	4a2a      	ldr	r2, [pc, #168]	@ (8002ec4 <adduid+0x150>)
 8002e1c:	6013      	str	r3, [r2, #0]
				CLCD_Clear(&LCD1);
 8002e1e:	4823      	ldr	r0, [pc, #140]	@ (8002eac <adduid+0x138>)
 8002e20:	f7fd fcce 	bl	80007c0 <CLCD_Clear>
				CLCD_SetCursor(&LCD1, 0, 0);
 8002e24:	2200      	movs	r2, #0
 8002e26:	2100      	movs	r1, #0
 8002e28:	4820      	ldr	r0, [pc, #128]	@ (8002eac <adduid+0x138>)
 8002e2a:	f7fd fc4b 	bl	80006c4 <CLCD_SetCursor>
				CLCD_WriteString(&LCD1, "THANH CONG");
 8002e2e:	4926      	ldr	r1, [pc, #152]	@ (8002ec8 <adduid+0x154>)
 8002e30:	481e      	ldr	r0, [pc, #120]	@ (8002eac <adduid+0x138>)
 8002e32:	f7fd fcae 	bl	8000792 <CLCD_WriteString>
				HAL_Delay(1000);
 8002e36:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002e3a:	f000 ff35 	bl	8003ca8 <HAL_Delay>
				return;
 8002e3e:	e032      	b.n	8002ea6 <adduid+0x132>
			}
			else
			{
				CLCD_Clear(&LCD1);
 8002e40:	481a      	ldr	r0, [pc, #104]	@ (8002eac <adduid+0x138>)
 8002e42:	f7fd fcbd 	bl	80007c0 <CLCD_Clear>
				CLCD_SetCursor(&LCD1, 0, 0);
 8002e46:	2200      	movs	r2, #0
 8002e48:	2100      	movs	r1, #0
 8002e4a:	4818      	ldr	r0, [pc, #96]	@ (8002eac <adduid+0x138>)
 8002e4c:	f7fd fc3a 	bl	80006c4 <CLCD_SetCursor>
				CLCD_WriteString(&LCD1, "THE DA TON TAI");
 8002e50:	491e      	ldr	r1, [pc, #120]	@ (8002ecc <adduid+0x158>)
 8002e52:	4816      	ldr	r0, [pc, #88]	@ (8002eac <adduid+0x138>)
 8002e54:	f7fd fc9d 	bl	8000792 <CLCD_WriteString>
				HAL_Delay(1000);
 8002e58:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002e5c:	f000 ff24 	bl	8003ca8 <HAL_Delay>
				CLCD_Clear(&LCD1);
 8002e60:	4812      	ldr	r0, [pc, #72]	@ (8002eac <adduid+0x138>)
 8002e62:	f7fd fcad 	bl	80007c0 <CLCD_Clear>
				CLCD_SetCursor(&LCD1, 0, 0);
 8002e66:	2200      	movs	r2, #0
 8002e68:	2100      	movs	r1, #0
 8002e6a:	4810      	ldr	r0, [pc, #64]	@ (8002eac <adduid+0x138>)
 8002e6c:	f7fd fc2a 	bl	80006c4 <CLCD_SetCursor>
				CLCD_WriteString(&LCD1, "QUET THE");
 8002e70:	490f      	ldr	r1, [pc, #60]	@ (8002eb0 <adduid+0x13c>)
 8002e72:	480e      	ldr	r0, [pc, #56]	@ (8002eac <adduid+0x138>)
 8002e74:	f7fd fc8d 	bl	8000792 <CLCD_WriteString>
				CLCD_SetCursor(&LCD1, 0, 1);
 8002e78:	2201      	movs	r2, #1
 8002e7a:	2100      	movs	r1, #0
 8002e7c:	480b      	ldr	r0, [pc, #44]	@ (8002eac <adduid+0x138>)
 8002e7e:	f7fd fc21 	bl	80006c4 <CLCD_SetCursor>
				CLCD_WriteString(&LCD1, "=>  BACK");
 8002e82:	490c      	ldr	r1, [pc, #48]	@ (8002eb4 <adduid+0x140>)
 8002e84:	4809      	ldr	r0, [pc, #36]	@ (8002eac <adduid+0x138>)
 8002e86:	f7fd fc84 	bl	8000792 <CLCD_WriteString>
			}
		}
		if (checkbuton(MENU_GPIO_Port, MENU_Pin) == 1)
 8002e8a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002e8e:	4810      	ldr	r0, [pc, #64]	@ (8002ed0 <adduid+0x15c>)
 8002e90:	f7fd ff9a 	bl	8000dc8 <checkbuton>
 8002e94:	4603      	mov	r3, r0
 8002e96:	2b01      	cmp	r3, #1
 8002e98:	d004      	beq.n	8002ea4 <adduid+0x130>
	while (exitmenu)
 8002e9a:	4b0e      	ldr	r3, [pc, #56]	@ (8002ed4 <adduid+0x160>)
 8002e9c:	781b      	ldrb	r3, [r3, #0]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d185      	bne.n	8002dae <adduid+0x3a>
 8002ea2:	e000      	b.n	8002ea6 <adduid+0x132>
		{
			return;
 8002ea4:	bf00      	nop
		}
	}
}
 8002ea6:	3708      	adds	r7, #8
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd80      	pop	{r7, pc}
 8002eac:	200000f4 	.word	0x200000f4
 8002eb0:	08005f08 	.word	0x08005f08
 8002eb4:	08005dec 	.word	0x08005dec
 8002eb8:	200000e4 	.word	0x200000e4
 8002ebc:	40010c00 	.word	0x40010c00
 8002ec0:	20000018 	.word	0x20000018
 8002ec4:	20000004 	.word	0x20000004
 8002ec8:	08005f24 	.word	0x08005f24
 8002ecc:	08005f30 	.word	0x08005f30
 8002ed0:	40010800 	.word	0x40010800
 8002ed4:	20000000 	.word	0x20000000

08002ed8 <checkthe>:
void checkthe(void)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b082      	sub	sp, #8
 8002edc:	af00      	add	r7, sp, #0
	exitmenu = 30;
 8002ede:	4b78      	ldr	r3, [pc, #480]	@ (80030c0 <checkthe+0x1e8>)
 8002ee0:	221e      	movs	r2, #30
 8002ee2:	701a      	strb	r2, [r3, #0]
	CLCD_Clear(&LCD1);
 8002ee4:	4877      	ldr	r0, [pc, #476]	@ (80030c4 <checkthe+0x1ec>)
 8002ee6:	f7fd fc6b 	bl	80007c0 <CLCD_Clear>
	CLCD_SetCursor(&LCD1, 0, 0);
 8002eea:	2200      	movs	r2, #0
 8002eec:	2100      	movs	r1, #0
 8002eee:	4875      	ldr	r0, [pc, #468]	@ (80030c4 <checkthe+0x1ec>)
 8002ef0:	f7fd fbe8 	bl	80006c4 <CLCD_SetCursor>
	CLCD_WriteString(&LCD1, "QUET THE");
 8002ef4:	4974      	ldr	r1, [pc, #464]	@ (80030c8 <checkthe+0x1f0>)
 8002ef6:	4873      	ldr	r0, [pc, #460]	@ (80030c4 <checkthe+0x1ec>)
 8002ef8:	f7fd fc4b 	bl	8000792 <CLCD_WriteString>
	CLCD_SetCursor(&LCD1, 0, 1);
 8002efc:	2201      	movs	r2, #1
 8002efe:	2100      	movs	r1, #0
 8002f00:	4870      	ldr	r0, [pc, #448]	@ (80030c4 <checkthe+0x1ec>)
 8002f02:	f7fd fbdf 	bl	80006c4 <CLCD_SetCursor>
	CLCD_WriteString(&LCD1, "=>  BACK");
 8002f06:	4971      	ldr	r1, [pc, #452]	@ (80030cc <checkthe+0x1f4>)
 8002f08:	486e      	ldr	r0, [pc, #440]	@ (80030c4 <checkthe+0x1ec>)
 8002f0a:	f7fd fc42 	bl	8000792 <CLCD_WriteString>
	while (exitmenu )
 8002f0e:	e0cc      	b.n	80030aa <checkthe+0x1d2>
	{
		if (TM_MFRC522_Check(CardID) == MI_OK)
 8002f10:	486f      	ldr	r0, [pc, #444]	@ (80030d0 <checkthe+0x1f8>)
 8002f12:	f000 fb13 	bl	800353c <TM_MFRC522_Check>
 8002f16:	4603      	mov	r3, r0
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	f040 80be 	bne.w	800309a <checkthe+0x1c2>
		{
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 1);
 8002f1e:	2201      	movs	r2, #1
 8002f20:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002f24:	486b      	ldr	r0, [pc, #428]	@ (80030d4 <checkthe+0x1fc>)
 8002f26:	f001 fb8c 	bl	8004642 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LOA_GPIO_Port, LOA_Pin, 1);
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002f30:	4868      	ldr	r0, [pc, #416]	@ (80030d4 <checkthe+0x1fc>)
 8002f32:	f001 fb86 	bl	8004642 <HAL_GPIO_WritePin>
			HAL_Delay(delayloa);
 8002f36:	4b68      	ldr	r3, [pc, #416]	@ (80030d8 <checkthe+0x200>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f000 feb4 	bl	8003ca8 <HAL_Delay>
			HAL_GPIO_WritePin(LOA_GPIO_Port, LOA_Pin, 0);
 8002f40:	2200      	movs	r2, #0
 8002f42:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002f46:	4863      	ldr	r0, [pc, #396]	@ (80030d4 <checkthe+0x1fc>)
 8002f48:	f001 fb7b 	bl	8004642 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002f52:	4860      	ldr	r0, [pc, #384]	@ (80030d4 <checkthe+0x1fc>)
 8002f54:	f001 fb75 	bl	8004642 <HAL_GPIO_WritePin>
			if (CheckListUID(CardID) == 0)
 8002f58:	485d      	ldr	r0, [pc, #372]	@ (80030d0 <checkthe+0x1f8>)
 8002f5a:	f7ff fea9 	bl	8002cb0 <CheckListUID>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d129      	bne.n	8002fb8 <checkthe+0xe0>
			{
				CLCD_Clear(&LCD1);
 8002f64:	4857      	ldr	r0, [pc, #348]	@ (80030c4 <checkthe+0x1ec>)
 8002f66:	f7fd fc2b 	bl	80007c0 <CLCD_Clear>
				CLCD_SetCursor(&LCD1, 0, 0);
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	2100      	movs	r1, #0
 8002f6e:	4855      	ldr	r0, [pc, #340]	@ (80030c4 <checkthe+0x1ec>)
 8002f70:	f7fd fba8 	bl	80006c4 <CLCD_SetCursor>
				CLCD_WriteString(&LCD1, "THE CHUA THEM");
 8002f74:	4959      	ldr	r1, [pc, #356]	@ (80030dc <checkthe+0x204>)
 8002f76:	4853      	ldr	r0, [pc, #332]	@ (80030c4 <checkthe+0x1ec>)
 8002f78:	f7fd fc0b 	bl	8000792 <CLCD_WriteString>
				HAL_Delay(1000);
 8002f7c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002f80:	f000 fe92 	bl	8003ca8 <HAL_Delay>
				CLCD_Clear(&LCD1);
 8002f84:	484f      	ldr	r0, [pc, #316]	@ (80030c4 <checkthe+0x1ec>)
 8002f86:	f7fd fc1b 	bl	80007c0 <CLCD_Clear>
				CLCD_SetCursor(&LCD1, 0, 0);
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	2100      	movs	r1, #0
 8002f8e:	484d      	ldr	r0, [pc, #308]	@ (80030c4 <checkthe+0x1ec>)
 8002f90:	f7fd fb98 	bl	80006c4 <CLCD_SetCursor>
				CLCD_WriteString(&LCD1, "QUET THE");
 8002f94:	494c      	ldr	r1, [pc, #304]	@ (80030c8 <checkthe+0x1f0>)
 8002f96:	484b      	ldr	r0, [pc, #300]	@ (80030c4 <checkthe+0x1ec>)
 8002f98:	f7fd fbfb 	bl	8000792 <CLCD_WriteString>
				CLCD_SetCursor(&LCD1, 0, 1);
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	2100      	movs	r1, #0
 8002fa0:	4848      	ldr	r0, [pc, #288]	@ (80030c4 <checkthe+0x1ec>)
 8002fa2:	f7fd fb8f 	bl	80006c4 <CLCD_SetCursor>
				CLCD_WriteString(&LCD1, "=>  BACK");
 8002fa6:	4949      	ldr	r1, [pc, #292]	@ (80030cc <checkthe+0x1f4>)
 8002fa8:	4846      	ldr	r0, [pc, #280]	@ (80030c4 <checkthe+0x1ec>)
 8002faa:	f7fd fbf2 	bl	8000792 <CLCD_WriteString>
				HAL_Delay(1000);
 8002fae:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002fb2:	f000 fe79 	bl	8003ca8 <HAL_Delay>
 8002fb6:	e070      	b.n	800309a <checkthe+0x1c2>
			}
			else
			{
				uint8_t key = CheckListUID(CardID);
 8002fb8:	4845      	ldr	r0, [pc, #276]	@ (80030d0 <checkthe+0x1f8>)
 8002fba:	f7ff fe79 	bl	8002cb0 <CheckListUID>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	71fb      	strb	r3, [r7, #7]
				uint8_t key2 = key & 0x0f;
 8002fc2:	79fb      	ldrb	r3, [r7, #7]
 8002fc4:	f003 030f 	and.w	r3, r3, #15
 8002fc8:	71bb      	strb	r3, [r7, #6]
				uint8_t key1 = key >> 4;
 8002fca:	79fb      	ldrb	r3, [r7, #7]
 8002fcc:	091b      	lsrs	r3, r3, #4
 8002fce:	717b      	strb	r3, [r7, #5]
				CLCD_Clear(&LCD1);
 8002fd0:	483c      	ldr	r0, [pc, #240]	@ (80030c4 <checkthe+0x1ec>)
 8002fd2:	f7fd fbf5 	bl	80007c0 <CLCD_Clear>
				switch (key1)
 8002fd6:	797b      	ldrb	r3, [r7, #5]
 8002fd8:	2b01      	cmp	r3, #1
 8002fda:	d109      	bne.n	8002ff0 <checkthe+0x118>
				{
				case 1:
					CLCD_SetCursor(&LCD1, 0, 0);
 8002fdc:	2200      	movs	r2, #0
 8002fde:	2100      	movs	r1, #0
 8002fe0:	4838      	ldr	r0, [pc, #224]	@ (80030c4 <checkthe+0x1ec>)
 8002fe2:	f7fd fb6f 	bl	80006c4 <CLCD_SetCursor>
					CLCD_WriteString(&LCD1, "THE NGUOI LON");
 8002fe6:	493e      	ldr	r1, [pc, #248]	@ (80030e0 <checkthe+0x208>)
 8002fe8:	4836      	ldr	r0, [pc, #216]	@ (80030c4 <checkthe+0x1ec>)
 8002fea:	f7fd fbd2 	bl	8000792 <CLCD_WriteString>
					break;
 8002fee:	e009      	b.n	8003004 <checkthe+0x12c>
				default:
					CLCD_SetCursor(&LCD1, 0, 0);
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	2100      	movs	r1, #0
 8002ff4:	4833      	ldr	r0, [pc, #204]	@ (80030c4 <checkthe+0x1ec>)
 8002ff6:	f7fd fb65 	bl	80006c4 <CLCD_SetCursor>
					CLCD_WriteString(&LCD1, "THE TRE EM");
 8002ffa:	493a      	ldr	r1, [pc, #232]	@ (80030e4 <checkthe+0x20c>)
 8002ffc:	4831      	ldr	r0, [pc, #196]	@ (80030c4 <checkthe+0x1ec>)
 8002ffe:	f7fd fbc8 	bl	8000792 <CLCD_WriteString>
					break;
 8003002:	bf00      	nop
				}
				switch (key2)
 8003004:	79bb      	ldrb	r3, [r7, #6]
 8003006:	2b03      	cmp	r3, #3
 8003008:	d01a      	beq.n	8003040 <checkthe+0x168>
 800300a:	2b03      	cmp	r3, #3
 800300c:	dc22      	bgt.n	8003054 <checkthe+0x17c>
 800300e:	2b01      	cmp	r3, #1
 8003010:	d002      	beq.n	8003018 <checkthe+0x140>
 8003012:	2b02      	cmp	r3, #2
 8003014:	d00a      	beq.n	800302c <checkthe+0x154>
 8003016:	e01d      	b.n	8003054 <checkthe+0x17c>
				{
				case 1:
					CLCD_SetCursor(&LCD1, 0, 1);
 8003018:	2201      	movs	r2, #1
 800301a:	2100      	movs	r1, #0
 800301c:	4829      	ldr	r0, [pc, #164]	@ (80030c4 <checkthe+0x1ec>)
 800301e:	f7fd fb51 	bl	80006c4 <CLCD_SetCursor>
					CLCD_WriteString(&LCD1, "THE 1");
 8003022:	4931      	ldr	r1, [pc, #196]	@ (80030e8 <checkthe+0x210>)
 8003024:	4827      	ldr	r0, [pc, #156]	@ (80030c4 <checkthe+0x1ec>)
 8003026:	f7fd fbb4 	bl	8000792 <CLCD_WriteString>
					break;
 800302a:	e01d      	b.n	8003068 <checkthe+0x190>
				case 2:
					CLCD_SetCursor(&LCD1, 0, 1);
 800302c:	2201      	movs	r2, #1
 800302e:	2100      	movs	r1, #0
 8003030:	4824      	ldr	r0, [pc, #144]	@ (80030c4 <checkthe+0x1ec>)
 8003032:	f7fd fb47 	bl	80006c4 <CLCD_SetCursor>
					CLCD_WriteString(&LCD1, "THE 2");
 8003036:	492d      	ldr	r1, [pc, #180]	@ (80030ec <checkthe+0x214>)
 8003038:	4822      	ldr	r0, [pc, #136]	@ (80030c4 <checkthe+0x1ec>)
 800303a:	f7fd fbaa 	bl	8000792 <CLCD_WriteString>
					break;
 800303e:	e013      	b.n	8003068 <checkthe+0x190>
				case 3:
					CLCD_SetCursor(&LCD1, 0, 1);
 8003040:	2201      	movs	r2, #1
 8003042:	2100      	movs	r1, #0
 8003044:	481f      	ldr	r0, [pc, #124]	@ (80030c4 <checkthe+0x1ec>)
 8003046:	f7fd fb3d 	bl	80006c4 <CLCD_SetCursor>
					CLCD_WriteString(&LCD1, "THE 3");
 800304a:	4929      	ldr	r1, [pc, #164]	@ (80030f0 <checkthe+0x218>)
 800304c:	481d      	ldr	r0, [pc, #116]	@ (80030c4 <checkthe+0x1ec>)
 800304e:	f7fd fba0 	bl	8000792 <CLCD_WriteString>
					break;
 8003052:	e009      	b.n	8003068 <checkthe+0x190>
				default:
					CLCD_SetCursor(&LCD1, 0, 1);
 8003054:	2201      	movs	r2, #1
 8003056:	2100      	movs	r1, #0
 8003058:	481a      	ldr	r0, [pc, #104]	@ (80030c4 <checkthe+0x1ec>)
 800305a:	f7fd fb33 	bl	80006c4 <CLCD_SetCursor>
					CLCD_WriteString(&LCD1, "THE 4");
 800305e:	4925      	ldr	r1, [pc, #148]	@ (80030f4 <checkthe+0x21c>)
 8003060:	4818      	ldr	r0, [pc, #96]	@ (80030c4 <checkthe+0x1ec>)
 8003062:	f7fd fb96 	bl	8000792 <CLCD_WriteString>
					break;
 8003066:	bf00      	nop
				}
				HAL_Delay(1000);
 8003068:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800306c:	f000 fe1c 	bl	8003ca8 <HAL_Delay>
				CLCD_Clear(&LCD1);
 8003070:	4814      	ldr	r0, [pc, #80]	@ (80030c4 <checkthe+0x1ec>)
 8003072:	f7fd fba5 	bl	80007c0 <CLCD_Clear>
				CLCD_SetCursor(&LCD1, 0, 0);
 8003076:	2200      	movs	r2, #0
 8003078:	2100      	movs	r1, #0
 800307a:	4812      	ldr	r0, [pc, #72]	@ (80030c4 <checkthe+0x1ec>)
 800307c:	f7fd fb22 	bl	80006c4 <CLCD_SetCursor>
				CLCD_WriteString(&LCD1, "QUET THE");
 8003080:	4911      	ldr	r1, [pc, #68]	@ (80030c8 <checkthe+0x1f0>)
 8003082:	4810      	ldr	r0, [pc, #64]	@ (80030c4 <checkthe+0x1ec>)
 8003084:	f7fd fb85 	bl	8000792 <CLCD_WriteString>
				CLCD_SetCursor(&LCD1, 0, 1);
 8003088:	2201      	movs	r2, #1
 800308a:	2100      	movs	r1, #0
 800308c:	480d      	ldr	r0, [pc, #52]	@ (80030c4 <checkthe+0x1ec>)
 800308e:	f7fd fb19 	bl	80006c4 <CLCD_SetCursor>
				CLCD_WriteString(&LCD1, "=>  BACK");
 8003092:	490e      	ldr	r1, [pc, #56]	@ (80030cc <checkthe+0x1f4>)
 8003094:	480b      	ldr	r0, [pc, #44]	@ (80030c4 <checkthe+0x1ec>)
 8003096:	f7fd fb7c 	bl	8000792 <CLCD_WriteString>
			}
		}
		if (checkbuton(MENU_GPIO_Port, MENU_Pin) == 1)
 800309a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800309e:	4816      	ldr	r0, [pc, #88]	@ (80030f8 <checkthe+0x220>)
 80030a0:	f7fd fe92 	bl	8000dc8 <checkbuton>
 80030a4:	4603      	mov	r3, r0
 80030a6:	2b01      	cmp	r3, #1
 80030a8:	d005      	beq.n	80030b6 <checkthe+0x1de>
	while (exitmenu )
 80030aa:	4b05      	ldr	r3, [pc, #20]	@ (80030c0 <checkthe+0x1e8>)
 80030ac:	781b      	ldrb	r3, [r3, #0]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	f47f af2e 	bne.w	8002f10 <checkthe+0x38>
 80030b4:	e000      	b.n	80030b8 <checkthe+0x1e0>
		{
			return;
 80030b6:	bf00      	nop
		}
	}
}
 80030b8:	3708      	adds	r7, #8
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}
 80030be:	bf00      	nop
 80030c0:	20000000 	.word	0x20000000
 80030c4:	200000f4 	.word	0x200000f4
 80030c8:	08005f08 	.word	0x08005f08
 80030cc:	08005dec 	.word	0x08005dec
 80030d0:	200000e4 	.word	0x200000e4
 80030d4:	40010c00 	.word	0x40010c00
 80030d8:	20000018 	.word	0x20000018
 80030dc:	08005f14 	.word	0x08005f14
 80030e0:	08005c80 	.word	0x08005c80
 80030e4:	08005f40 	.word	0x08005f40
 80030e8:	08005f4c 	.word	0x08005f4c
 80030ec:	08005f54 	.word	0x08005f54
 80030f0:	08005f5c 	.word	0x08005f5c
 80030f4:	08005f64 	.word	0x08005f64
 80030f8:	40010800 	.word	0x40010800

080030fc <CheckKey>:
uint32_t CheckKey(uint8_t key)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b084      	sub	sp, #16
 8003100:	af00      	add	r7, sp, #0
 8003102:	4603      	mov	r3, r0
 8003104:	71fb      	strb	r3, [r7, #7]
	uint32_t pt = StartAddressUID;
 8003106:	4b13      	ldr	r3, [pc, #76]	@ (8003154 <CheckKey+0x58>)
 8003108:	60fb      	str	r3, [r7, #12]
	while (Flash_Read_Byte(pt + 5) != 0xFF)
 800310a:	e015      	b.n	8003138 <CheckKey+0x3c>
	{
		if(Flash_Read_2Byte(pt + 6) == 0xFFFF){
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	3306      	adds	r3, #6
 8003110:	4618      	mov	r0, r3
 8003112:	f7fd f87e 	bl	8000212 <Flash_Read_2Byte>
 8003116:	4603      	mov	r3, r0
 8003118:	461a      	mov	r2, r3
 800311a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800311e:	429a      	cmp	r2, r3
 8003120:	d107      	bne.n	8003132 <CheckKey+0x36>
			if (*(uint8_t *)(pt + 5) == key)
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	3305      	adds	r3, #5
 8003126:	781b      	ldrb	r3, [r3, #0]
 8003128:	79fa      	ldrb	r2, [r7, #7]
 800312a:	429a      	cmp	r2, r3
 800312c:	d101      	bne.n	8003132 <CheckKey+0x36>
				return pt;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	e00b      	b.n	800314a <CheckKey+0x4e>
		}
		pt = pt + 8;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	3308      	adds	r3, #8
 8003136:	60fb      	str	r3, [r7, #12]
	while (Flash_Read_Byte(pt + 5) != 0xFF)
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	3305      	adds	r3, #5
 800313c:	4618      	mov	r0, r3
 800313e:	f7fd f85c 	bl	80001fa <Flash_Read_Byte>
 8003142:	4603      	mov	r3, r0
 8003144:	2bff      	cmp	r3, #255	@ 0xff
 8003146:	d1e1      	bne.n	800310c <CheckKey+0x10>
	}
	return 0;
 8003148:	2300      	movs	r3, #0
}
 800314a:	4618      	mov	r0, r3
 800314c:	3710      	adds	r7, #16
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}
 8003152:	bf00      	nop
 8003154:	0800a000 	.word	0x0800a000

08003158 <removeuid>:
void removeuid(uint32_t addressrm)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b082      	sub	sp, #8
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
	Flash_Write_2Byte(addressrm + 6, 0x0000);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	3306      	adds	r3, #6
 8003164:	2100      	movs	r1, #0
 8003166:	4618      	mov	r0, r3
 8003168:	f7fd f80c 	bl	8000184 <Flash_Write_2Byte>
}
 800316c:	bf00      	nop
 800316e:	3708      	adds	r7, #8
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}

08003174 <startadd>:
void startadd(void)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	af00      	add	r7, sp, #0
	CLCD_Clear(&LCD1);
 8003178:	4849      	ldr	r0, [pc, #292]	@ (80032a0 <startadd+0x12c>)
 800317a:	f7fd fb21 	bl	80007c0 <CLCD_Clear>
	CLCD_SetCursor(&LCD1, 0, 0);
 800317e:	2200      	movs	r2, #0
 8003180:	2100      	movs	r1, #0
 8003182:	4847      	ldr	r0, [pc, #284]	@ (80032a0 <startadd+0x12c>)
 8003184:	f7fd fa9e 	bl	80006c4 <CLCD_SetCursor>
	CLCD_WriteString(&LCD1, "MOI QUET THE");
 8003188:	4946      	ldr	r1, [pc, #280]	@ (80032a4 <startadd+0x130>)
 800318a:	4845      	ldr	r0, [pc, #276]	@ (80032a0 <startadd+0x12c>)
 800318c:	f7fd fb01 	bl	8000792 <CLCD_WriteString>
	CLCD_SetCursor(&LCD1, 0, 1);
 8003190:	2201      	movs	r2, #1
 8003192:	2100      	movs	r1, #0
 8003194:	4842      	ldr	r0, [pc, #264]	@ (80032a0 <startadd+0x12c>)
 8003196:	f7fd fa95 	bl	80006c4 <CLCD_SetCursor>
	CLCD_WriteString(&LCD1, "THE NGUOI LON");
 800319a:	4943      	ldr	r1, [pc, #268]	@ (80032a8 <startadd+0x134>)
 800319c:	4840      	ldr	r0, [pc, #256]	@ (80032a0 <startadd+0x12c>)
 800319e:	f7fd faf8 	bl	8000792 <CLCD_WriteString>
	setaddress();
 80031a2:	f000 f88f 	bl	80032c4 <setaddress>
	while (1)
		{
			if (TM_MFRC522_Check(CardID) == MI_OK)
 80031a6:	4841      	ldr	r0, [pc, #260]	@ (80032ac <startadd+0x138>)
 80031a8:	f000 f9c8 	bl	800353c <TM_MFRC522_Check>
 80031ac:	4603      	mov	r3, r0
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d1f9      	bne.n	80031a6 <startadd+0x32>
			{
				HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 1);
 80031b2:	2201      	movs	r2, #1
 80031b4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80031b8:	483d      	ldr	r0, [pc, #244]	@ (80032b0 <startadd+0x13c>)
 80031ba:	f001 fa42 	bl	8004642 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LOA_GPIO_Port, LOA_Pin, 1);
 80031be:	2201      	movs	r2, #1
 80031c0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80031c4:	483a      	ldr	r0, [pc, #232]	@ (80032b0 <startadd+0x13c>)
 80031c6:	f001 fa3c 	bl	8004642 <HAL_GPIO_WritePin>
				HAL_Delay(delayloa);
 80031ca:	4b3a      	ldr	r3, [pc, #232]	@ (80032b4 <startadd+0x140>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4618      	mov	r0, r3
 80031d0:	f000 fd6a 	bl	8003ca8 <HAL_Delay>
				HAL_GPIO_WritePin(LOA_GPIO_Port, LOA_Pin, 0);
 80031d4:	2200      	movs	r2, #0
 80031d6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80031da:	4835      	ldr	r0, [pc, #212]	@ (80032b0 <startadd+0x13c>)
 80031dc:	f001 fa31 	bl	8004642 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);
 80031e0:	2200      	movs	r2, #0
 80031e2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80031e6:	4832      	ldr	r0, [pc, #200]	@ (80032b0 <startadd+0x13c>)
 80031e8:	f001 fa2b 	bl	8004642 <HAL_GPIO_WritePin>
				if (CheckListUID(CardID) == 0)
 80031ec:	482f      	ldr	r0, [pc, #188]	@ (80032ac <startadd+0x138>)
 80031ee:	f7ff fd5f 	bl	8002cb0 <CheckListUID>
 80031f2:	4603      	mov	r3, r0
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d10f      	bne.n	8003218 <startadd+0xa4>
				{
					CardID[5] = 0x11;
 80031f8:	4b2c      	ldr	r3, [pc, #176]	@ (80032ac <startadd+0x138>)
 80031fa:	2211      	movs	r2, #17
 80031fc:	715a      	strb	r2, [r3, #5]
					Flash_Write_Array(AddressUID, CardID, 6);
 80031fe:	4b2e      	ldr	r3, [pc, #184]	@ (80032b8 <startadd+0x144>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	2206      	movs	r2, #6
 8003204:	4929      	ldr	r1, [pc, #164]	@ (80032ac <startadd+0x138>)
 8003206:	4618      	mov	r0, r3
 8003208:	f7fc ffd4 	bl	80001b4 <Flash_Write_Array>
					AddressUID += 8;
 800320c:	4b2a      	ldr	r3, [pc, #168]	@ (80032b8 <startadd+0x144>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	3308      	adds	r3, #8
 8003212:	4a29      	ldr	r2, [pc, #164]	@ (80032b8 <startadd+0x144>)
 8003214:	6013      	str	r3, [r2, #0]
					break;
 8003216:	e025      	b.n	8003264 <startadd+0xf0>
				}
				else
				{
					CLCD_Clear(&LCD1);
 8003218:	4821      	ldr	r0, [pc, #132]	@ (80032a0 <startadd+0x12c>)
 800321a:	f7fd fad1 	bl	80007c0 <CLCD_Clear>
					CLCD_SetCursor(&LCD1, 0, 0);
 800321e:	2200      	movs	r2, #0
 8003220:	2100      	movs	r1, #0
 8003222:	481f      	ldr	r0, [pc, #124]	@ (80032a0 <startadd+0x12c>)
 8003224:	f7fd fa4e 	bl	80006c4 <CLCD_SetCursor>
					CLCD_WriteString(&LCD1, "THE DA TON TAI");
 8003228:	4924      	ldr	r1, [pc, #144]	@ (80032bc <startadd+0x148>)
 800322a:	481d      	ldr	r0, [pc, #116]	@ (80032a0 <startadd+0x12c>)
 800322c:	f7fd fab1 	bl	8000792 <CLCD_WriteString>
					HAL_Delay(1000);
 8003230:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003234:	f000 fd38 	bl	8003ca8 <HAL_Delay>
					CLCD_Clear(&LCD1);
 8003238:	4819      	ldr	r0, [pc, #100]	@ (80032a0 <startadd+0x12c>)
 800323a:	f7fd fac1 	bl	80007c0 <CLCD_Clear>
					CLCD_SetCursor(&LCD1, 0, 0);
 800323e:	2200      	movs	r2, #0
 8003240:	2100      	movs	r1, #0
 8003242:	4817      	ldr	r0, [pc, #92]	@ (80032a0 <startadd+0x12c>)
 8003244:	f7fd fa3e 	bl	80006c4 <CLCD_SetCursor>
					CLCD_WriteString(&LCD1, "MOI QUET THE");
 8003248:	4916      	ldr	r1, [pc, #88]	@ (80032a4 <startadd+0x130>)
 800324a:	4815      	ldr	r0, [pc, #84]	@ (80032a0 <startadd+0x12c>)
 800324c:	f7fd faa1 	bl	8000792 <CLCD_WriteString>
					CLCD_SetCursor(&LCD1, 0, 1);
 8003250:	2201      	movs	r2, #1
 8003252:	2100      	movs	r1, #0
 8003254:	4812      	ldr	r0, [pc, #72]	@ (80032a0 <startadd+0x12c>)
 8003256:	f7fd fa35 	bl	80006c4 <CLCD_SetCursor>
					CLCD_WriteString(&LCD1, "THE NGUOI LON");
 800325a:	4913      	ldr	r1, [pc, #76]	@ (80032a8 <startadd+0x134>)
 800325c:	4810      	ldr	r0, [pc, #64]	@ (80032a0 <startadd+0x12c>)
 800325e:	f7fd fa98 	bl	8000792 <CLCD_WriteString>
			if (TM_MFRC522_Check(CardID) == MI_OK)
 8003262:	e7a0      	b.n	80031a6 <startadd+0x32>
				}
			}
		}
	CLCD_Clear(&LCD1);
 8003264:	480e      	ldr	r0, [pc, #56]	@ (80032a0 <startadd+0x12c>)
 8003266:	f7fd faab 	bl	80007c0 <CLCD_Clear>
	CLCD_SetCursor(&LCD1, 0, 0);
 800326a:	2200      	movs	r2, #0
 800326c:	2100      	movs	r1, #0
 800326e:	480c      	ldr	r0, [pc, #48]	@ (80032a0 <startadd+0x12c>)
 8003270:	f7fd fa28 	bl	80006c4 <CLCD_SetCursor>
	CLCD_WriteString(&LCD1, "THEM THANH CONG");
 8003274:	4912      	ldr	r1, [pc, #72]	@ (80032c0 <startadd+0x14c>)
 8003276:	480a      	ldr	r0, [pc, #40]	@ (80032a0 <startadd+0x12c>)
 8003278:	f7fd fa8b 	bl	8000792 <CLCD_WriteString>
	CLCD_SetCursor(&LCD1, 0, 1);
 800327c:	2201      	movs	r2, #1
 800327e:	2100      	movs	r1, #0
 8003280:	4807      	ldr	r0, [pc, #28]	@ (80032a0 <startadd+0x12c>)
 8003282:	f7fd fa1f 	bl	80006c4 <CLCD_SetCursor>
	CLCD_WriteString(&LCD1, "THE NGUOI LON");
 8003286:	4908      	ldr	r1, [pc, #32]	@ (80032a8 <startadd+0x134>)
 8003288:	4805      	ldr	r0, [pc, #20]	@ (80032a0 <startadd+0x12c>)
 800328a:	f7fd fa82 	bl	8000792 <CLCD_WriteString>
	HAL_Delay(1000);
 800328e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003292:	f000 fd09 	bl	8003ca8 <HAL_Delay>
	CLCD_Clear(&LCD1);
 8003296:	4802      	ldr	r0, [pc, #8]	@ (80032a0 <startadd+0x12c>)
 8003298:	f7fd fa92 	bl	80007c0 <CLCD_Clear>
}
 800329c:	bf00      	nop
 800329e:	bd80      	pop	{r7, pc}
 80032a0:	200000f4 	.word	0x200000f4
 80032a4:	08005f6c 	.word	0x08005f6c
 80032a8:	08005c80 	.word	0x08005c80
 80032ac:	200000e4 	.word	0x200000e4
 80032b0:	40010c00 	.word	0x40010c00
 80032b4:	20000018 	.word	0x20000018
 80032b8:	20000004 	.word	0x20000004
 80032bc:	08005f30 	.word	0x08005f30
 80032c0:	08005f7c 	.word	0x08005f7c

080032c4 <setaddress>:
void setaddress(void){
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b082      	sub	sp, #8
 80032c8:	af00      	add	r7, sp, #0
	uint32_t pt = StartAddressUID;
 80032ca:	4b0a      	ldr	r3, [pc, #40]	@ (80032f4 <setaddress+0x30>)
 80032cc:	607b      	str	r3, [r7, #4]
	while (Flash_Read_Byte(pt + 5) != 0xFF)
 80032ce:	e002      	b.n	80032d6 <setaddress+0x12>
	{
		pt = pt + 8;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	3308      	adds	r3, #8
 80032d4:	607b      	str	r3, [r7, #4]
	while (Flash_Read_Byte(pt + 5) != 0xFF)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	3305      	adds	r3, #5
 80032da:	4618      	mov	r0, r3
 80032dc:	f7fc ff8d 	bl	80001fa <Flash_Read_Byte>
 80032e0:	4603      	mov	r3, r0
 80032e2:	2bff      	cmp	r3, #255	@ 0xff
 80032e4:	d1f4      	bne.n	80032d0 <setaddress+0xc>
	}
	AddressUID = pt;
 80032e6:	4a04      	ldr	r2, [pc, #16]	@ (80032f8 <setaddress+0x34>)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6013      	str	r3, [r2, #0]
}
 80032ec:	bf00      	nop
 80032ee:	3708      	adds	r7, #8
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}
 80032f4:	0800a000 	.word	0x0800a000
 80032f8:	20000004 	.word	0x20000004

080032fc <password>:

void password(void){
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b086      	sub	sp, #24
 8003300:	af00      	add	r7, sp, #0
	CLCD_Clear(&LCD1);
 8003302:	4851      	ldr	r0, [pc, #324]	@ (8003448 <password+0x14c>)
 8003304:	f7fd fa5c 	bl	80007c0 <CLCD_Clear>
	CLCD_SetCursor(&LCD1, 0, 0);
 8003308:	2200      	movs	r2, #0
 800330a:	2100      	movs	r1, #0
 800330c:	484e      	ldr	r0, [pc, #312]	@ (8003448 <password+0x14c>)
 800330e:	f7fd f9d9 	bl	80006c4 <CLCD_SetCursor>
	CLCD_WriteString(&LCD1, "NHAP PASSWORD :");
 8003312:	494e      	ldr	r1, [pc, #312]	@ (800344c <password+0x150>)
 8003314:	484c      	ldr	r0, [pc, #304]	@ (8003448 <password+0x14c>)
 8003316:	f7fd fa3c 	bl	8000792 <CLCD_WriteString>
	exitmenu =120;
 800331a:	4b4d      	ldr	r3, [pc, #308]	@ (8003450 <password+0x154>)
 800331c:	2278      	movs	r2, #120	@ 0x78
 800331e:	701a      	strb	r2, [r3, #0]
	uint8_t pass[16] = {-1};
 8003320:	23ff      	movs	r3, #255	@ 0xff
 8003322:	607b      	str	r3, [r7, #4]
 8003324:	f107 0308 	add.w	r3, r7, #8
 8003328:	2200      	movs	r2, #0
 800332a:	601a      	str	r2, [r3, #0]
 800332c:	605a      	str	r2, [r3, #4]
 800332e:	609a      	str	r2, [r3, #8]
	uint8_t k=0;
 8003330:	2300      	movs	r3, #0
 8003332:	75fb      	strb	r3, [r7, #23]
	uint8_t pas = -1;
 8003334:	23ff      	movs	r3, #255	@ 0xff
 8003336:	75bb      	strb	r3, [r7, #22]
	HAL_Delay(1000);
 8003338:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800333c:	f000 fcb4 	bl	8003ca8 <HAL_Delay>
	while(checkbuton(MENU_GPIO_Port, MENU_Pin) != 0){}
 8003340:	bf00      	nop
 8003342:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003346:	4843      	ldr	r0, [pc, #268]	@ (8003454 <password+0x158>)
 8003348:	f7fd fd3e 	bl	8000dc8 <checkbuton>
 800334c:	4603      	mov	r3, r0
 800334e:	2b00      	cmp	r3, #0
 8003350:	d1f7      	bne.n	8003342 <password+0x46>
	CLCD_SetCursor(&LCD1, k, 1);
 8003352:	7dfb      	ldrb	r3, [r7, #23]
 8003354:	2201      	movs	r2, #1
 8003356:	4619      	mov	r1, r3
 8003358:	483b      	ldr	r0, [pc, #236]	@ (8003448 <password+0x14c>)
 800335a:	f7fd f9b3 	bl	80006c4 <CLCD_SetCursor>
	CLCD_WriteChar(&LCD1, 95);
 800335e:	215f      	movs	r1, #95	@ 0x5f
 8003360:	4839      	ldr	r0, [pc, #228]	@ (8003448 <password+0x14c>)
 8003362:	f7fd f9f7 	bl	8000754 <CLCD_WriteChar>
	while(exitmenu){
 8003366:	e066      	b.n	8003436 <password+0x13a>
		if(checkbuton(SELECCT_GPIO_Port, SELECCT_Pin) == 1){
 8003368:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800336c:	483a      	ldr	r0, [pc, #232]	@ (8003458 <password+0x15c>)
 800336e:	f7fd fd2b 	bl	8000dc8 <checkbuton>
 8003372:	4603      	mov	r3, r0
 8003374:	2b01      	cmp	r3, #1
 8003376:	d114      	bne.n	80033a2 <password+0xa6>
			pas++;
 8003378:	7dbb      	ldrb	r3, [r7, #22]
 800337a:	3301      	adds	r3, #1
 800337c:	75bb      	strb	r3, [r7, #22]
			if(pas == 10)	pas = 0;
 800337e:	7dbb      	ldrb	r3, [r7, #22]
 8003380:	2b0a      	cmp	r3, #10
 8003382:	d101      	bne.n	8003388 <password+0x8c>
 8003384:	2300      	movs	r3, #0
 8003386:	75bb      	strb	r3, [r7, #22]
			CLCD_SetCursor(&LCD1, k, 1);
 8003388:	7dfb      	ldrb	r3, [r7, #23]
 800338a:	2201      	movs	r2, #1
 800338c:	4619      	mov	r1, r3
 800338e:	482e      	ldr	r0, [pc, #184]	@ (8003448 <password+0x14c>)
 8003390:	f7fd f998 	bl	80006c4 <CLCD_SetCursor>
			CLCD_WriteChar(&LCD1, pas + 0x30);
 8003394:	7dbb      	ldrb	r3, [r7, #22]
 8003396:	3330      	adds	r3, #48	@ 0x30
 8003398:	b2db      	uxtb	r3, r3
 800339a:	4619      	mov	r1, r3
 800339c:	482a      	ldr	r0, [pc, #168]	@ (8003448 <password+0x14c>)
 800339e:	f7fd f9d9 	bl	8000754 <CLCD_WriteChar>
		}
		if(checkbuton(MENU_GPIO_Port, MENU_Pin) == 1){
 80033a2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80033a6:	482b      	ldr	r0, [pc, #172]	@ (8003454 <password+0x158>)
 80033a8:	f7fd fd0e 	bl	8000dc8 <checkbuton>
 80033ac:	4603      	mov	r3, r0
 80033ae:	2b01      	cmp	r3, #1
 80033b0:	d141      	bne.n	8003436 <password+0x13a>
			pass[k] = pas;
 80033b2:	7dfb      	ldrb	r3, [r7, #23]
 80033b4:	3318      	adds	r3, #24
 80033b6:	443b      	add	r3, r7
 80033b8:	7dba      	ldrb	r2, [r7, #22]
 80033ba:	f803 2c14 	strb.w	r2, [r3, #-20]
			k = k+1;
 80033be:	7dfb      	ldrb	r3, [r7, #23]
 80033c0:	3301      	adds	r3, #1
 80033c2:	75fb      	strb	r3, [r7, #23]
			pas = -1;
 80033c4:	23ff      	movs	r3, #255	@ 0xff
 80033c6:	75bb      	strb	r3, [r7, #22]
			if(k == 16){
 80033c8:	7dfb      	ldrb	r3, [r7, #23]
 80033ca:	2b10      	cmp	r3, #16
 80033cc:	d129      	bne.n	8003422 <password+0x126>
				for(uint8_t i = 0; i<16; i++){
 80033ce:	2300      	movs	r3, #0
 80033d0:	757b      	strb	r3, [r7, #21]
 80033d2:	e00c      	b.n	80033ee <password+0xf2>
					if(pass[i] != PassWord[i]){
 80033d4:	7d7b      	ldrb	r3, [r7, #21]
 80033d6:	3318      	adds	r3, #24
 80033d8:	443b      	add	r3, r7
 80033da:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 80033de:	7d7b      	ldrb	r3, [r7, #21]
 80033e0:	491e      	ldr	r1, [pc, #120]	@ (800345c <password+0x160>)
 80033e2:	5ccb      	ldrb	r3, [r1, r3]
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d12b      	bne.n	8003440 <password+0x144>
				for(uint8_t i = 0; i<16; i++){
 80033e8:	7d7b      	ldrb	r3, [r7, #21]
 80033ea:	3301      	adds	r3, #1
 80033ec:	757b      	strb	r3, [r7, #21]
 80033ee:	7d7b      	ldrb	r3, [r7, #21]
 80033f0:	2b0f      	cmp	r3, #15
 80033f2:	d9ef      	bls.n	80033d4 <password+0xd8>
						return;
					}
				}
				HAL_GPIO_WritePin(KHOA_GPIO_Port, KHOA_Pin, 1);
 80033f4:	2201      	movs	r2, #1
 80033f6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80033fa:	4817      	ldr	r0, [pc, #92]	@ (8003458 <password+0x15c>)
 80033fc:	f001 f921 	bl	8004642 <HAL_GPIO_WritePin>
				HAL_Delay(5000);
 8003400:	f241 3088 	movw	r0, #5000	@ 0x1388
 8003404:	f000 fc50 	bl	8003ca8 <HAL_Delay>
				HAL_GPIO_WritePin(KHOA_GPIO_Port, KHOA_Pin, 0);
 8003408:	2200      	movs	r2, #0
 800340a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800340e:	4812      	ldr	r0, [pc, #72]	@ (8003458 <password+0x15c>)
 8003410:	f001 f917 	bl	8004642 <HAL_GPIO_WritePin>
				resetflash();
 8003414:	f000 f824 	bl	8003460 <resetflash>
				startadd();
 8003418:	f7ff feac 	bl	8003174 <startadd>
				exitmenu =0;
 800341c:	4b0c      	ldr	r3, [pc, #48]	@ (8003450 <password+0x154>)
 800341e:	2200      	movs	r2, #0
 8003420:	701a      	strb	r2, [r3, #0]
			}
			CLCD_SetCursor(&LCD1, k, 1);
 8003422:	7dfb      	ldrb	r3, [r7, #23]
 8003424:	2201      	movs	r2, #1
 8003426:	4619      	mov	r1, r3
 8003428:	4807      	ldr	r0, [pc, #28]	@ (8003448 <password+0x14c>)
 800342a:	f7fd f94b 	bl	80006c4 <CLCD_SetCursor>
			CLCD_WriteChar(&LCD1, 95);
 800342e:	215f      	movs	r1, #95	@ 0x5f
 8003430:	4805      	ldr	r0, [pc, #20]	@ (8003448 <password+0x14c>)
 8003432:	f7fd f98f 	bl	8000754 <CLCD_WriteChar>
	while(exitmenu){
 8003436:	4b06      	ldr	r3, [pc, #24]	@ (8003450 <password+0x154>)
 8003438:	781b      	ldrb	r3, [r3, #0]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d194      	bne.n	8003368 <password+0x6c>
 800343e:	e000      	b.n	8003442 <password+0x146>
						return;
 8003440:	bf00      	nop
		}

	}

}
 8003442:	3718      	adds	r7, #24
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}
 8003448:	200000f4 	.word	0x200000f4
 800344c:	08005f8c 	.word	0x08005f8c
 8003450:	20000000 	.word	0x20000000
 8003454:	40010800 	.word	0x40010800
 8003458:	40010c00 	.word	0x40010c00
 800345c:	20000008 	.word	0x20000008

08003460 <resetflash>:
void resetflash(){
 8003460:	b580      	push	{r7, lr}
 8003462:	b082      	sub	sp, #8
 8003464:	af00      	add	r7, sp, #0
	uint32_t pt = StartAddressUID;
 8003466:	4b0b      	ldr	r3, [pc, #44]	@ (8003494 <resetflash+0x34>)
 8003468:	607b      	str	r3, [r7, #4]
	while(Flash_Read_8Byte(pt) != 0xFFFFFFFFFFFFFFFF){
 800346a:	e002      	b.n	8003472 <resetflash+0x12>
		Flash_Erase(pt);
 800346c:	6878      	ldr	r0, [r7, #4]
 800346e:	f7fc fe6d 	bl	800014c <Flash_Erase>
	while(Flash_Read_8Byte(pt) != 0xFFFFFFFFFFFFFFFF){
 8003472:	6878      	ldr	r0, [r7, #4]
 8003474:	f7fc fed9 	bl	800022a <Flash_Read_8Byte>
 8003478:	4602      	mov	r2, r0
 800347a:	460b      	mov	r3, r1
 800347c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003480:	bf08      	it	eq
 8003482:	f1b2 3fff 	cmpeq.w	r2, #4294967295	@ 0xffffffff
 8003486:	d1f1      	bne.n	800346c <resetflash+0xc>
	}
}
 8003488:	bf00      	nop
 800348a:	bf00      	nop
 800348c:	3708      	adds	r7, #8
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}
 8003492:	bf00      	nop
 8003494:	0800a000 	.word	0x0800a000

08003498 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003498:	b480      	push	{r7}
 800349a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800349c:	b672      	cpsid	i
}
 800349e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80034a0:	bf00      	nop
 80034a2:	e7fd      	b.n	80034a0 <Error_Handler+0x8>

080034a4 <TM_SPI_Send>:
extern SPI_HandleTypeDef hspi1;
extern uint8_t back_data[12],m;
RC522_DATA  		rc522;

uint8_t TM_SPI_Send(uint8_t data)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b086      	sub	sp, #24
 80034a8:	af02      	add	r7, sp, #8
 80034aa:	4603      	mov	r3, r0
 80034ac:	71fb      	strb	r3, [r7, #7]
	uint8_t data_se[1], data_re[1];
	data_se[0] = data;
 80034ae:	79fb      	ldrb	r3, [r7, #7]
 80034b0:	733b      	strb	r3, [r7, #12]
	while(!__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_TXE));
 80034b2:	bf00      	nop
 80034b4:	4b0e      	ldr	r3, [pc, #56]	@ (80034f0 <TM_SPI_Send+0x4c>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	f003 0302 	and.w	r3, r3, #2
 80034be:	2b02      	cmp	r3, #2
 80034c0:	d1f8      	bne.n	80034b4 <TM_SPI_Send+0x10>
	HAL_SPI_TransmitReceive(&hspi1, data_se, data_re, 1, 10);
 80034c2:	f107 0208 	add.w	r2, r7, #8
 80034c6:	f107 010c 	add.w	r1, r7, #12
 80034ca:	230a      	movs	r3, #10
 80034cc:	9300      	str	r3, [sp, #0]
 80034ce:	2301      	movs	r3, #1
 80034d0:	4807      	ldr	r0, [pc, #28]	@ (80034f0 <TM_SPI_Send+0x4c>)
 80034d2:	f001 fd53 	bl	8004f7c <HAL_SPI_TransmitReceive>
	while(__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_BSY));	/*!< Send byte through the SPI1 peripheral */
 80034d6:	bf00      	nop
 80034d8:	4b05      	ldr	r3, [pc, #20]	@ (80034f0 <TM_SPI_Send+0x4c>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034e2:	2b80      	cmp	r3, #128	@ 0x80
 80034e4:	d0f8      	beq.n	80034d8 <TM_SPI_Send+0x34>
	return data_re[0];
 80034e6:	7a3b      	ldrb	r3, [r7, #8]

}
 80034e8:	4618      	mov	r0, r3
 80034ea:	3710      	adds	r7, #16
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}
 80034f0:	20000044 	.word	0x20000044

080034f4 <TM_MFRC522_Init>:


void TM_MFRC522_Init(void)
	{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	af00      	add	r7, sp, #0

	TM_MFRC522_Reset();
 80034f8:	f000 f8d5 	bl	80036a6 <TM_MFRC522_Reset>

	TM_MFRC522_WriteRegister(MFRC522_REG_T_MODE, 0x8D);
 80034fc:	218d      	movs	r1, #141	@ 0x8d
 80034fe:	202a      	movs	r0, #42	@ 0x2a
 8003500:	f000 f836 	bl	8003570 <TM_MFRC522_WriteRegister>
	TM_MFRC522_WriteRegister(MFRC522_REG_T_PRESCALER, 0x3E);
 8003504:	213e      	movs	r1, #62	@ 0x3e
 8003506:	202b      	movs	r0, #43	@ 0x2b
 8003508:	f000 f832 	bl	8003570 <TM_MFRC522_WriteRegister>
	TM_MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_L, 30);
 800350c:	211e      	movs	r1, #30
 800350e:	202d      	movs	r0, #45	@ 0x2d
 8003510:	f000 f82e 	bl	8003570 <TM_MFRC522_WriteRegister>
	TM_MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_H, 0);
 8003514:	2100      	movs	r1, #0
 8003516:	202c      	movs	r0, #44	@ 0x2c
 8003518:	f000 f82a 	bl	8003570 <TM_MFRC522_WriteRegister>

	/* 48dB gain */
	TM_MFRC522_WriteRegister(MFRC522_REG_RF_CFG, 0x70);
 800351c:	2170      	movs	r1, #112	@ 0x70
 800351e:	2026      	movs	r0, #38	@ 0x26
 8003520:	f000 f826 	bl	8003570 <TM_MFRC522_WriteRegister>

	TM_MFRC522_WriteRegister(MFRC522_REG_TX_AUTO, 0x40);
 8003524:	2140      	movs	r1, #64	@ 0x40
 8003526:	2015      	movs	r0, #21
 8003528:	f000 f822 	bl	8003570 <TM_MFRC522_WriteRegister>
	TM_MFRC522_WriteRegister(MFRC522_REG_MODE, 0x3D);
 800352c:	213d      	movs	r1, #61	@ 0x3d
 800352e:	2011      	movs	r0, #17
 8003530:	f000 f81e 	bl	8003570 <TM_MFRC522_WriteRegister>

	TM_MFRC522_AntennaOn();		//Open the antenna
 8003534:	f000 f8a2 	bl	800367c <TM_MFRC522_AntennaOn>
}
 8003538:	bf00      	nop
 800353a:	bd80      	pop	{r7, pc}

0800353c <TM_MFRC522_Check>:

TM_MFRC522_Status_t TM_MFRC522_Check(uint8_t* id) {
 800353c:	b580      	push	{r7, lr}
 800353e:	b084      	sub	sp, #16
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
	TM_MFRC522_Status_t status;
	//Find cards, return card type

	status = TM_MFRC522_Request(PICC_REQIDL, id);
 8003544:	6879      	ldr	r1, [r7, #4]
 8003546:	2026      	movs	r0, #38	@ 0x26
 8003548:	f000 f8b5 	bl	80036b6 <TM_MFRC522_Request>
 800354c:	4603      	mov	r3, r0
 800354e:	73fb      	strb	r3, [r7, #15]

	if (status == MI_OK) {
 8003550:	7bfb      	ldrb	r3, [r7, #15]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d104      	bne.n	8003560 <TM_MFRC522_Check+0x24>
		//Card detected
		//Anti-collision, return card serial number 4 bytes
		status = TM_MFRC522_Anticoll(id);
 8003556:	6878      	ldr	r0, [r7, #4]
 8003558:	f000 f9a1 	bl	800389e <TM_MFRC522_Anticoll>
 800355c:	4603      	mov	r3, r0
 800355e:	73fb      	strb	r3, [r7, #15]
	}
	TM_MFRC522_Halt();			//Command card into hibernation
 8003560:	f000 fa23 	bl	80039aa <TM_MFRC522_Halt>
	return status;
 8003564:	7bfb      	ldrb	r3, [r7, #15]
}
 8003566:	4618      	mov	r0, r3
 8003568:	3710      	adds	r7, #16
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}
	...

08003570 <TM_MFRC522_WriteRegister>:
	}
	return MI_OK;
}


void TM_MFRC522_WriteRegister(uint8_t addr, uint8_t val) {
 8003570:	b580      	push	{r7, lr}
 8003572:	b082      	sub	sp, #8
 8003574:	af00      	add	r7, sp, #0
 8003576:	4603      	mov	r3, r0
 8003578:	460a      	mov	r2, r1
 800357a:	71fb      	strb	r3, [r7, #7]
 800357c:	4613      	mov	r3, r2
 800357e:	71bb      	strb	r3, [r7, #6]
	//CS low
	MFRC522_CS_LOW;
 8003580:	2200      	movs	r2, #0
 8003582:	2110      	movs	r1, #16
 8003584:	480c      	ldr	r0, [pc, #48]	@ (80035b8 <TM_MFRC522_WriteRegister+0x48>)
 8003586:	f001 f85c 	bl	8004642 <HAL_GPIO_WritePin>
	//Send address
	TM_SPI_Send((addr << 1) & 0x7E);
 800358a:	79fb      	ldrb	r3, [r7, #7]
 800358c:	005b      	lsls	r3, r3, #1
 800358e:	b2db      	uxtb	r3, r3
 8003590:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8003594:	b2db      	uxtb	r3, r3
 8003596:	4618      	mov	r0, r3
 8003598:	f7ff ff84 	bl	80034a4 <TM_SPI_Send>
	//Send data
	TM_SPI_Send(val);
 800359c:	79bb      	ldrb	r3, [r7, #6]
 800359e:	4618      	mov	r0, r3
 80035a0:	f7ff ff80 	bl	80034a4 <TM_SPI_Send>
	//CS high
	MFRC522_CS_HIGH;
 80035a4:	2201      	movs	r2, #1
 80035a6:	2110      	movs	r1, #16
 80035a8:	4803      	ldr	r0, [pc, #12]	@ (80035b8 <TM_MFRC522_WriteRegister+0x48>)
 80035aa:	f001 f84a 	bl	8004642 <HAL_GPIO_WritePin>
}
 80035ae:	bf00      	nop
 80035b0:	3708      	adds	r7, #8
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}
 80035b6:	bf00      	nop
 80035b8:	40010800 	.word	0x40010800

080035bc <TM_MFRC522_ReadRegister>:

uint8_t TM_MFRC522_ReadRegister(uint8_t addr) {
 80035bc:	b580      	push	{r7, lr}
 80035be:	b084      	sub	sp, #16
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	4603      	mov	r3, r0
 80035c4:	71fb      	strb	r3, [r7, #7]
	uint8_t val;
	//CS low
	MFRC522_CS_LOW;
 80035c6:	2200      	movs	r2, #0
 80035c8:	2110      	movs	r1, #16
 80035ca:	480f      	ldr	r0, [pc, #60]	@ (8003608 <TM_MFRC522_ReadRegister+0x4c>)
 80035cc:	f001 f839 	bl	8004642 <HAL_GPIO_WritePin>

	TM_SPI_Send(((addr << 1) & 0x7E) | 0x80);
 80035d0:	79fb      	ldrb	r3, [r7, #7]
 80035d2:	005b      	lsls	r3, r3, #1
 80035d4:	b25b      	sxtb	r3, r3
 80035d6:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 80035da:	b25b      	sxtb	r3, r3
 80035dc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80035e0:	b25b      	sxtb	r3, r3
 80035e2:	b2db      	uxtb	r3, r3
 80035e4:	4618      	mov	r0, r3
 80035e6:	f7ff ff5d 	bl	80034a4 <TM_SPI_Send>
	val = TM_SPI_Send(MFRC522_DUMMY);
 80035ea:	2000      	movs	r0, #0
 80035ec:	f7ff ff5a 	bl	80034a4 <TM_SPI_Send>
 80035f0:	4603      	mov	r3, r0
 80035f2:	73fb      	strb	r3, [r7, #15]
	//CS high
	MFRC522_CS_HIGH;
 80035f4:	2201      	movs	r2, #1
 80035f6:	2110      	movs	r1, #16
 80035f8:	4803      	ldr	r0, [pc, #12]	@ (8003608 <TM_MFRC522_ReadRegister+0x4c>)
 80035fa:	f001 f822 	bl	8004642 <HAL_GPIO_WritePin>

	return val;
 80035fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003600:	4618      	mov	r0, r3
 8003602:	3710      	adds	r7, #16
 8003604:	46bd      	mov	sp, r7
 8003606:	bd80      	pop	{r7, pc}
 8003608:	40010800 	.word	0x40010800

0800360c <TM_MFRC522_SetBitMask>:

void TM_MFRC522_SetBitMask(uint8_t reg, uint8_t mask) {
 800360c:	b580      	push	{r7, lr}
 800360e:	b082      	sub	sp, #8
 8003610:	af00      	add	r7, sp, #0
 8003612:	4603      	mov	r3, r0
 8003614:	460a      	mov	r2, r1
 8003616:	71fb      	strb	r3, [r7, #7]
 8003618:	4613      	mov	r3, r2
 800361a:	71bb      	strb	r3, [r7, #6]
	TM_MFRC522_WriteRegister(reg, TM_MFRC522_ReadRegister(reg) | mask);
 800361c:	79fb      	ldrb	r3, [r7, #7]
 800361e:	4618      	mov	r0, r3
 8003620:	f7ff ffcc 	bl	80035bc <TM_MFRC522_ReadRegister>
 8003624:	4603      	mov	r3, r0
 8003626:	461a      	mov	r2, r3
 8003628:	79bb      	ldrb	r3, [r7, #6]
 800362a:	4313      	orrs	r3, r2
 800362c:	b2da      	uxtb	r2, r3
 800362e:	79fb      	ldrb	r3, [r7, #7]
 8003630:	4611      	mov	r1, r2
 8003632:	4618      	mov	r0, r3
 8003634:	f7ff ff9c 	bl	8003570 <TM_MFRC522_WriteRegister>
}
 8003638:	bf00      	nop
 800363a:	3708      	adds	r7, #8
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}

08003640 <TM_MFRC522_ClearBitMask>:

void TM_MFRC522_ClearBitMask(uint8_t reg, uint8_t mask){
 8003640:	b580      	push	{r7, lr}
 8003642:	b082      	sub	sp, #8
 8003644:	af00      	add	r7, sp, #0
 8003646:	4603      	mov	r3, r0
 8003648:	460a      	mov	r2, r1
 800364a:	71fb      	strb	r3, [r7, #7]
 800364c:	4613      	mov	r3, r2
 800364e:	71bb      	strb	r3, [r7, #6]
	TM_MFRC522_WriteRegister(reg, TM_MFRC522_ReadRegister(reg) & (~mask));
 8003650:	79fb      	ldrb	r3, [r7, #7]
 8003652:	4618      	mov	r0, r3
 8003654:	f7ff ffb2 	bl	80035bc <TM_MFRC522_ReadRegister>
 8003658:	4603      	mov	r3, r0
 800365a:	b25a      	sxtb	r2, r3
 800365c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8003660:	43db      	mvns	r3, r3
 8003662:	b25b      	sxtb	r3, r3
 8003664:	4013      	ands	r3, r2
 8003666:	b25b      	sxtb	r3, r3
 8003668:	b2da      	uxtb	r2, r3
 800366a:	79fb      	ldrb	r3, [r7, #7]
 800366c:	4611      	mov	r1, r2
 800366e:	4618      	mov	r0, r3
 8003670:	f7ff ff7e 	bl	8003570 <TM_MFRC522_WriteRegister>
}
 8003674:	bf00      	nop
 8003676:	3708      	adds	r7, #8
 8003678:	46bd      	mov	sp, r7
 800367a:	bd80      	pop	{r7, pc}

0800367c <TM_MFRC522_AntennaOn>:

void TM_MFRC522_AntennaOn(void) {
 800367c:	b580      	push	{r7, lr}
 800367e:	b082      	sub	sp, #8
 8003680:	af00      	add	r7, sp, #0
	uint8_t temp;

	temp = TM_MFRC522_ReadRegister(MFRC522_REG_TX_CONTROL);
 8003682:	2014      	movs	r0, #20
 8003684:	f7ff ff9a 	bl	80035bc <TM_MFRC522_ReadRegister>
 8003688:	4603      	mov	r3, r0
 800368a:	71fb      	strb	r3, [r7, #7]
	if (!(temp & 0x03)) {
 800368c:	79fb      	ldrb	r3, [r7, #7]
 800368e:	f003 0303 	and.w	r3, r3, #3
 8003692:	2b00      	cmp	r3, #0
 8003694:	d103      	bne.n	800369e <TM_MFRC522_AntennaOn+0x22>
		TM_MFRC522_SetBitMask(MFRC522_REG_TX_CONTROL, 0x03);
 8003696:	2103      	movs	r1, #3
 8003698:	2014      	movs	r0, #20
 800369a:	f7ff ffb7 	bl	800360c <TM_MFRC522_SetBitMask>
	}
}
 800369e:	bf00      	nop
 80036a0:	3708      	adds	r7, #8
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}

080036a6 <TM_MFRC522_Reset>:

void TM_MFRC522_AntennaOff(void) {
	TM_MFRC522_ClearBitMask(MFRC522_REG_TX_CONTROL, 0x03);
}

void TM_MFRC522_Reset(void) {
 80036a6:	b580      	push	{r7, lr}
 80036a8:	af00      	add	r7, sp, #0
	TM_MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_RESETPHASE);
 80036aa:	210f      	movs	r1, #15
 80036ac:	2001      	movs	r0, #1
 80036ae:	f7ff ff5f 	bl	8003570 <TM_MFRC522_WriteRegister>
}
 80036b2:	bf00      	nop
 80036b4:	bd80      	pop	{r7, pc}

080036b6 <TM_MFRC522_Request>:

TM_MFRC522_Status_t TM_MFRC522_Request(uint8_t reqMode, uint8_t* TagType) {
 80036b6:	b580      	push	{r7, lr}
 80036b8:	b086      	sub	sp, #24
 80036ba:	af02      	add	r7, sp, #8
 80036bc:	4603      	mov	r3, r0
 80036be:	6039      	str	r1, [r7, #0]
 80036c0:	71fb      	strb	r3, [r7, #7]
	TM_MFRC522_Status_t status;
	uint16_t backBits;			//The received data bits

	TM_MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x07);		//TxLastBists = BitFramingReg[2..0]	???
 80036c2:	2107      	movs	r1, #7
 80036c4:	200d      	movs	r0, #13
 80036c6:	f7ff ff53 	bl	8003570 <TM_MFRC522_WriteRegister>

	TagType[0] = reqMode;
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	79fa      	ldrb	r2, [r7, #7]
 80036ce:	701a      	strb	r2, [r3, #0]
	status = TM_MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 80036d0:	f107 030c 	add.w	r3, r7, #12
 80036d4:	9300      	str	r3, [sp, #0]
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	2201      	movs	r2, #1
 80036da:	6839      	ldr	r1, [r7, #0]
 80036dc:	200c      	movs	r0, #12
 80036de:	f000 f80f 	bl	8003700 <TM_MFRC522_ToCard>
 80036e2:	4603      	mov	r3, r0
 80036e4:	73fb      	strb	r3, [r7, #15]
	if ((status != MI_OK) || (backBits != 0x10)) {
 80036e6:	7bfb      	ldrb	r3, [r7, #15]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d102      	bne.n	80036f2 <TM_MFRC522_Request+0x3c>
 80036ec:	89bb      	ldrh	r3, [r7, #12]
 80036ee:	2b10      	cmp	r3, #16
 80036f0:	d001      	beq.n	80036f6 <TM_MFRC522_Request+0x40>
		status = MI_ERR;
 80036f2:	2302      	movs	r3, #2
 80036f4:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 80036f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	3710      	adds	r7, #16
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}

08003700 <TM_MFRC522_ToCard>:

TM_MFRC522_Status_t TM_MFRC522_ToCard(uint8_t command, uint8_t* sendData, uint8_t sendLen, uint8_t* backData, uint16_t* backLen) {
 8003700:	b590      	push	{r4, r7, lr}
 8003702:	b087      	sub	sp, #28
 8003704:	af00      	add	r7, sp, #0
 8003706:	60b9      	str	r1, [r7, #8]
 8003708:	607b      	str	r3, [r7, #4]
 800370a:	4603      	mov	r3, r0
 800370c:	73fb      	strb	r3, [r7, #15]
 800370e:	4613      	mov	r3, r2
 8003710:	73bb      	strb	r3, [r7, #14]
	TM_MFRC522_Status_t status = MI_ERR;
 8003712:	2302      	movs	r3, #2
 8003714:	75fb      	strb	r3, [r7, #23]
	uint8_t irqEn = 0x00;
 8003716:	2300      	movs	r3, #0
 8003718:	75bb      	strb	r3, [r7, #22]
	uint8_t waitIRq = 0x00;
 800371a:	2300      	movs	r3, #0
 800371c:	757b      	strb	r3, [r7, #21]
	uint8_t lastBits;
	uint8_t n;
	uint16_t i;

	switch (command) {
 800371e:	7bfb      	ldrb	r3, [r7, #15]
 8003720:	2b0c      	cmp	r3, #12
 8003722:	d006      	beq.n	8003732 <TM_MFRC522_ToCard+0x32>
 8003724:	2b0e      	cmp	r3, #14
 8003726:	d109      	bne.n	800373c <TM_MFRC522_ToCard+0x3c>
		case PCD_AUTHENT: {
			irqEn = 0x12;
 8003728:	2312      	movs	r3, #18
 800372a:	75bb      	strb	r3, [r7, #22]
			waitIRq = 0x10;
 800372c:	2310      	movs	r3, #16
 800372e:	757b      	strb	r3, [r7, #21]
			break;
 8003730:	e005      	b.n	800373e <TM_MFRC522_ToCard+0x3e>
		}
		case PCD_TRANSCEIVE: {
			irqEn = 0x77;
 8003732:	2377      	movs	r3, #119	@ 0x77
 8003734:	75bb      	strb	r3, [r7, #22]
			waitIRq = 0x30;
 8003736:	2330      	movs	r3, #48	@ 0x30
 8003738:	757b      	strb	r3, [r7, #21]
			break;
 800373a:	e000      	b.n	800373e <TM_MFRC522_ToCard+0x3e>
		}
		default:
			break;
 800373c:	bf00      	nop
	}

	TM_MFRC522_WriteRegister(MFRC522_REG_COMM_IE_N, irqEn | 0x80);
 800373e:	7dbb      	ldrb	r3, [r7, #22]
 8003740:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003744:	b2db      	uxtb	r3, r3
 8003746:	4619      	mov	r1, r3
 8003748:	2002      	movs	r0, #2
 800374a:	f7ff ff11 	bl	8003570 <TM_MFRC522_WriteRegister>
	TM_MFRC522_ClearBitMask(MFRC522_REG_COMM_IRQ, 0x80);
 800374e:	2180      	movs	r1, #128	@ 0x80
 8003750:	2004      	movs	r0, #4
 8003752:	f7ff ff75 	bl	8003640 <TM_MFRC522_ClearBitMask>
	TM_MFRC522_SetBitMask(MFRC522_REG_FIFO_LEVEL, 0x80);
 8003756:	2180      	movs	r1, #128	@ 0x80
 8003758:	200a      	movs	r0, #10
 800375a:	f7ff ff57 	bl	800360c <TM_MFRC522_SetBitMask>

	TM_MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_IDLE);
 800375e:	2100      	movs	r1, #0
 8003760:	2001      	movs	r0, #1
 8003762:	f7ff ff05 	bl	8003570 <TM_MFRC522_WriteRegister>

	//Writing data to the FIFO
	for (i = 0; i < sendLen; i++) {
 8003766:	2300      	movs	r3, #0
 8003768:	827b      	strh	r3, [r7, #18]
 800376a:	e00a      	b.n	8003782 <TM_MFRC522_ToCard+0x82>
		TM_MFRC522_WriteRegister(MFRC522_REG_FIFO_DATA, sendData[i]);
 800376c:	8a7b      	ldrh	r3, [r7, #18]
 800376e:	68ba      	ldr	r2, [r7, #8]
 8003770:	4413      	add	r3, r2
 8003772:	781b      	ldrb	r3, [r3, #0]
 8003774:	4619      	mov	r1, r3
 8003776:	2009      	movs	r0, #9
 8003778:	f7ff fefa 	bl	8003570 <TM_MFRC522_WriteRegister>
	for (i = 0; i < sendLen; i++) {
 800377c:	8a7b      	ldrh	r3, [r7, #18]
 800377e:	3301      	adds	r3, #1
 8003780:	827b      	strh	r3, [r7, #18]
 8003782:	7bbb      	ldrb	r3, [r7, #14]
 8003784:	b29b      	uxth	r3, r3
 8003786:	8a7a      	ldrh	r2, [r7, #18]
 8003788:	429a      	cmp	r2, r3
 800378a:	d3ef      	bcc.n	800376c <TM_MFRC522_ToCard+0x6c>
	}

	//Execute the command
	TM_MFRC522_WriteRegister(MFRC522_REG_COMMAND, command);
 800378c:	7bfb      	ldrb	r3, [r7, #15]
 800378e:	4619      	mov	r1, r3
 8003790:	2001      	movs	r0, #1
 8003792:	f7ff feed 	bl	8003570 <TM_MFRC522_WriteRegister>
	if (command == PCD_TRANSCEIVE) {
 8003796:	7bfb      	ldrb	r3, [r7, #15]
 8003798:	2b0c      	cmp	r3, #12
 800379a:	d103      	bne.n	80037a4 <TM_MFRC522_ToCard+0xa4>
		TM_MFRC522_SetBitMask(MFRC522_REG_BIT_FRAMING, 0x80);		//StartSend=1,transmission of data starts
 800379c:	2180      	movs	r1, #128	@ 0x80
 800379e:	200d      	movs	r0, #13
 80037a0:	f7ff ff34 	bl	800360c <TM_MFRC522_SetBitMask>
	}

	//Waiting to receive data to complete
	i = 2000;	//i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms???
 80037a4:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80037a8:	827b      	strh	r3, [r7, #18]
	do {
		//CommIrqReg[7..0]
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
		n = TM_MFRC522_ReadRegister(MFRC522_REG_COMM_IRQ);
 80037aa:	2004      	movs	r0, #4
 80037ac:	f7ff ff06 	bl	80035bc <TM_MFRC522_ReadRegister>
 80037b0:	4603      	mov	r3, r0
 80037b2:	753b      	strb	r3, [r7, #20]
		i--;
 80037b4:	8a7b      	ldrh	r3, [r7, #18]
 80037b6:	3b01      	subs	r3, #1
 80037b8:	827b      	strh	r3, [r7, #18]
	} while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 80037ba:	8a7b      	ldrh	r3, [r7, #18]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d00a      	beq.n	80037d6 <TM_MFRC522_ToCard+0xd6>
 80037c0:	7d3b      	ldrb	r3, [r7, #20]
 80037c2:	f003 0301 	and.w	r3, r3, #1
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d105      	bne.n	80037d6 <TM_MFRC522_ToCard+0xd6>
 80037ca:	7d3a      	ldrb	r2, [r7, #20]
 80037cc:	7d7b      	ldrb	r3, [r7, #21]
 80037ce:	4013      	ands	r3, r2
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d0e9      	beq.n	80037aa <TM_MFRC522_ToCard+0xaa>

	TM_MFRC522_ClearBitMask(MFRC522_REG_BIT_FRAMING, 0x80);			//StartSend=0
 80037d6:	2180      	movs	r1, #128	@ 0x80
 80037d8:	200d      	movs	r0, #13
 80037da:	f7ff ff31 	bl	8003640 <TM_MFRC522_ClearBitMask>

	if (i != 0)  {
 80037de:	8a7b      	ldrh	r3, [r7, #18]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d057      	beq.n	8003894 <TM_MFRC522_ToCard+0x194>
		if (!(TM_MFRC522_ReadRegister(MFRC522_REG_ERROR) & 0x1B)) {
 80037e4:	2006      	movs	r0, #6
 80037e6:	f7ff fee9 	bl	80035bc <TM_MFRC522_ReadRegister>
 80037ea:	4603      	mov	r3, r0
 80037ec:	f003 031b 	and.w	r3, r3, #27
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d14d      	bne.n	8003890 <TM_MFRC522_ToCard+0x190>
			status = MI_OK;
 80037f4:	2300      	movs	r3, #0
 80037f6:	75fb      	strb	r3, [r7, #23]
			if (n & irqEn & 0x01) {
 80037f8:	7d3a      	ldrb	r2, [r7, #20]
 80037fa:	7dbb      	ldrb	r3, [r7, #22]
 80037fc:	4013      	ands	r3, r2
 80037fe:	b2db      	uxtb	r3, r3
 8003800:	f003 0301 	and.w	r3, r3, #1
 8003804:	2b00      	cmp	r3, #0
 8003806:	d001      	beq.n	800380c <TM_MFRC522_ToCard+0x10c>
				status = MI_NOTAGERR;
 8003808:	2301      	movs	r3, #1
 800380a:	75fb      	strb	r3, [r7, #23]
			}

			if (command == PCD_TRANSCEIVE) {
 800380c:	7bfb      	ldrb	r3, [r7, #15]
 800380e:	2b0c      	cmp	r3, #12
 8003810:	d140      	bne.n	8003894 <TM_MFRC522_ToCard+0x194>
				n = TM_MFRC522_ReadRegister(MFRC522_REG_FIFO_LEVEL);
 8003812:	200a      	movs	r0, #10
 8003814:	f7ff fed2 	bl	80035bc <TM_MFRC522_ReadRegister>
 8003818:	4603      	mov	r3, r0
 800381a:	753b      	strb	r3, [r7, #20]
				lastBits = TM_MFRC522_ReadRegister(MFRC522_REG_CONTROL) & 0x07;
 800381c:	200c      	movs	r0, #12
 800381e:	f7ff fecd 	bl	80035bc <TM_MFRC522_ReadRegister>
 8003822:	4603      	mov	r3, r0
 8003824:	f003 0307 	and.w	r3, r3, #7
 8003828:	747b      	strb	r3, [r7, #17]
				if (lastBits) {
 800382a:	7c7b      	ldrb	r3, [r7, #17]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d00b      	beq.n	8003848 <TM_MFRC522_ToCard+0x148>
					*backLen = (n - 1) * 8 + lastBits;
 8003830:	7d3b      	ldrb	r3, [r7, #20]
 8003832:	3b01      	subs	r3, #1
 8003834:	b29b      	uxth	r3, r3
 8003836:	00db      	lsls	r3, r3, #3
 8003838:	b29a      	uxth	r2, r3
 800383a:	7c7b      	ldrb	r3, [r7, #17]
 800383c:	b29b      	uxth	r3, r3
 800383e:	4413      	add	r3, r2
 8003840:	b29a      	uxth	r2, r3
 8003842:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003844:	801a      	strh	r2, [r3, #0]
 8003846:	e005      	b.n	8003854 <TM_MFRC522_ToCard+0x154>
				} else {
					*backLen = n * 8;
 8003848:	7d3b      	ldrb	r3, [r7, #20]
 800384a:	b29b      	uxth	r3, r3
 800384c:	00db      	lsls	r3, r3, #3
 800384e:	b29a      	uxth	r2, r3
 8003850:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003852:	801a      	strh	r2, [r3, #0]
				}

				if (n == 0) {
 8003854:	7d3b      	ldrb	r3, [r7, #20]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d101      	bne.n	800385e <TM_MFRC522_ToCard+0x15e>
					n = 1;
 800385a:	2301      	movs	r3, #1
 800385c:	753b      	strb	r3, [r7, #20]
				}
				if (n > MFRC522_MAX_LEN) {
 800385e:	7d3b      	ldrb	r3, [r7, #20]
 8003860:	2b10      	cmp	r3, #16
 8003862:	d901      	bls.n	8003868 <TM_MFRC522_ToCard+0x168>
					n = MFRC522_MAX_LEN;
 8003864:	2310      	movs	r3, #16
 8003866:	753b      	strb	r3, [r7, #20]
				}

				//Reading the received data in FIFO
				for (i = 0; i < n; i++) {
 8003868:	2300      	movs	r3, #0
 800386a:	827b      	strh	r3, [r7, #18]
 800386c:	e00a      	b.n	8003884 <TM_MFRC522_ToCard+0x184>
					backData[i] = TM_MFRC522_ReadRegister(MFRC522_REG_FIFO_DATA);
 800386e:	8a7b      	ldrh	r3, [r7, #18]
 8003870:	687a      	ldr	r2, [r7, #4]
 8003872:	18d4      	adds	r4, r2, r3
 8003874:	2009      	movs	r0, #9
 8003876:	f7ff fea1 	bl	80035bc <TM_MFRC522_ReadRegister>
 800387a:	4603      	mov	r3, r0
 800387c:	7023      	strb	r3, [r4, #0]
				for (i = 0; i < n; i++) {
 800387e:	8a7b      	ldrh	r3, [r7, #18]
 8003880:	3301      	adds	r3, #1
 8003882:	827b      	strh	r3, [r7, #18]
 8003884:	7d3b      	ldrb	r3, [r7, #20]
 8003886:	b29b      	uxth	r3, r3
 8003888:	8a7a      	ldrh	r2, [r7, #18]
 800388a:	429a      	cmp	r2, r3
 800388c:	d3ef      	bcc.n	800386e <TM_MFRC522_ToCard+0x16e>
 800388e:	e001      	b.n	8003894 <TM_MFRC522_ToCard+0x194>
				}
			}
		} else {
			status = MI_ERR;
 8003890:	2302      	movs	r3, #2
 8003892:	75fb      	strb	r3, [r7, #23]
		}
	}

	return status;
 8003894:	7dfb      	ldrb	r3, [r7, #23]
}
 8003896:	4618      	mov	r0, r3
 8003898:	371c      	adds	r7, #28
 800389a:	46bd      	mov	sp, r7
 800389c:	bd90      	pop	{r4, r7, pc}

0800389e <TM_MFRC522_Anticoll>:

TM_MFRC522_Status_t TM_MFRC522_Anticoll(uint8_t* serNum) {
 800389e:	b580      	push	{r7, lr}
 80038a0:	b086      	sub	sp, #24
 80038a2:	af02      	add	r7, sp, #8
 80038a4:	6078      	str	r0, [r7, #4]
	TM_MFRC522_Status_t status;
	uint8_t i;
	uint8_t serNumCheck = 0;
 80038a6:	2300      	movs	r3, #0
 80038a8:	737b      	strb	r3, [r7, #13]
	uint16_t unLen;

	TM_MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x00);		//TxLastBists = BitFramingReg[2..0]
 80038aa:	2100      	movs	r1, #0
 80038ac:	200d      	movs	r0, #13
 80038ae:	f7ff fe5f 	bl	8003570 <TM_MFRC522_WriteRegister>

	serNum[0] = PICC_ANTICOLL;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2293      	movs	r2, #147	@ 0x93
 80038b6:	701a      	strb	r2, [r3, #0]
	serNum[1] = 0x20;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	3301      	adds	r3, #1
 80038bc:	2220      	movs	r2, #32
 80038be:	701a      	strb	r2, [r3, #0]
	status = TM_MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 80038c0:	f107 030a 	add.w	r3, r7, #10
 80038c4:	9300      	str	r3, [sp, #0]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2202      	movs	r2, #2
 80038ca:	6879      	ldr	r1, [r7, #4]
 80038cc:	200c      	movs	r0, #12
 80038ce:	f7ff ff17 	bl	8003700 <TM_MFRC522_ToCard>
 80038d2:	4603      	mov	r3, r0
 80038d4:	73fb      	strb	r3, [r7, #15]

	if (status == MI_OK) {
 80038d6:	7bfb      	ldrb	r3, [r7, #15]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d118      	bne.n	800390e <TM_MFRC522_Anticoll+0x70>
		//Check card serial number
		for (i = 0; i < 4; i++) {
 80038dc:	2300      	movs	r3, #0
 80038de:	73bb      	strb	r3, [r7, #14]
 80038e0:	e009      	b.n	80038f6 <TM_MFRC522_Anticoll+0x58>
			serNumCheck ^= serNum[i];
 80038e2:	7bbb      	ldrb	r3, [r7, #14]
 80038e4:	687a      	ldr	r2, [r7, #4]
 80038e6:	4413      	add	r3, r2
 80038e8:	781a      	ldrb	r2, [r3, #0]
 80038ea:	7b7b      	ldrb	r3, [r7, #13]
 80038ec:	4053      	eors	r3, r2
 80038ee:	737b      	strb	r3, [r7, #13]
		for (i = 0; i < 4; i++) {
 80038f0:	7bbb      	ldrb	r3, [r7, #14]
 80038f2:	3301      	adds	r3, #1
 80038f4:	73bb      	strb	r3, [r7, #14]
 80038f6:	7bbb      	ldrb	r3, [r7, #14]
 80038f8:	2b03      	cmp	r3, #3
 80038fa:	d9f2      	bls.n	80038e2 <TM_MFRC522_Anticoll+0x44>
		}
		if (serNumCheck != serNum[i]) {
 80038fc:	7bbb      	ldrb	r3, [r7, #14]
 80038fe:	687a      	ldr	r2, [r7, #4]
 8003900:	4413      	add	r3, r2
 8003902:	781b      	ldrb	r3, [r3, #0]
 8003904:	7b7a      	ldrb	r2, [r7, #13]
 8003906:	429a      	cmp	r2, r3
 8003908:	d001      	beq.n	800390e <TM_MFRC522_Anticoll+0x70>
			status = MI_ERR;
 800390a:	2302      	movs	r3, #2
 800390c:	73fb      	strb	r3, [r7, #15]
		}
	}
	return status;
 800390e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003910:	4618      	mov	r0, r3
 8003912:	3710      	adds	r7, #16
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}

08003918 <TM_MFRC522_CalculateCRC>:

void TM_MFRC522_CalculateCRC(uint8_t*  pIndata, uint8_t len, uint8_t* pOutData) {
 8003918:	b590      	push	{r4, r7, lr}
 800391a:	b087      	sub	sp, #28
 800391c:	af00      	add	r7, sp, #0
 800391e:	60f8      	str	r0, [r7, #12]
 8003920:	460b      	mov	r3, r1
 8003922:	607a      	str	r2, [r7, #4]
 8003924:	72fb      	strb	r3, [r7, #11]
	uint8_t i, n;

	TM_MFRC522_ClearBitMask(MFRC522_REG_DIV_IRQ, 0x04);			//CRCIrq = 0
 8003926:	2104      	movs	r1, #4
 8003928:	2005      	movs	r0, #5
 800392a:	f7ff fe89 	bl	8003640 <TM_MFRC522_ClearBitMask>
	TM_MFRC522_SetBitMask(MFRC522_REG_FIFO_LEVEL, 0x80);			//Clear the FIFO pointer
 800392e:	2180      	movs	r1, #128	@ 0x80
 8003930:	200a      	movs	r0, #10
 8003932:	f7ff fe6b 	bl	800360c <TM_MFRC522_SetBitMask>
	//Write_MFRC522(CommandReg, PCD_IDLE);

	//Writing data to the FIFO
	for (i = 0; i < len; i++) {
 8003936:	2300      	movs	r3, #0
 8003938:	75fb      	strb	r3, [r7, #23]
 800393a:	e00a      	b.n	8003952 <TM_MFRC522_CalculateCRC+0x3a>
		TM_MFRC522_WriteRegister(MFRC522_REG_FIFO_DATA, *(pIndata+i));
 800393c:	7dfb      	ldrb	r3, [r7, #23]
 800393e:	68fa      	ldr	r2, [r7, #12]
 8003940:	4413      	add	r3, r2
 8003942:	781b      	ldrb	r3, [r3, #0]
 8003944:	4619      	mov	r1, r3
 8003946:	2009      	movs	r0, #9
 8003948:	f7ff fe12 	bl	8003570 <TM_MFRC522_WriteRegister>
	for (i = 0; i < len; i++) {
 800394c:	7dfb      	ldrb	r3, [r7, #23]
 800394e:	3301      	adds	r3, #1
 8003950:	75fb      	strb	r3, [r7, #23]
 8003952:	7dfa      	ldrb	r2, [r7, #23]
 8003954:	7afb      	ldrb	r3, [r7, #11]
 8003956:	429a      	cmp	r2, r3
 8003958:	d3f0      	bcc.n	800393c <TM_MFRC522_CalculateCRC+0x24>
	}
	TM_MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_CALCCRC);
 800395a:	2103      	movs	r1, #3
 800395c:	2001      	movs	r0, #1
 800395e:	f7ff fe07 	bl	8003570 <TM_MFRC522_WriteRegister>

	//Wait CRC calculation is complete
	i = 0xFF;
 8003962:	23ff      	movs	r3, #255	@ 0xff
 8003964:	75fb      	strb	r3, [r7, #23]
	do {
		n = TM_MFRC522_ReadRegister(MFRC522_REG_DIV_IRQ);
 8003966:	2005      	movs	r0, #5
 8003968:	f7ff fe28 	bl	80035bc <TM_MFRC522_ReadRegister>
 800396c:	4603      	mov	r3, r0
 800396e:	75bb      	strb	r3, [r7, #22]
		i--;
 8003970:	7dfb      	ldrb	r3, [r7, #23]
 8003972:	3b01      	subs	r3, #1
 8003974:	75fb      	strb	r3, [r7, #23]
	} while ((i!=0) && !(n&0x04));			//CRCIrq = 1
 8003976:	7dfb      	ldrb	r3, [r7, #23]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d004      	beq.n	8003986 <TM_MFRC522_CalculateCRC+0x6e>
 800397c:	7dbb      	ldrb	r3, [r7, #22]
 800397e:	f003 0304 	and.w	r3, r3, #4
 8003982:	2b00      	cmp	r3, #0
 8003984:	d0ef      	beq.n	8003966 <TM_MFRC522_CalculateCRC+0x4e>

	//Read CRC calculation result
	pOutData[0] = TM_MFRC522_ReadRegister(MFRC522_REG_CRC_RESULT_L);
 8003986:	2022      	movs	r0, #34	@ 0x22
 8003988:	f7ff fe18 	bl	80035bc <TM_MFRC522_ReadRegister>
 800398c:	4603      	mov	r3, r0
 800398e:	461a      	mov	r2, r3
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	701a      	strb	r2, [r3, #0]
	pOutData[1] = TM_MFRC522_ReadRegister(MFRC522_REG_CRC_RESULT_M);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	1c5c      	adds	r4, r3, #1
 8003998:	2021      	movs	r0, #33	@ 0x21
 800399a:	f7ff fe0f 	bl	80035bc <TM_MFRC522_ReadRegister>
 800399e:	4603      	mov	r3, r0
 80039a0:	7023      	strb	r3, [r4, #0]
}
 80039a2:	bf00      	nop
 80039a4:	371c      	adds	r7, #28
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd90      	pop	{r4, r7, pc}

080039aa <TM_MFRC522_Halt>:
	}

	return status;
}

void TM_MFRC522_Halt(void) {
 80039aa:	b580      	push	{r7, lr}
 80039ac:	b084      	sub	sp, #16
 80039ae:	af02      	add	r7, sp, #8
	uint16_t unLen;
	uint8_t buff[4];

	buff[0] = PICC_HALT;
 80039b0:	2350      	movs	r3, #80	@ 0x50
 80039b2:	703b      	strb	r3, [r7, #0]
	buff[1] = 0;
 80039b4:	2300      	movs	r3, #0
 80039b6:	707b      	strb	r3, [r7, #1]
	TM_MFRC522_CalculateCRC(buff, 2, &buff[2]);
 80039b8:	463b      	mov	r3, r7
 80039ba:	1c9a      	adds	r2, r3, #2
 80039bc:	463b      	mov	r3, r7
 80039be:	2102      	movs	r1, #2
 80039c0:	4618      	mov	r0, r3
 80039c2:	f7ff ffa9 	bl	8003918 <TM_MFRC522_CalculateCRC>
	TM_MFRC522_ToCard(PCD_TRANSCEIVE, buff, 4, buff, &unLen);
 80039c6:	463a      	mov	r2, r7
 80039c8:	4639      	mov	r1, r7
 80039ca:	1dbb      	adds	r3, r7, #6
 80039cc:	9300      	str	r3, [sp, #0]
 80039ce:	4613      	mov	r3, r2
 80039d0:	2204      	movs	r2, #4
 80039d2:	200c      	movs	r0, #12
 80039d4:	f7ff fe94 	bl	8003700 <TM_MFRC522_ToCard>



}
 80039d8:	bf00      	nop
 80039da:	3708      	adds	r7, #8
 80039dc:	46bd      	mov	sp, r7
 80039de:	bd80      	pop	{r7, pc}

080039e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b085      	sub	sp, #20
 80039e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80039e6:	4b15      	ldr	r3, [pc, #84]	@ (8003a3c <HAL_MspInit+0x5c>)
 80039e8:	699b      	ldr	r3, [r3, #24]
 80039ea:	4a14      	ldr	r2, [pc, #80]	@ (8003a3c <HAL_MspInit+0x5c>)
 80039ec:	f043 0301 	orr.w	r3, r3, #1
 80039f0:	6193      	str	r3, [r2, #24]
 80039f2:	4b12      	ldr	r3, [pc, #72]	@ (8003a3c <HAL_MspInit+0x5c>)
 80039f4:	699b      	ldr	r3, [r3, #24]
 80039f6:	f003 0301 	and.w	r3, r3, #1
 80039fa:	60bb      	str	r3, [r7, #8]
 80039fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80039fe:	4b0f      	ldr	r3, [pc, #60]	@ (8003a3c <HAL_MspInit+0x5c>)
 8003a00:	69db      	ldr	r3, [r3, #28]
 8003a02:	4a0e      	ldr	r2, [pc, #56]	@ (8003a3c <HAL_MspInit+0x5c>)
 8003a04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a08:	61d3      	str	r3, [r2, #28]
 8003a0a:	4b0c      	ldr	r3, [pc, #48]	@ (8003a3c <HAL_MspInit+0x5c>)
 8003a0c:	69db      	ldr	r3, [r3, #28]
 8003a0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a12:	607b      	str	r3, [r7, #4]
 8003a14:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003a16:	4b0a      	ldr	r3, [pc, #40]	@ (8003a40 <HAL_MspInit+0x60>)
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	60fb      	str	r3, [r7, #12]
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8003a22:	60fb      	str	r3, [r7, #12]
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003a2a:	60fb      	str	r3, [r7, #12]
 8003a2c:	4a04      	ldr	r2, [pc, #16]	@ (8003a40 <HAL_MspInit+0x60>)
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003a32:	bf00      	nop
 8003a34:	3714      	adds	r7, #20
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bc80      	pop	{r7}
 8003a3a:	4770      	bx	lr
 8003a3c:	40021000 	.word	0x40021000
 8003a40:	40010000 	.word	0x40010000

08003a44 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b088      	sub	sp, #32
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a4c:	f107 0310 	add.w	r3, r7, #16
 8003a50:	2200      	movs	r2, #0
 8003a52:	601a      	str	r2, [r3, #0]
 8003a54:	605a      	str	r2, [r3, #4]
 8003a56:	609a      	str	r2, [r3, #8]
 8003a58:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a1b      	ldr	r2, [pc, #108]	@ (8003acc <HAL_SPI_MspInit+0x88>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d12f      	bne.n	8003ac4 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003a64:	4b1a      	ldr	r3, [pc, #104]	@ (8003ad0 <HAL_SPI_MspInit+0x8c>)
 8003a66:	699b      	ldr	r3, [r3, #24]
 8003a68:	4a19      	ldr	r2, [pc, #100]	@ (8003ad0 <HAL_SPI_MspInit+0x8c>)
 8003a6a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003a6e:	6193      	str	r3, [r2, #24]
 8003a70:	4b17      	ldr	r3, [pc, #92]	@ (8003ad0 <HAL_SPI_MspInit+0x8c>)
 8003a72:	699b      	ldr	r3, [r3, #24]
 8003a74:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003a78:	60fb      	str	r3, [r7, #12]
 8003a7a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a7c:	4b14      	ldr	r3, [pc, #80]	@ (8003ad0 <HAL_SPI_MspInit+0x8c>)
 8003a7e:	699b      	ldr	r3, [r3, #24]
 8003a80:	4a13      	ldr	r2, [pc, #76]	@ (8003ad0 <HAL_SPI_MspInit+0x8c>)
 8003a82:	f043 0304 	orr.w	r3, r3, #4
 8003a86:	6193      	str	r3, [r2, #24]
 8003a88:	4b11      	ldr	r3, [pc, #68]	@ (8003ad0 <HAL_SPI_MspInit+0x8c>)
 8003a8a:	699b      	ldr	r3, [r3, #24]
 8003a8c:	f003 0304 	and.w	r3, r3, #4
 8003a90:	60bb      	str	r3, [r7, #8]
 8003a92:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8003a94:	23a0      	movs	r3, #160	@ 0xa0
 8003a96:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a98:	2302      	movs	r3, #2
 8003a9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003a9c:	2303      	movs	r3, #3
 8003a9e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003aa0:	f107 0310 	add.w	r3, r7, #16
 8003aa4:	4619      	mov	r1, r3
 8003aa6:	480b      	ldr	r0, [pc, #44]	@ (8003ad4 <HAL_SPI_MspInit+0x90>)
 8003aa8:	f000 fc30 	bl	800430c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003aac:	2340      	movs	r3, #64	@ 0x40
 8003aae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ab8:	f107 0310 	add.w	r3, r7, #16
 8003abc:	4619      	mov	r1, r3
 8003abe:	4805      	ldr	r0, [pc, #20]	@ (8003ad4 <HAL_SPI_MspInit+0x90>)
 8003ac0:	f000 fc24 	bl	800430c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003ac4:	bf00      	nop
 8003ac6:	3720      	adds	r7, #32
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd80      	pop	{r7, pc}
 8003acc:	40013000 	.word	0x40013000
 8003ad0:	40021000 	.word	0x40021000
 8003ad4:	40010800 	.word	0x40010800

08003ad8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b084      	sub	sp, #16
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ae8:	d113      	bne.n	8003b12 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003aea:	4b0c      	ldr	r3, [pc, #48]	@ (8003b1c <HAL_TIM_Base_MspInit+0x44>)
 8003aec:	69db      	ldr	r3, [r3, #28]
 8003aee:	4a0b      	ldr	r2, [pc, #44]	@ (8003b1c <HAL_TIM_Base_MspInit+0x44>)
 8003af0:	f043 0301 	orr.w	r3, r3, #1
 8003af4:	61d3      	str	r3, [r2, #28]
 8003af6:	4b09      	ldr	r3, [pc, #36]	@ (8003b1c <HAL_TIM_Base_MspInit+0x44>)
 8003af8:	69db      	ldr	r3, [r3, #28]
 8003afa:	f003 0301 	and.w	r3, r3, #1
 8003afe:	60fb      	str	r3, [r7, #12]
 8003b00:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003b02:	2200      	movs	r2, #0
 8003b04:	2100      	movs	r1, #0
 8003b06:	201c      	movs	r0, #28
 8003b08:	f000 f9c9 	bl	8003e9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003b0c:	201c      	movs	r0, #28
 8003b0e:	f000 f9e2 	bl	8003ed6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003b12:	bf00      	nop
 8003b14:	3710      	adds	r7, #16
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}
 8003b1a:	bf00      	nop
 8003b1c:	40021000 	.word	0x40021000

08003b20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003b20:	b480      	push	{r7}
 8003b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003b24:	bf00      	nop
 8003b26:	e7fd      	b.n	8003b24 <NMI_Handler+0x4>

08003b28 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003b2c:	bf00      	nop
 8003b2e:	e7fd      	b.n	8003b2c <HardFault_Handler+0x4>

08003b30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003b30:	b480      	push	{r7}
 8003b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003b34:	bf00      	nop
 8003b36:	e7fd      	b.n	8003b34 <MemManage_Handler+0x4>

08003b38 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003b3c:	bf00      	nop
 8003b3e:	e7fd      	b.n	8003b3c <BusFault_Handler+0x4>

08003b40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003b40:	b480      	push	{r7}
 8003b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003b44:	bf00      	nop
 8003b46:	e7fd      	b.n	8003b44 <UsageFault_Handler+0x4>

08003b48 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003b4c:	bf00      	nop
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bc80      	pop	{r7}
 8003b52:	4770      	bx	lr

08003b54 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003b54:	b480      	push	{r7}
 8003b56:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003b58:	bf00      	nop
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bc80      	pop	{r7}
 8003b5e:	4770      	bx	lr

08003b60 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003b60:	b480      	push	{r7}
 8003b62:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003b64:	bf00      	nop
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bc80      	pop	{r7}
 8003b6a:	4770      	bx	lr

08003b6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003b70:	f000 f87e 	bl	8003c70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003b74:	bf00      	nop
 8003b76:	bd80      	pop	{r7, pc}

08003b78 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003b7c:	4802      	ldr	r0, [pc, #8]	@ (8003b88 <TIM2_IRQHandler+0x10>)
 8003b7e:	f001 fce7 	bl	8005550 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003b82:	bf00      	nop
 8003b84:	bd80      	pop	{r7, pc}
 8003b86:	bf00      	nop
 8003b88:	2000009c 	.word	0x2000009c

08003b8c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003b90:	bf00      	nop
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bc80      	pop	{r7}
 8003b96:	4770      	bx	lr

08003b98 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003b98:	480c      	ldr	r0, [pc, #48]	@ (8003bcc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003b9a:	490d      	ldr	r1, [pc, #52]	@ (8003bd0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003b9c:	4a0d      	ldr	r2, [pc, #52]	@ (8003bd4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003b9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003ba0:	e002      	b.n	8003ba8 <LoopCopyDataInit>

08003ba2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003ba2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003ba4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003ba6:	3304      	adds	r3, #4

08003ba8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003ba8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003baa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003bac:	d3f9      	bcc.n	8003ba2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003bae:	4a0a      	ldr	r2, [pc, #40]	@ (8003bd8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003bb0:	4c0a      	ldr	r4, [pc, #40]	@ (8003bdc <LoopFillZerobss+0x22>)
  movs r3, #0
 8003bb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003bb4:	e001      	b.n	8003bba <LoopFillZerobss>

08003bb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003bb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003bb8:	3204      	adds	r2, #4

08003bba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003bba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003bbc:	d3fb      	bcc.n	8003bb6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003bbe:	f7ff ffe5 	bl	8003b8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003bc2:	f002 f825 	bl	8005c10 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003bc6:	f7fc fe39 	bl	800083c <main>
  bx lr
 8003bca:	4770      	bx	lr
  ldr r0, =_sdata
 8003bcc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003bd0:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 8003bd4:	08005fc4 	.word	0x08005fc4
  ldr r2, =_sbss
 8003bd8:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 8003bdc:	20000188 	.word	0x20000188

08003be0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003be0:	e7fe      	b.n	8003be0 <ADC1_2_IRQHandler>
	...

08003be4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003be8:	4b08      	ldr	r3, [pc, #32]	@ (8003c0c <HAL_Init+0x28>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a07      	ldr	r2, [pc, #28]	@ (8003c0c <HAL_Init+0x28>)
 8003bee:	f043 0310 	orr.w	r3, r3, #16
 8003bf2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003bf4:	2003      	movs	r0, #3
 8003bf6:	f000 f947 	bl	8003e88 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003bfa:	200f      	movs	r0, #15
 8003bfc:	f000 f808 	bl	8003c10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003c00:	f7ff feee 	bl	80039e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003c04:	2300      	movs	r3, #0
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	bd80      	pop	{r7, pc}
 8003c0a:	bf00      	nop
 8003c0c:	40022000 	.word	0x40022000

08003c10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b082      	sub	sp, #8
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003c18:	4b12      	ldr	r3, [pc, #72]	@ (8003c64 <HAL_InitTick+0x54>)
 8003c1a:	681a      	ldr	r2, [r3, #0]
 8003c1c:	4b12      	ldr	r3, [pc, #72]	@ (8003c68 <HAL_InitTick+0x58>)
 8003c1e:	781b      	ldrb	r3, [r3, #0]
 8003c20:	4619      	mov	r1, r3
 8003c22:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003c26:	fbb3 f3f1 	udiv	r3, r3, r1
 8003c2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f000 f95f 	bl	8003ef2 <HAL_SYSTICK_Config>
 8003c34:	4603      	mov	r3, r0
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d001      	beq.n	8003c3e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e00e      	b.n	8003c5c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2b0f      	cmp	r3, #15
 8003c42:	d80a      	bhi.n	8003c5a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003c44:	2200      	movs	r2, #0
 8003c46:	6879      	ldr	r1, [r7, #4]
 8003c48:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003c4c:	f000 f927 	bl	8003e9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003c50:	4a06      	ldr	r2, [pc, #24]	@ (8003c6c <HAL_InitTick+0x5c>)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003c56:	2300      	movs	r3, #0
 8003c58:	e000      	b.n	8003c5c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003c5a:	2301      	movs	r3, #1
}
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	3708      	adds	r7, #8
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bd80      	pop	{r7, pc}
 8003c64:	2000001c 	.word	0x2000001c
 8003c68:	20000024 	.word	0x20000024
 8003c6c:	20000020 	.word	0x20000020

08003c70 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003c70:	b480      	push	{r7}
 8003c72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003c74:	4b05      	ldr	r3, [pc, #20]	@ (8003c8c <HAL_IncTick+0x1c>)
 8003c76:	781b      	ldrb	r3, [r3, #0]
 8003c78:	461a      	mov	r2, r3
 8003c7a:	4b05      	ldr	r3, [pc, #20]	@ (8003c90 <HAL_IncTick+0x20>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4413      	add	r3, r2
 8003c80:	4a03      	ldr	r2, [pc, #12]	@ (8003c90 <HAL_IncTick+0x20>)
 8003c82:	6013      	str	r3, [r2, #0]
}
 8003c84:	bf00      	nop
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bc80      	pop	{r7}
 8003c8a:	4770      	bx	lr
 8003c8c:	20000024 	.word	0x20000024
 8003c90:	20000160 	.word	0x20000160

08003c94 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003c94:	b480      	push	{r7}
 8003c96:	af00      	add	r7, sp, #0
  return uwTick;
 8003c98:	4b02      	ldr	r3, [pc, #8]	@ (8003ca4 <HAL_GetTick+0x10>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
}
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bc80      	pop	{r7}
 8003ca2:	4770      	bx	lr
 8003ca4:	20000160 	.word	0x20000160

08003ca8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b084      	sub	sp, #16
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003cb0:	f7ff fff0 	bl	8003c94 <HAL_GetTick>
 8003cb4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003cc0:	d005      	beq.n	8003cce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003cc2:	4b0a      	ldr	r3, [pc, #40]	@ (8003cec <HAL_Delay+0x44>)
 8003cc4:	781b      	ldrb	r3, [r3, #0]
 8003cc6:	461a      	mov	r2, r3
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	4413      	add	r3, r2
 8003ccc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003cce:	bf00      	nop
 8003cd0:	f7ff ffe0 	bl	8003c94 <HAL_GetTick>
 8003cd4:	4602      	mov	r2, r0
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	1ad3      	subs	r3, r2, r3
 8003cda:	68fa      	ldr	r2, [r7, #12]
 8003cdc:	429a      	cmp	r2, r3
 8003cde:	d8f7      	bhi.n	8003cd0 <HAL_Delay+0x28>
  {
  }
}
 8003ce0:	bf00      	nop
 8003ce2:	bf00      	nop
 8003ce4:	3710      	adds	r7, #16
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}
 8003cea:	bf00      	nop
 8003cec:	20000024 	.word	0x20000024

08003cf0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b085      	sub	sp, #20
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	f003 0307 	and.w	r3, r3, #7
 8003cfe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d00:	4b0c      	ldr	r3, [pc, #48]	@ (8003d34 <__NVIC_SetPriorityGrouping+0x44>)
 8003d02:	68db      	ldr	r3, [r3, #12]
 8003d04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d06:	68ba      	ldr	r2, [r7, #8]
 8003d08:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003d0c:	4013      	ands	r3, r2
 8003d0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003d18:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003d1c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003d20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003d22:	4a04      	ldr	r2, [pc, #16]	@ (8003d34 <__NVIC_SetPriorityGrouping+0x44>)
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	60d3      	str	r3, [r2, #12]
}
 8003d28:	bf00      	nop
 8003d2a:	3714      	adds	r7, #20
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bc80      	pop	{r7}
 8003d30:	4770      	bx	lr
 8003d32:	bf00      	nop
 8003d34:	e000ed00 	.word	0xe000ed00

08003d38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003d3c:	4b04      	ldr	r3, [pc, #16]	@ (8003d50 <__NVIC_GetPriorityGrouping+0x18>)
 8003d3e:	68db      	ldr	r3, [r3, #12]
 8003d40:	0a1b      	lsrs	r3, r3, #8
 8003d42:	f003 0307 	and.w	r3, r3, #7
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bc80      	pop	{r7}
 8003d4c:	4770      	bx	lr
 8003d4e:	bf00      	nop
 8003d50:	e000ed00 	.word	0xe000ed00

08003d54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b083      	sub	sp, #12
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	db0b      	blt.n	8003d7e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d66:	79fb      	ldrb	r3, [r7, #7]
 8003d68:	f003 021f 	and.w	r2, r3, #31
 8003d6c:	4906      	ldr	r1, [pc, #24]	@ (8003d88 <__NVIC_EnableIRQ+0x34>)
 8003d6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d72:	095b      	lsrs	r3, r3, #5
 8003d74:	2001      	movs	r0, #1
 8003d76:	fa00 f202 	lsl.w	r2, r0, r2
 8003d7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003d7e:	bf00      	nop
 8003d80:	370c      	adds	r7, #12
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bc80      	pop	{r7}
 8003d86:	4770      	bx	lr
 8003d88:	e000e100 	.word	0xe000e100

08003d8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b083      	sub	sp, #12
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	4603      	mov	r3, r0
 8003d94:	6039      	str	r1, [r7, #0]
 8003d96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	db0a      	blt.n	8003db6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	b2da      	uxtb	r2, r3
 8003da4:	490c      	ldr	r1, [pc, #48]	@ (8003dd8 <__NVIC_SetPriority+0x4c>)
 8003da6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003daa:	0112      	lsls	r2, r2, #4
 8003dac:	b2d2      	uxtb	r2, r2
 8003dae:	440b      	add	r3, r1
 8003db0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003db4:	e00a      	b.n	8003dcc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	b2da      	uxtb	r2, r3
 8003dba:	4908      	ldr	r1, [pc, #32]	@ (8003ddc <__NVIC_SetPriority+0x50>)
 8003dbc:	79fb      	ldrb	r3, [r7, #7]
 8003dbe:	f003 030f 	and.w	r3, r3, #15
 8003dc2:	3b04      	subs	r3, #4
 8003dc4:	0112      	lsls	r2, r2, #4
 8003dc6:	b2d2      	uxtb	r2, r2
 8003dc8:	440b      	add	r3, r1
 8003dca:	761a      	strb	r2, [r3, #24]
}
 8003dcc:	bf00      	nop
 8003dce:	370c      	adds	r7, #12
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bc80      	pop	{r7}
 8003dd4:	4770      	bx	lr
 8003dd6:	bf00      	nop
 8003dd8:	e000e100 	.word	0xe000e100
 8003ddc:	e000ed00 	.word	0xe000ed00

08003de0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003de0:	b480      	push	{r7}
 8003de2:	b089      	sub	sp, #36	@ 0x24
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	60f8      	str	r0, [r7, #12]
 8003de8:	60b9      	str	r1, [r7, #8]
 8003dea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	f003 0307 	and.w	r3, r3, #7
 8003df2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003df4:	69fb      	ldr	r3, [r7, #28]
 8003df6:	f1c3 0307 	rsb	r3, r3, #7
 8003dfa:	2b04      	cmp	r3, #4
 8003dfc:	bf28      	it	cs
 8003dfe:	2304      	movcs	r3, #4
 8003e00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e02:	69fb      	ldr	r3, [r7, #28]
 8003e04:	3304      	adds	r3, #4
 8003e06:	2b06      	cmp	r3, #6
 8003e08:	d902      	bls.n	8003e10 <NVIC_EncodePriority+0x30>
 8003e0a:	69fb      	ldr	r3, [r7, #28]
 8003e0c:	3b03      	subs	r3, #3
 8003e0e:	e000      	b.n	8003e12 <NVIC_EncodePriority+0x32>
 8003e10:	2300      	movs	r3, #0
 8003e12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e14:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003e18:	69bb      	ldr	r3, [r7, #24]
 8003e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e1e:	43da      	mvns	r2, r3
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	401a      	ands	r2, r3
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003e28:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	fa01 f303 	lsl.w	r3, r1, r3
 8003e32:	43d9      	mvns	r1, r3
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e38:	4313      	orrs	r3, r2
         );
}
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	3724      	adds	r7, #36	@ 0x24
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bc80      	pop	{r7}
 8003e42:	4770      	bx	lr

08003e44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b082      	sub	sp, #8
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	3b01      	subs	r3, #1
 8003e50:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003e54:	d301      	bcc.n	8003e5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003e56:	2301      	movs	r3, #1
 8003e58:	e00f      	b.n	8003e7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003e5a:	4a0a      	ldr	r2, [pc, #40]	@ (8003e84 <SysTick_Config+0x40>)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	3b01      	subs	r3, #1
 8003e60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003e62:	210f      	movs	r1, #15
 8003e64:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003e68:	f7ff ff90 	bl	8003d8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003e6c:	4b05      	ldr	r3, [pc, #20]	@ (8003e84 <SysTick_Config+0x40>)
 8003e6e:	2200      	movs	r2, #0
 8003e70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003e72:	4b04      	ldr	r3, [pc, #16]	@ (8003e84 <SysTick_Config+0x40>)
 8003e74:	2207      	movs	r2, #7
 8003e76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003e78:	2300      	movs	r3, #0
}
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	3708      	adds	r7, #8
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}
 8003e82:	bf00      	nop
 8003e84:	e000e010 	.word	0xe000e010

08003e88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b082      	sub	sp, #8
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003e90:	6878      	ldr	r0, [r7, #4]
 8003e92:	f7ff ff2d 	bl	8003cf0 <__NVIC_SetPriorityGrouping>
}
 8003e96:	bf00      	nop
 8003e98:	3708      	adds	r7, #8
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}

08003e9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003e9e:	b580      	push	{r7, lr}
 8003ea0:	b086      	sub	sp, #24
 8003ea2:	af00      	add	r7, sp, #0
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	60b9      	str	r1, [r7, #8]
 8003ea8:	607a      	str	r2, [r7, #4]
 8003eaa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003eac:	2300      	movs	r3, #0
 8003eae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003eb0:	f7ff ff42 	bl	8003d38 <__NVIC_GetPriorityGrouping>
 8003eb4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003eb6:	687a      	ldr	r2, [r7, #4]
 8003eb8:	68b9      	ldr	r1, [r7, #8]
 8003eba:	6978      	ldr	r0, [r7, #20]
 8003ebc:	f7ff ff90 	bl	8003de0 <NVIC_EncodePriority>
 8003ec0:	4602      	mov	r2, r0
 8003ec2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ec6:	4611      	mov	r1, r2
 8003ec8:	4618      	mov	r0, r3
 8003eca:	f7ff ff5f 	bl	8003d8c <__NVIC_SetPriority>
}
 8003ece:	bf00      	nop
 8003ed0:	3718      	adds	r7, #24
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}

08003ed6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ed6:	b580      	push	{r7, lr}
 8003ed8:	b082      	sub	sp, #8
 8003eda:	af00      	add	r7, sp, #0
 8003edc:	4603      	mov	r3, r0
 8003ede:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003ee0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	f7ff ff35 	bl	8003d54 <__NVIC_EnableIRQ>
}
 8003eea:	bf00      	nop
 8003eec:	3708      	adds	r7, #8
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}

08003ef2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003ef2:	b580      	push	{r7, lr}
 8003ef4:	b082      	sub	sp, #8
 8003ef6:	af00      	add	r7, sp, #0
 8003ef8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003efa:	6878      	ldr	r0, [r7, #4]
 8003efc:	f7ff ffa2 	bl	8003e44 <SysTick_Config>
 8003f00:	4603      	mov	r3, r0
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	3708      	adds	r7, #8
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}
	...

08003f0c <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8003f0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f0e:	b087      	sub	sp, #28
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	60f8      	str	r0, [r7, #12]
 8003f14:	60b9      	str	r1, [r7, #8]
 8003f16:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8003f1e:	2300      	movs	r3, #0
 8003f20:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8003f22:	2300      	movs	r3, #0
 8003f24:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003f26:	4b2f      	ldr	r3, [pc, #188]	@ (8003fe4 <HAL_FLASH_Program+0xd8>)
 8003f28:	7e1b      	ldrb	r3, [r3, #24]
 8003f2a:	2b01      	cmp	r3, #1
 8003f2c:	d101      	bne.n	8003f32 <HAL_FLASH_Program+0x26>
 8003f2e:	2302      	movs	r3, #2
 8003f30:	e054      	b.n	8003fdc <HAL_FLASH_Program+0xd0>
 8003f32:	4b2c      	ldr	r3, [pc, #176]	@ (8003fe4 <HAL_FLASH_Program+0xd8>)
 8003f34:	2201      	movs	r2, #1
 8003f36:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003f38:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8003f3c:	f000 f8a8 	bl	8004090 <FLASH_WaitForLastOperation>
 8003f40:	4603      	mov	r3, r0
 8003f42:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8003f44:	7dfb      	ldrb	r3, [r7, #23]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d144      	bne.n	8003fd4 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	2b01      	cmp	r3, #1
 8003f4e:	d102      	bne.n	8003f56 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8003f50:	2301      	movs	r3, #1
 8003f52:	757b      	strb	r3, [r7, #21]
 8003f54:	e007      	b.n	8003f66 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	2b02      	cmp	r3, #2
 8003f5a:	d102      	bne.n	8003f62 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8003f5c:	2302      	movs	r3, #2
 8003f5e:	757b      	strb	r3, [r7, #21]
 8003f60:	e001      	b.n	8003f66 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8003f62:	2304      	movs	r3, #4
 8003f64:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8003f66:	2300      	movs	r3, #0
 8003f68:	75bb      	strb	r3, [r7, #22]
 8003f6a:	e02d      	b.n	8003fc8 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8003f6c:	7dbb      	ldrb	r3, [r7, #22]
 8003f6e:	005a      	lsls	r2, r3, #1
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	eb02 0c03 	add.w	ip, r2, r3
 8003f76:	7dbb      	ldrb	r3, [r7, #22]
 8003f78:	0119      	lsls	r1, r3, #4
 8003f7a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003f7e:	f1c1 0620 	rsb	r6, r1, #32
 8003f82:	f1a1 0020 	sub.w	r0, r1, #32
 8003f86:	fa22 f401 	lsr.w	r4, r2, r1
 8003f8a:	fa03 f606 	lsl.w	r6, r3, r6
 8003f8e:	4334      	orrs	r4, r6
 8003f90:	fa23 f000 	lsr.w	r0, r3, r0
 8003f94:	4304      	orrs	r4, r0
 8003f96:	fa23 f501 	lsr.w	r5, r3, r1
 8003f9a:	b2a3      	uxth	r3, r4
 8003f9c:	4619      	mov	r1, r3
 8003f9e:	4660      	mov	r0, ip
 8003fa0:	f000 f85a 	bl	8004058 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003fa4:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8003fa8:	f000 f872 	bl	8004090 <FLASH_WaitForLastOperation>
 8003fac:	4603      	mov	r3, r0
 8003fae:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8003fb0:	4b0d      	ldr	r3, [pc, #52]	@ (8003fe8 <HAL_FLASH_Program+0xdc>)
 8003fb2:	691b      	ldr	r3, [r3, #16]
 8003fb4:	4a0c      	ldr	r2, [pc, #48]	@ (8003fe8 <HAL_FLASH_Program+0xdc>)
 8003fb6:	f023 0301 	bic.w	r3, r3, #1
 8003fba:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8003fbc:	7dfb      	ldrb	r3, [r7, #23]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d107      	bne.n	8003fd2 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8003fc2:	7dbb      	ldrb	r3, [r7, #22]
 8003fc4:	3301      	adds	r3, #1
 8003fc6:	75bb      	strb	r3, [r7, #22]
 8003fc8:	7dba      	ldrb	r2, [r7, #22]
 8003fca:	7d7b      	ldrb	r3, [r7, #21]
 8003fcc:	429a      	cmp	r2, r3
 8003fce:	d3cd      	bcc.n	8003f6c <HAL_FLASH_Program+0x60>
 8003fd0:	e000      	b.n	8003fd4 <HAL_FLASH_Program+0xc8>
      {
        break;
 8003fd2:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003fd4:	4b03      	ldr	r3, [pc, #12]	@ (8003fe4 <HAL_FLASH_Program+0xd8>)
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	761a      	strb	r2, [r3, #24]

  return status;
 8003fda:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fdc:	4618      	mov	r0, r3
 8003fde:	371c      	adds	r7, #28
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003fe4:	20000168 	.word	0x20000168
 8003fe8:	40022000 	.word	0x40022000

08003fec <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b083      	sub	sp, #12
 8003ff0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003ff6:	4b0d      	ldr	r3, [pc, #52]	@ (800402c <HAL_FLASH_Unlock+0x40>)
 8003ff8:	691b      	ldr	r3, [r3, #16]
 8003ffa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d00d      	beq.n	800401e <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8004002:	4b0a      	ldr	r3, [pc, #40]	@ (800402c <HAL_FLASH_Unlock+0x40>)
 8004004:	4a0a      	ldr	r2, [pc, #40]	@ (8004030 <HAL_FLASH_Unlock+0x44>)
 8004006:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8004008:	4b08      	ldr	r3, [pc, #32]	@ (800402c <HAL_FLASH_Unlock+0x40>)
 800400a:	4a0a      	ldr	r2, [pc, #40]	@ (8004034 <HAL_FLASH_Unlock+0x48>)
 800400c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800400e:	4b07      	ldr	r3, [pc, #28]	@ (800402c <HAL_FLASH_Unlock+0x40>)
 8004010:	691b      	ldr	r3, [r3, #16]
 8004012:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004016:	2b00      	cmp	r3, #0
 8004018:	d001      	beq.n	800401e <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 800401a:	2301      	movs	r3, #1
 800401c:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 800401e:	79fb      	ldrb	r3, [r7, #7]
}
 8004020:	4618      	mov	r0, r3
 8004022:	370c      	adds	r7, #12
 8004024:	46bd      	mov	sp, r7
 8004026:	bc80      	pop	{r7}
 8004028:	4770      	bx	lr
 800402a:	bf00      	nop
 800402c:	40022000 	.word	0x40022000
 8004030:	45670123 	.word	0x45670123
 8004034:	cdef89ab 	.word	0xcdef89ab

08004038 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8004038:	b480      	push	{r7}
 800403a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800403c:	4b05      	ldr	r3, [pc, #20]	@ (8004054 <HAL_FLASH_Lock+0x1c>)
 800403e:	691b      	ldr	r3, [r3, #16]
 8004040:	4a04      	ldr	r2, [pc, #16]	@ (8004054 <HAL_FLASH_Lock+0x1c>)
 8004042:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004046:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8004048:	2300      	movs	r3, #0
}
 800404a:	4618      	mov	r0, r3
 800404c:	46bd      	mov	sp, r7
 800404e:	bc80      	pop	{r7}
 8004050:	4770      	bx	lr
 8004052:	bf00      	nop
 8004054:	40022000 	.word	0x40022000

08004058 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8004058:	b480      	push	{r7}
 800405a:	b083      	sub	sp, #12
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
 8004060:	460b      	mov	r3, r1
 8004062:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004064:	4b08      	ldr	r3, [pc, #32]	@ (8004088 <FLASH_Program_HalfWord+0x30>)
 8004066:	2200      	movs	r2, #0
 8004068:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800406a:	4b08      	ldr	r3, [pc, #32]	@ (800408c <FLASH_Program_HalfWord+0x34>)
 800406c:	691b      	ldr	r3, [r3, #16]
 800406e:	4a07      	ldr	r2, [pc, #28]	@ (800408c <FLASH_Program_HalfWord+0x34>)
 8004070:	f043 0301 	orr.w	r3, r3, #1
 8004074:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	887a      	ldrh	r2, [r7, #2]
 800407a:	801a      	strh	r2, [r3, #0]
}
 800407c:	bf00      	nop
 800407e:	370c      	adds	r7, #12
 8004080:	46bd      	mov	sp, r7
 8004082:	bc80      	pop	{r7}
 8004084:	4770      	bx	lr
 8004086:	bf00      	nop
 8004088:	20000168 	.word	0x20000168
 800408c:	40022000 	.word	0x40022000

08004090 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b084      	sub	sp, #16
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8004098:	f7ff fdfc 	bl	8003c94 <HAL_GetTick>
 800409c:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800409e:	e010      	b.n	80040c2 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80040a6:	d00c      	beq.n	80040c2 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d007      	beq.n	80040be <FLASH_WaitForLastOperation+0x2e>
 80040ae:	f7ff fdf1 	bl	8003c94 <HAL_GetTick>
 80040b2:	4602      	mov	r2, r0
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	1ad3      	subs	r3, r2, r3
 80040b8:	687a      	ldr	r2, [r7, #4]
 80040ba:	429a      	cmp	r2, r3
 80040bc:	d201      	bcs.n	80040c2 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 80040be:	2303      	movs	r3, #3
 80040c0:	e025      	b.n	800410e <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80040c2:	4b15      	ldr	r3, [pc, #84]	@ (8004118 <FLASH_WaitForLastOperation+0x88>)
 80040c4:	68db      	ldr	r3, [r3, #12]
 80040c6:	f003 0301 	and.w	r3, r3, #1
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d1e8      	bne.n	80040a0 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80040ce:	4b12      	ldr	r3, [pc, #72]	@ (8004118 <FLASH_WaitForLastOperation+0x88>)
 80040d0:	68db      	ldr	r3, [r3, #12]
 80040d2:	f003 0320 	and.w	r3, r3, #32
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d002      	beq.n	80040e0 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80040da:	4b0f      	ldr	r3, [pc, #60]	@ (8004118 <FLASH_WaitForLastOperation+0x88>)
 80040dc:	2220      	movs	r2, #32
 80040de:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80040e0:	4b0d      	ldr	r3, [pc, #52]	@ (8004118 <FLASH_WaitForLastOperation+0x88>)
 80040e2:	68db      	ldr	r3, [r3, #12]
 80040e4:	f003 0310 	and.w	r3, r3, #16
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d10b      	bne.n	8004104 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80040ec:	4b0a      	ldr	r3, [pc, #40]	@ (8004118 <FLASH_WaitForLastOperation+0x88>)
 80040ee:	69db      	ldr	r3, [r3, #28]
 80040f0:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d105      	bne.n	8004104 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80040f8:	4b07      	ldr	r3, [pc, #28]	@ (8004118 <FLASH_WaitForLastOperation+0x88>)
 80040fa:	68db      	ldr	r3, [r3, #12]
 80040fc:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8004100:	2b00      	cmp	r3, #0
 8004102:	d003      	beq.n	800410c <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8004104:	f000 f80a 	bl	800411c <FLASH_SetErrorCode>
    return HAL_ERROR;
 8004108:	2301      	movs	r3, #1
 800410a:	e000      	b.n	800410e <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 800410c:	2300      	movs	r3, #0
}
 800410e:	4618      	mov	r0, r3
 8004110:	3710      	adds	r7, #16
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}
 8004116:	bf00      	nop
 8004118:	40022000 	.word	0x40022000

0800411c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 800411c:	b480      	push	{r7}
 800411e:	b083      	sub	sp, #12
 8004120:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8004122:	2300      	movs	r3, #0
 8004124:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8004126:	4b23      	ldr	r3, [pc, #140]	@ (80041b4 <FLASH_SetErrorCode+0x98>)
 8004128:	68db      	ldr	r3, [r3, #12]
 800412a:	f003 0310 	and.w	r3, r3, #16
 800412e:	2b00      	cmp	r3, #0
 8004130:	d009      	beq.n	8004146 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8004132:	4b21      	ldr	r3, [pc, #132]	@ (80041b8 <FLASH_SetErrorCode+0x9c>)
 8004134:	69db      	ldr	r3, [r3, #28]
 8004136:	f043 0302 	orr.w	r3, r3, #2
 800413a:	4a1f      	ldr	r2, [pc, #124]	@ (80041b8 <FLASH_SetErrorCode+0x9c>)
 800413c:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	f043 0310 	orr.w	r3, r3, #16
 8004144:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8004146:	4b1b      	ldr	r3, [pc, #108]	@ (80041b4 <FLASH_SetErrorCode+0x98>)
 8004148:	68db      	ldr	r3, [r3, #12]
 800414a:	f003 0304 	and.w	r3, r3, #4
 800414e:	2b00      	cmp	r3, #0
 8004150:	d009      	beq.n	8004166 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8004152:	4b19      	ldr	r3, [pc, #100]	@ (80041b8 <FLASH_SetErrorCode+0x9c>)
 8004154:	69db      	ldr	r3, [r3, #28]
 8004156:	f043 0301 	orr.w	r3, r3, #1
 800415a:	4a17      	ldr	r2, [pc, #92]	@ (80041b8 <FLASH_SetErrorCode+0x9c>)
 800415c:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	f043 0304 	orr.w	r3, r3, #4
 8004164:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8004166:	4b13      	ldr	r3, [pc, #76]	@ (80041b4 <FLASH_SetErrorCode+0x98>)
 8004168:	69db      	ldr	r3, [r3, #28]
 800416a:	f003 0301 	and.w	r3, r3, #1
 800416e:	2b00      	cmp	r3, #0
 8004170:	d00b      	beq.n	800418a <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8004172:	4b11      	ldr	r3, [pc, #68]	@ (80041b8 <FLASH_SetErrorCode+0x9c>)
 8004174:	69db      	ldr	r3, [r3, #28]
 8004176:	f043 0304 	orr.w	r3, r3, #4
 800417a:	4a0f      	ldr	r2, [pc, #60]	@ (80041b8 <FLASH_SetErrorCode+0x9c>)
 800417c:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800417e:	4b0d      	ldr	r3, [pc, #52]	@ (80041b4 <FLASH_SetErrorCode+0x98>)
 8004180:	69db      	ldr	r3, [r3, #28]
 8004182:	4a0c      	ldr	r2, [pc, #48]	@ (80041b4 <FLASH_SetErrorCode+0x98>)
 8004184:	f023 0301 	bic.w	r3, r3, #1
 8004188:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	f240 1201 	movw	r2, #257	@ 0x101
 8004190:	4293      	cmp	r3, r2
 8004192:	d106      	bne.n	80041a2 <FLASH_SetErrorCode+0x86>
 8004194:	4b07      	ldr	r3, [pc, #28]	@ (80041b4 <FLASH_SetErrorCode+0x98>)
 8004196:	69db      	ldr	r3, [r3, #28]
 8004198:	4a06      	ldr	r2, [pc, #24]	@ (80041b4 <FLASH_SetErrorCode+0x98>)
 800419a:	f023 0301 	bic.w	r3, r3, #1
 800419e:	61d3      	str	r3, [r2, #28]
}  
 80041a0:	e002      	b.n	80041a8 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 80041a2:	4a04      	ldr	r2, [pc, #16]	@ (80041b4 <FLASH_SetErrorCode+0x98>)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	60d3      	str	r3, [r2, #12]
}  
 80041a8:	bf00      	nop
 80041aa:	370c      	adds	r7, #12
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bc80      	pop	{r7}
 80041b0:	4770      	bx	lr
 80041b2:	bf00      	nop
 80041b4:	40022000 	.word	0x40022000
 80041b8:	20000168 	.word	0x20000168

080041bc <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b084      	sub	sp, #16
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
 80041c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80041c6:	2301      	movs	r3, #1
 80041c8:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 80041ca:	2300      	movs	r3, #0
 80041cc:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80041ce:	4b2f      	ldr	r3, [pc, #188]	@ (800428c <HAL_FLASHEx_Erase+0xd0>)
 80041d0:	7e1b      	ldrb	r3, [r3, #24]
 80041d2:	2b01      	cmp	r3, #1
 80041d4:	d101      	bne.n	80041da <HAL_FLASHEx_Erase+0x1e>
 80041d6:	2302      	movs	r3, #2
 80041d8:	e053      	b.n	8004282 <HAL_FLASHEx_Erase+0xc6>
 80041da:	4b2c      	ldr	r3, [pc, #176]	@ (800428c <HAL_FLASHEx_Erase+0xd0>)
 80041dc:	2201      	movs	r2, #1
 80041de:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	2b02      	cmp	r3, #2
 80041e6:	d116      	bne.n	8004216 <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80041e8:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80041ec:	f7ff ff50 	bl	8004090 <FLASH_WaitForLastOperation>
 80041f0:	4603      	mov	r3, r0
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d141      	bne.n	800427a <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 80041f6:	2001      	movs	r0, #1
 80041f8:	f000 f84c 	bl	8004294 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80041fc:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8004200:	f7ff ff46 	bl	8004090 <FLASH_WaitForLastOperation>
 8004204:	4603      	mov	r3, r0
 8004206:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8004208:	4b21      	ldr	r3, [pc, #132]	@ (8004290 <HAL_FLASHEx_Erase+0xd4>)
 800420a:	691b      	ldr	r3, [r3, #16]
 800420c:	4a20      	ldr	r2, [pc, #128]	@ (8004290 <HAL_FLASHEx_Erase+0xd4>)
 800420e:	f023 0304 	bic.w	r3, r3, #4
 8004212:	6113      	str	r3, [r2, #16]
 8004214:	e031      	b.n	800427a <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8004216:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800421a:	f7ff ff39 	bl	8004090 <FLASH_WaitForLastOperation>
 800421e:	4603      	mov	r3, r0
 8004220:	2b00      	cmp	r3, #0
 8004222:	d12a      	bne.n	800427a <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800422a:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	60bb      	str	r3, [r7, #8]
 8004232:	e019      	b.n	8004268 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8004234:	68b8      	ldr	r0, [r7, #8]
 8004236:	f000 f849 	bl	80042cc <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800423a:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800423e:	f7ff ff27 	bl	8004090 <FLASH_WaitForLastOperation>
 8004242:	4603      	mov	r3, r0
 8004244:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8004246:	4b12      	ldr	r3, [pc, #72]	@ (8004290 <HAL_FLASHEx_Erase+0xd4>)
 8004248:	691b      	ldr	r3, [r3, #16]
 800424a:	4a11      	ldr	r2, [pc, #68]	@ (8004290 <HAL_FLASHEx_Erase+0xd4>)
 800424c:	f023 0302 	bic.w	r3, r3, #2
 8004250:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8004252:	7bfb      	ldrb	r3, [r7, #15]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d003      	beq.n	8004260 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	68ba      	ldr	r2, [r7, #8]
 800425c:	601a      	str	r2, [r3, #0]
            break;
 800425e:	e00c      	b.n	800427a <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004266:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	68db      	ldr	r3, [r3, #12]
 800426c:	029a      	lsls	r2, r3, #10
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	689b      	ldr	r3, [r3, #8]
 8004272:	4413      	add	r3, r2
 8004274:	68ba      	ldr	r2, [r7, #8]
 8004276:	429a      	cmp	r2, r3
 8004278:	d3dc      	bcc.n	8004234 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800427a:	4b04      	ldr	r3, [pc, #16]	@ (800428c <HAL_FLASHEx_Erase+0xd0>)
 800427c:	2200      	movs	r2, #0
 800427e:	761a      	strb	r2, [r3, #24]

  return status;
 8004280:	7bfb      	ldrb	r3, [r7, #15]
}
 8004282:	4618      	mov	r0, r3
 8004284:	3710      	adds	r7, #16
 8004286:	46bd      	mov	sp, r7
 8004288:	bd80      	pop	{r7, pc}
 800428a:	bf00      	nop
 800428c:	20000168 	.word	0x20000168
 8004290:	40022000 	.word	0x40022000

08004294 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8004294:	b480      	push	{r7}
 8004296:	b083      	sub	sp, #12
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800429c:	4b09      	ldr	r3, [pc, #36]	@ (80042c4 <FLASH_MassErase+0x30>)
 800429e:	2200      	movs	r2, #0
 80042a0:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80042a2:	4b09      	ldr	r3, [pc, #36]	@ (80042c8 <FLASH_MassErase+0x34>)
 80042a4:	691b      	ldr	r3, [r3, #16]
 80042a6:	4a08      	ldr	r2, [pc, #32]	@ (80042c8 <FLASH_MassErase+0x34>)
 80042a8:	f043 0304 	orr.w	r3, r3, #4
 80042ac:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80042ae:	4b06      	ldr	r3, [pc, #24]	@ (80042c8 <FLASH_MassErase+0x34>)
 80042b0:	691b      	ldr	r3, [r3, #16]
 80042b2:	4a05      	ldr	r2, [pc, #20]	@ (80042c8 <FLASH_MassErase+0x34>)
 80042b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80042b8:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80042ba:	bf00      	nop
 80042bc:	370c      	adds	r7, #12
 80042be:	46bd      	mov	sp, r7
 80042c0:	bc80      	pop	{r7}
 80042c2:	4770      	bx	lr
 80042c4:	20000168 	.word	0x20000168
 80042c8:	40022000 	.word	0x40022000

080042cc <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 80042cc:	b480      	push	{r7}
 80042ce:	b083      	sub	sp, #12
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80042d4:	4b0b      	ldr	r3, [pc, #44]	@ (8004304 <FLASH_PageErase+0x38>)
 80042d6:	2200      	movs	r2, #0
 80042d8:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 80042da:	4b0b      	ldr	r3, [pc, #44]	@ (8004308 <FLASH_PageErase+0x3c>)
 80042dc:	691b      	ldr	r3, [r3, #16]
 80042de:	4a0a      	ldr	r2, [pc, #40]	@ (8004308 <FLASH_PageErase+0x3c>)
 80042e0:	f043 0302 	orr.w	r3, r3, #2
 80042e4:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 80042e6:	4a08      	ldr	r2, [pc, #32]	@ (8004308 <FLASH_PageErase+0x3c>)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80042ec:	4b06      	ldr	r3, [pc, #24]	@ (8004308 <FLASH_PageErase+0x3c>)
 80042ee:	691b      	ldr	r3, [r3, #16]
 80042f0:	4a05      	ldr	r2, [pc, #20]	@ (8004308 <FLASH_PageErase+0x3c>)
 80042f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80042f6:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80042f8:	bf00      	nop
 80042fa:	370c      	adds	r7, #12
 80042fc:	46bd      	mov	sp, r7
 80042fe:	bc80      	pop	{r7}
 8004300:	4770      	bx	lr
 8004302:	bf00      	nop
 8004304:	20000168 	.word	0x20000168
 8004308:	40022000 	.word	0x40022000

0800430c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800430c:	b480      	push	{r7}
 800430e:	b08b      	sub	sp, #44	@ 0x2c
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
 8004314:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004316:	2300      	movs	r3, #0
 8004318:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800431a:	2300      	movs	r3, #0
 800431c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800431e:	e169      	b.n	80045f4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004320:	2201      	movs	r2, #1
 8004322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004324:	fa02 f303 	lsl.w	r3, r2, r3
 8004328:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	69fa      	ldr	r2, [r7, #28]
 8004330:	4013      	ands	r3, r2
 8004332:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004334:	69ba      	ldr	r2, [r7, #24]
 8004336:	69fb      	ldr	r3, [r7, #28]
 8004338:	429a      	cmp	r2, r3
 800433a:	f040 8158 	bne.w	80045ee <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	4a9a      	ldr	r2, [pc, #616]	@ (80045ac <HAL_GPIO_Init+0x2a0>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d05e      	beq.n	8004406 <HAL_GPIO_Init+0xfa>
 8004348:	4a98      	ldr	r2, [pc, #608]	@ (80045ac <HAL_GPIO_Init+0x2a0>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d875      	bhi.n	800443a <HAL_GPIO_Init+0x12e>
 800434e:	4a98      	ldr	r2, [pc, #608]	@ (80045b0 <HAL_GPIO_Init+0x2a4>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d058      	beq.n	8004406 <HAL_GPIO_Init+0xfa>
 8004354:	4a96      	ldr	r2, [pc, #600]	@ (80045b0 <HAL_GPIO_Init+0x2a4>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d86f      	bhi.n	800443a <HAL_GPIO_Init+0x12e>
 800435a:	4a96      	ldr	r2, [pc, #600]	@ (80045b4 <HAL_GPIO_Init+0x2a8>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d052      	beq.n	8004406 <HAL_GPIO_Init+0xfa>
 8004360:	4a94      	ldr	r2, [pc, #592]	@ (80045b4 <HAL_GPIO_Init+0x2a8>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d869      	bhi.n	800443a <HAL_GPIO_Init+0x12e>
 8004366:	4a94      	ldr	r2, [pc, #592]	@ (80045b8 <HAL_GPIO_Init+0x2ac>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d04c      	beq.n	8004406 <HAL_GPIO_Init+0xfa>
 800436c:	4a92      	ldr	r2, [pc, #584]	@ (80045b8 <HAL_GPIO_Init+0x2ac>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d863      	bhi.n	800443a <HAL_GPIO_Init+0x12e>
 8004372:	4a92      	ldr	r2, [pc, #584]	@ (80045bc <HAL_GPIO_Init+0x2b0>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d046      	beq.n	8004406 <HAL_GPIO_Init+0xfa>
 8004378:	4a90      	ldr	r2, [pc, #576]	@ (80045bc <HAL_GPIO_Init+0x2b0>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d85d      	bhi.n	800443a <HAL_GPIO_Init+0x12e>
 800437e:	2b12      	cmp	r3, #18
 8004380:	d82a      	bhi.n	80043d8 <HAL_GPIO_Init+0xcc>
 8004382:	2b12      	cmp	r3, #18
 8004384:	d859      	bhi.n	800443a <HAL_GPIO_Init+0x12e>
 8004386:	a201      	add	r2, pc, #4	@ (adr r2, 800438c <HAL_GPIO_Init+0x80>)
 8004388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800438c:	08004407 	.word	0x08004407
 8004390:	080043e1 	.word	0x080043e1
 8004394:	080043f3 	.word	0x080043f3
 8004398:	08004435 	.word	0x08004435
 800439c:	0800443b 	.word	0x0800443b
 80043a0:	0800443b 	.word	0x0800443b
 80043a4:	0800443b 	.word	0x0800443b
 80043a8:	0800443b 	.word	0x0800443b
 80043ac:	0800443b 	.word	0x0800443b
 80043b0:	0800443b 	.word	0x0800443b
 80043b4:	0800443b 	.word	0x0800443b
 80043b8:	0800443b 	.word	0x0800443b
 80043bc:	0800443b 	.word	0x0800443b
 80043c0:	0800443b 	.word	0x0800443b
 80043c4:	0800443b 	.word	0x0800443b
 80043c8:	0800443b 	.word	0x0800443b
 80043cc:	0800443b 	.word	0x0800443b
 80043d0:	080043e9 	.word	0x080043e9
 80043d4:	080043fd 	.word	0x080043fd
 80043d8:	4a79      	ldr	r2, [pc, #484]	@ (80045c0 <HAL_GPIO_Init+0x2b4>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d013      	beq.n	8004406 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80043de:	e02c      	b.n	800443a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	68db      	ldr	r3, [r3, #12]
 80043e4:	623b      	str	r3, [r7, #32]
          break;
 80043e6:	e029      	b.n	800443c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	68db      	ldr	r3, [r3, #12]
 80043ec:	3304      	adds	r3, #4
 80043ee:	623b      	str	r3, [r7, #32]
          break;
 80043f0:	e024      	b.n	800443c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	68db      	ldr	r3, [r3, #12]
 80043f6:	3308      	adds	r3, #8
 80043f8:	623b      	str	r3, [r7, #32]
          break;
 80043fa:	e01f      	b.n	800443c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	68db      	ldr	r3, [r3, #12]
 8004400:	330c      	adds	r3, #12
 8004402:	623b      	str	r3, [r7, #32]
          break;
 8004404:	e01a      	b.n	800443c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d102      	bne.n	8004414 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800440e:	2304      	movs	r3, #4
 8004410:	623b      	str	r3, [r7, #32]
          break;
 8004412:	e013      	b.n	800443c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	689b      	ldr	r3, [r3, #8]
 8004418:	2b01      	cmp	r3, #1
 800441a:	d105      	bne.n	8004428 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800441c:	2308      	movs	r3, #8
 800441e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	69fa      	ldr	r2, [r7, #28]
 8004424:	611a      	str	r2, [r3, #16]
          break;
 8004426:	e009      	b.n	800443c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004428:	2308      	movs	r3, #8
 800442a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	69fa      	ldr	r2, [r7, #28]
 8004430:	615a      	str	r2, [r3, #20]
          break;
 8004432:	e003      	b.n	800443c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004434:	2300      	movs	r3, #0
 8004436:	623b      	str	r3, [r7, #32]
          break;
 8004438:	e000      	b.n	800443c <HAL_GPIO_Init+0x130>
          break;
 800443a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800443c:	69bb      	ldr	r3, [r7, #24]
 800443e:	2bff      	cmp	r3, #255	@ 0xff
 8004440:	d801      	bhi.n	8004446 <HAL_GPIO_Init+0x13a>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	e001      	b.n	800444a <HAL_GPIO_Init+0x13e>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	3304      	adds	r3, #4
 800444a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800444c:	69bb      	ldr	r3, [r7, #24]
 800444e:	2bff      	cmp	r3, #255	@ 0xff
 8004450:	d802      	bhi.n	8004458 <HAL_GPIO_Init+0x14c>
 8004452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004454:	009b      	lsls	r3, r3, #2
 8004456:	e002      	b.n	800445e <HAL_GPIO_Init+0x152>
 8004458:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800445a:	3b08      	subs	r3, #8
 800445c:	009b      	lsls	r3, r3, #2
 800445e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	681a      	ldr	r2, [r3, #0]
 8004464:	210f      	movs	r1, #15
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	fa01 f303 	lsl.w	r3, r1, r3
 800446c:	43db      	mvns	r3, r3
 800446e:	401a      	ands	r2, r3
 8004470:	6a39      	ldr	r1, [r7, #32]
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	fa01 f303 	lsl.w	r3, r1, r3
 8004478:	431a      	orrs	r2, r3
 800447a:	697b      	ldr	r3, [r7, #20]
 800447c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004486:	2b00      	cmp	r3, #0
 8004488:	f000 80b1 	beq.w	80045ee <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800448c:	4b4d      	ldr	r3, [pc, #308]	@ (80045c4 <HAL_GPIO_Init+0x2b8>)
 800448e:	699b      	ldr	r3, [r3, #24]
 8004490:	4a4c      	ldr	r2, [pc, #304]	@ (80045c4 <HAL_GPIO_Init+0x2b8>)
 8004492:	f043 0301 	orr.w	r3, r3, #1
 8004496:	6193      	str	r3, [r2, #24]
 8004498:	4b4a      	ldr	r3, [pc, #296]	@ (80045c4 <HAL_GPIO_Init+0x2b8>)
 800449a:	699b      	ldr	r3, [r3, #24]
 800449c:	f003 0301 	and.w	r3, r3, #1
 80044a0:	60bb      	str	r3, [r7, #8]
 80044a2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80044a4:	4a48      	ldr	r2, [pc, #288]	@ (80045c8 <HAL_GPIO_Init+0x2bc>)
 80044a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044a8:	089b      	lsrs	r3, r3, #2
 80044aa:	3302      	adds	r3, #2
 80044ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044b0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80044b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044b4:	f003 0303 	and.w	r3, r3, #3
 80044b8:	009b      	lsls	r3, r3, #2
 80044ba:	220f      	movs	r2, #15
 80044bc:	fa02 f303 	lsl.w	r3, r2, r3
 80044c0:	43db      	mvns	r3, r3
 80044c2:	68fa      	ldr	r2, [r7, #12]
 80044c4:	4013      	ands	r3, r2
 80044c6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	4a40      	ldr	r2, [pc, #256]	@ (80045cc <HAL_GPIO_Init+0x2c0>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d013      	beq.n	80044f8 <HAL_GPIO_Init+0x1ec>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	4a3f      	ldr	r2, [pc, #252]	@ (80045d0 <HAL_GPIO_Init+0x2c4>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d00d      	beq.n	80044f4 <HAL_GPIO_Init+0x1e8>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	4a3e      	ldr	r2, [pc, #248]	@ (80045d4 <HAL_GPIO_Init+0x2c8>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d007      	beq.n	80044f0 <HAL_GPIO_Init+0x1e4>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	4a3d      	ldr	r2, [pc, #244]	@ (80045d8 <HAL_GPIO_Init+0x2cc>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d101      	bne.n	80044ec <HAL_GPIO_Init+0x1e0>
 80044e8:	2303      	movs	r3, #3
 80044ea:	e006      	b.n	80044fa <HAL_GPIO_Init+0x1ee>
 80044ec:	2304      	movs	r3, #4
 80044ee:	e004      	b.n	80044fa <HAL_GPIO_Init+0x1ee>
 80044f0:	2302      	movs	r3, #2
 80044f2:	e002      	b.n	80044fa <HAL_GPIO_Init+0x1ee>
 80044f4:	2301      	movs	r3, #1
 80044f6:	e000      	b.n	80044fa <HAL_GPIO_Init+0x1ee>
 80044f8:	2300      	movs	r3, #0
 80044fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044fc:	f002 0203 	and.w	r2, r2, #3
 8004500:	0092      	lsls	r2, r2, #2
 8004502:	4093      	lsls	r3, r2
 8004504:	68fa      	ldr	r2, [r7, #12]
 8004506:	4313      	orrs	r3, r2
 8004508:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800450a:	492f      	ldr	r1, [pc, #188]	@ (80045c8 <HAL_GPIO_Init+0x2bc>)
 800450c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800450e:	089b      	lsrs	r3, r3, #2
 8004510:	3302      	adds	r3, #2
 8004512:	68fa      	ldr	r2, [r7, #12]
 8004514:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004520:	2b00      	cmp	r3, #0
 8004522:	d006      	beq.n	8004532 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004524:	4b2d      	ldr	r3, [pc, #180]	@ (80045dc <HAL_GPIO_Init+0x2d0>)
 8004526:	681a      	ldr	r2, [r3, #0]
 8004528:	492c      	ldr	r1, [pc, #176]	@ (80045dc <HAL_GPIO_Init+0x2d0>)
 800452a:	69bb      	ldr	r3, [r7, #24]
 800452c:	4313      	orrs	r3, r2
 800452e:	600b      	str	r3, [r1, #0]
 8004530:	e006      	b.n	8004540 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004532:	4b2a      	ldr	r3, [pc, #168]	@ (80045dc <HAL_GPIO_Init+0x2d0>)
 8004534:	681a      	ldr	r2, [r3, #0]
 8004536:	69bb      	ldr	r3, [r7, #24]
 8004538:	43db      	mvns	r3, r3
 800453a:	4928      	ldr	r1, [pc, #160]	@ (80045dc <HAL_GPIO_Init+0x2d0>)
 800453c:	4013      	ands	r3, r2
 800453e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004548:	2b00      	cmp	r3, #0
 800454a:	d006      	beq.n	800455a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800454c:	4b23      	ldr	r3, [pc, #140]	@ (80045dc <HAL_GPIO_Init+0x2d0>)
 800454e:	685a      	ldr	r2, [r3, #4]
 8004550:	4922      	ldr	r1, [pc, #136]	@ (80045dc <HAL_GPIO_Init+0x2d0>)
 8004552:	69bb      	ldr	r3, [r7, #24]
 8004554:	4313      	orrs	r3, r2
 8004556:	604b      	str	r3, [r1, #4]
 8004558:	e006      	b.n	8004568 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800455a:	4b20      	ldr	r3, [pc, #128]	@ (80045dc <HAL_GPIO_Init+0x2d0>)
 800455c:	685a      	ldr	r2, [r3, #4]
 800455e:	69bb      	ldr	r3, [r7, #24]
 8004560:	43db      	mvns	r3, r3
 8004562:	491e      	ldr	r1, [pc, #120]	@ (80045dc <HAL_GPIO_Init+0x2d0>)
 8004564:	4013      	ands	r3, r2
 8004566:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004570:	2b00      	cmp	r3, #0
 8004572:	d006      	beq.n	8004582 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004574:	4b19      	ldr	r3, [pc, #100]	@ (80045dc <HAL_GPIO_Init+0x2d0>)
 8004576:	689a      	ldr	r2, [r3, #8]
 8004578:	4918      	ldr	r1, [pc, #96]	@ (80045dc <HAL_GPIO_Init+0x2d0>)
 800457a:	69bb      	ldr	r3, [r7, #24]
 800457c:	4313      	orrs	r3, r2
 800457e:	608b      	str	r3, [r1, #8]
 8004580:	e006      	b.n	8004590 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004582:	4b16      	ldr	r3, [pc, #88]	@ (80045dc <HAL_GPIO_Init+0x2d0>)
 8004584:	689a      	ldr	r2, [r3, #8]
 8004586:	69bb      	ldr	r3, [r7, #24]
 8004588:	43db      	mvns	r3, r3
 800458a:	4914      	ldr	r1, [pc, #80]	@ (80045dc <HAL_GPIO_Init+0x2d0>)
 800458c:	4013      	ands	r3, r2
 800458e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004598:	2b00      	cmp	r3, #0
 800459a:	d021      	beq.n	80045e0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800459c:	4b0f      	ldr	r3, [pc, #60]	@ (80045dc <HAL_GPIO_Init+0x2d0>)
 800459e:	68da      	ldr	r2, [r3, #12]
 80045a0:	490e      	ldr	r1, [pc, #56]	@ (80045dc <HAL_GPIO_Init+0x2d0>)
 80045a2:	69bb      	ldr	r3, [r7, #24]
 80045a4:	4313      	orrs	r3, r2
 80045a6:	60cb      	str	r3, [r1, #12]
 80045a8:	e021      	b.n	80045ee <HAL_GPIO_Init+0x2e2>
 80045aa:	bf00      	nop
 80045ac:	10320000 	.word	0x10320000
 80045b0:	10310000 	.word	0x10310000
 80045b4:	10220000 	.word	0x10220000
 80045b8:	10210000 	.word	0x10210000
 80045bc:	10120000 	.word	0x10120000
 80045c0:	10110000 	.word	0x10110000
 80045c4:	40021000 	.word	0x40021000
 80045c8:	40010000 	.word	0x40010000
 80045cc:	40010800 	.word	0x40010800
 80045d0:	40010c00 	.word	0x40010c00
 80045d4:	40011000 	.word	0x40011000
 80045d8:	40011400 	.word	0x40011400
 80045dc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80045e0:	4b0b      	ldr	r3, [pc, #44]	@ (8004610 <HAL_GPIO_Init+0x304>)
 80045e2:	68da      	ldr	r2, [r3, #12]
 80045e4:	69bb      	ldr	r3, [r7, #24]
 80045e6:	43db      	mvns	r3, r3
 80045e8:	4909      	ldr	r1, [pc, #36]	@ (8004610 <HAL_GPIO_Init+0x304>)
 80045ea:	4013      	ands	r3, r2
 80045ec:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80045ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045f0:	3301      	adds	r3, #1
 80045f2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	681a      	ldr	r2, [r3, #0]
 80045f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045fa:	fa22 f303 	lsr.w	r3, r2, r3
 80045fe:	2b00      	cmp	r3, #0
 8004600:	f47f ae8e 	bne.w	8004320 <HAL_GPIO_Init+0x14>
  }
}
 8004604:	bf00      	nop
 8004606:	bf00      	nop
 8004608:	372c      	adds	r7, #44	@ 0x2c
 800460a:	46bd      	mov	sp, r7
 800460c:	bc80      	pop	{r7}
 800460e:	4770      	bx	lr
 8004610:	40010400 	.word	0x40010400

08004614 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004614:	b480      	push	{r7}
 8004616:	b085      	sub	sp, #20
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
 800461c:	460b      	mov	r3, r1
 800461e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	689a      	ldr	r2, [r3, #8]
 8004624:	887b      	ldrh	r3, [r7, #2]
 8004626:	4013      	ands	r3, r2
 8004628:	2b00      	cmp	r3, #0
 800462a:	d002      	beq.n	8004632 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800462c:	2301      	movs	r3, #1
 800462e:	73fb      	strb	r3, [r7, #15]
 8004630:	e001      	b.n	8004636 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004632:	2300      	movs	r3, #0
 8004634:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004636:	7bfb      	ldrb	r3, [r7, #15]
}
 8004638:	4618      	mov	r0, r3
 800463a:	3714      	adds	r7, #20
 800463c:	46bd      	mov	sp, r7
 800463e:	bc80      	pop	{r7}
 8004640:	4770      	bx	lr

08004642 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004642:	b480      	push	{r7}
 8004644:	b083      	sub	sp, #12
 8004646:	af00      	add	r7, sp, #0
 8004648:	6078      	str	r0, [r7, #4]
 800464a:	460b      	mov	r3, r1
 800464c:	807b      	strh	r3, [r7, #2]
 800464e:	4613      	mov	r3, r2
 8004650:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004652:	787b      	ldrb	r3, [r7, #1]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d003      	beq.n	8004660 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004658:	887a      	ldrh	r2, [r7, #2]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800465e:	e003      	b.n	8004668 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004660:	887b      	ldrh	r3, [r7, #2]
 8004662:	041a      	lsls	r2, r3, #16
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	611a      	str	r2, [r3, #16]
}
 8004668:	bf00      	nop
 800466a:	370c      	adds	r7, #12
 800466c:	46bd      	mov	sp, r7
 800466e:	bc80      	pop	{r7}
 8004670:	4770      	bx	lr

08004672 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004672:	b480      	push	{r7}
 8004674:	b085      	sub	sp, #20
 8004676:	af00      	add	r7, sp, #0
 8004678:	6078      	str	r0, [r7, #4]
 800467a:	460b      	mov	r3, r1
 800467c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	68db      	ldr	r3, [r3, #12]
 8004682:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004684:	887a      	ldrh	r2, [r7, #2]
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	4013      	ands	r3, r2
 800468a:	041a      	lsls	r2, r3, #16
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	43d9      	mvns	r1, r3
 8004690:	887b      	ldrh	r3, [r7, #2]
 8004692:	400b      	ands	r3, r1
 8004694:	431a      	orrs	r2, r3
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	611a      	str	r2, [r3, #16]
}
 800469a:	bf00      	nop
 800469c:	3714      	adds	r7, #20
 800469e:	46bd      	mov	sp, r7
 80046a0:	bc80      	pop	{r7}
 80046a2:	4770      	bx	lr

080046a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b086      	sub	sp, #24
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d101      	bne.n	80046b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80046b2:	2301      	movs	r3, #1
 80046b4:	e272      	b.n	8004b9c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f003 0301 	and.w	r3, r3, #1
 80046be:	2b00      	cmp	r3, #0
 80046c0:	f000 8087 	beq.w	80047d2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80046c4:	4b92      	ldr	r3, [pc, #584]	@ (8004910 <HAL_RCC_OscConfig+0x26c>)
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	f003 030c 	and.w	r3, r3, #12
 80046cc:	2b04      	cmp	r3, #4
 80046ce:	d00c      	beq.n	80046ea <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80046d0:	4b8f      	ldr	r3, [pc, #572]	@ (8004910 <HAL_RCC_OscConfig+0x26c>)
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	f003 030c 	and.w	r3, r3, #12
 80046d8:	2b08      	cmp	r3, #8
 80046da:	d112      	bne.n	8004702 <HAL_RCC_OscConfig+0x5e>
 80046dc:	4b8c      	ldr	r3, [pc, #560]	@ (8004910 <HAL_RCC_OscConfig+0x26c>)
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80046e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80046e8:	d10b      	bne.n	8004702 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046ea:	4b89      	ldr	r3, [pc, #548]	@ (8004910 <HAL_RCC_OscConfig+0x26c>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d06c      	beq.n	80047d0 <HAL_RCC_OscConfig+0x12c>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d168      	bne.n	80047d0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	e24c      	b.n	8004b9c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800470a:	d106      	bne.n	800471a <HAL_RCC_OscConfig+0x76>
 800470c:	4b80      	ldr	r3, [pc, #512]	@ (8004910 <HAL_RCC_OscConfig+0x26c>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a7f      	ldr	r2, [pc, #508]	@ (8004910 <HAL_RCC_OscConfig+0x26c>)
 8004712:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004716:	6013      	str	r3, [r2, #0]
 8004718:	e02e      	b.n	8004778 <HAL_RCC_OscConfig+0xd4>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d10c      	bne.n	800473c <HAL_RCC_OscConfig+0x98>
 8004722:	4b7b      	ldr	r3, [pc, #492]	@ (8004910 <HAL_RCC_OscConfig+0x26c>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a7a      	ldr	r2, [pc, #488]	@ (8004910 <HAL_RCC_OscConfig+0x26c>)
 8004728:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800472c:	6013      	str	r3, [r2, #0]
 800472e:	4b78      	ldr	r3, [pc, #480]	@ (8004910 <HAL_RCC_OscConfig+0x26c>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4a77      	ldr	r2, [pc, #476]	@ (8004910 <HAL_RCC_OscConfig+0x26c>)
 8004734:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004738:	6013      	str	r3, [r2, #0]
 800473a:	e01d      	b.n	8004778 <HAL_RCC_OscConfig+0xd4>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004744:	d10c      	bne.n	8004760 <HAL_RCC_OscConfig+0xbc>
 8004746:	4b72      	ldr	r3, [pc, #456]	@ (8004910 <HAL_RCC_OscConfig+0x26c>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4a71      	ldr	r2, [pc, #452]	@ (8004910 <HAL_RCC_OscConfig+0x26c>)
 800474c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004750:	6013      	str	r3, [r2, #0]
 8004752:	4b6f      	ldr	r3, [pc, #444]	@ (8004910 <HAL_RCC_OscConfig+0x26c>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a6e      	ldr	r2, [pc, #440]	@ (8004910 <HAL_RCC_OscConfig+0x26c>)
 8004758:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800475c:	6013      	str	r3, [r2, #0]
 800475e:	e00b      	b.n	8004778 <HAL_RCC_OscConfig+0xd4>
 8004760:	4b6b      	ldr	r3, [pc, #428]	@ (8004910 <HAL_RCC_OscConfig+0x26c>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a6a      	ldr	r2, [pc, #424]	@ (8004910 <HAL_RCC_OscConfig+0x26c>)
 8004766:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800476a:	6013      	str	r3, [r2, #0]
 800476c:	4b68      	ldr	r3, [pc, #416]	@ (8004910 <HAL_RCC_OscConfig+0x26c>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a67      	ldr	r2, [pc, #412]	@ (8004910 <HAL_RCC_OscConfig+0x26c>)
 8004772:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004776:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d013      	beq.n	80047a8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004780:	f7ff fa88 	bl	8003c94 <HAL_GetTick>
 8004784:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004786:	e008      	b.n	800479a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004788:	f7ff fa84 	bl	8003c94 <HAL_GetTick>
 800478c:	4602      	mov	r2, r0
 800478e:	693b      	ldr	r3, [r7, #16]
 8004790:	1ad3      	subs	r3, r2, r3
 8004792:	2b64      	cmp	r3, #100	@ 0x64
 8004794:	d901      	bls.n	800479a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004796:	2303      	movs	r3, #3
 8004798:	e200      	b.n	8004b9c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800479a:	4b5d      	ldr	r3, [pc, #372]	@ (8004910 <HAL_RCC_OscConfig+0x26c>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d0f0      	beq.n	8004788 <HAL_RCC_OscConfig+0xe4>
 80047a6:	e014      	b.n	80047d2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047a8:	f7ff fa74 	bl	8003c94 <HAL_GetTick>
 80047ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047ae:	e008      	b.n	80047c2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047b0:	f7ff fa70 	bl	8003c94 <HAL_GetTick>
 80047b4:	4602      	mov	r2, r0
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	1ad3      	subs	r3, r2, r3
 80047ba:	2b64      	cmp	r3, #100	@ 0x64
 80047bc:	d901      	bls.n	80047c2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80047be:	2303      	movs	r3, #3
 80047c0:	e1ec      	b.n	8004b9c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047c2:	4b53      	ldr	r3, [pc, #332]	@ (8004910 <HAL_RCC_OscConfig+0x26c>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d1f0      	bne.n	80047b0 <HAL_RCC_OscConfig+0x10c>
 80047ce:	e000      	b.n	80047d2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f003 0302 	and.w	r3, r3, #2
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d063      	beq.n	80048a6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80047de:	4b4c      	ldr	r3, [pc, #304]	@ (8004910 <HAL_RCC_OscConfig+0x26c>)
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	f003 030c 	and.w	r3, r3, #12
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d00b      	beq.n	8004802 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80047ea:	4b49      	ldr	r3, [pc, #292]	@ (8004910 <HAL_RCC_OscConfig+0x26c>)
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	f003 030c 	and.w	r3, r3, #12
 80047f2:	2b08      	cmp	r3, #8
 80047f4:	d11c      	bne.n	8004830 <HAL_RCC_OscConfig+0x18c>
 80047f6:	4b46      	ldr	r3, [pc, #280]	@ (8004910 <HAL_RCC_OscConfig+0x26c>)
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d116      	bne.n	8004830 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004802:	4b43      	ldr	r3, [pc, #268]	@ (8004910 <HAL_RCC_OscConfig+0x26c>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f003 0302 	and.w	r3, r3, #2
 800480a:	2b00      	cmp	r3, #0
 800480c:	d005      	beq.n	800481a <HAL_RCC_OscConfig+0x176>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	691b      	ldr	r3, [r3, #16]
 8004812:	2b01      	cmp	r3, #1
 8004814:	d001      	beq.n	800481a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004816:	2301      	movs	r3, #1
 8004818:	e1c0      	b.n	8004b9c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800481a:	4b3d      	ldr	r3, [pc, #244]	@ (8004910 <HAL_RCC_OscConfig+0x26c>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	695b      	ldr	r3, [r3, #20]
 8004826:	00db      	lsls	r3, r3, #3
 8004828:	4939      	ldr	r1, [pc, #228]	@ (8004910 <HAL_RCC_OscConfig+0x26c>)
 800482a:	4313      	orrs	r3, r2
 800482c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800482e:	e03a      	b.n	80048a6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	691b      	ldr	r3, [r3, #16]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d020      	beq.n	800487a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004838:	4b36      	ldr	r3, [pc, #216]	@ (8004914 <HAL_RCC_OscConfig+0x270>)
 800483a:	2201      	movs	r2, #1
 800483c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800483e:	f7ff fa29 	bl	8003c94 <HAL_GetTick>
 8004842:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004844:	e008      	b.n	8004858 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004846:	f7ff fa25 	bl	8003c94 <HAL_GetTick>
 800484a:	4602      	mov	r2, r0
 800484c:	693b      	ldr	r3, [r7, #16]
 800484e:	1ad3      	subs	r3, r2, r3
 8004850:	2b02      	cmp	r3, #2
 8004852:	d901      	bls.n	8004858 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004854:	2303      	movs	r3, #3
 8004856:	e1a1      	b.n	8004b9c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004858:	4b2d      	ldr	r3, [pc, #180]	@ (8004910 <HAL_RCC_OscConfig+0x26c>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f003 0302 	and.w	r3, r3, #2
 8004860:	2b00      	cmp	r3, #0
 8004862:	d0f0      	beq.n	8004846 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004864:	4b2a      	ldr	r3, [pc, #168]	@ (8004910 <HAL_RCC_OscConfig+0x26c>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	695b      	ldr	r3, [r3, #20]
 8004870:	00db      	lsls	r3, r3, #3
 8004872:	4927      	ldr	r1, [pc, #156]	@ (8004910 <HAL_RCC_OscConfig+0x26c>)
 8004874:	4313      	orrs	r3, r2
 8004876:	600b      	str	r3, [r1, #0]
 8004878:	e015      	b.n	80048a6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800487a:	4b26      	ldr	r3, [pc, #152]	@ (8004914 <HAL_RCC_OscConfig+0x270>)
 800487c:	2200      	movs	r2, #0
 800487e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004880:	f7ff fa08 	bl	8003c94 <HAL_GetTick>
 8004884:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004886:	e008      	b.n	800489a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004888:	f7ff fa04 	bl	8003c94 <HAL_GetTick>
 800488c:	4602      	mov	r2, r0
 800488e:	693b      	ldr	r3, [r7, #16]
 8004890:	1ad3      	subs	r3, r2, r3
 8004892:	2b02      	cmp	r3, #2
 8004894:	d901      	bls.n	800489a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004896:	2303      	movs	r3, #3
 8004898:	e180      	b.n	8004b9c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800489a:	4b1d      	ldr	r3, [pc, #116]	@ (8004910 <HAL_RCC_OscConfig+0x26c>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f003 0302 	and.w	r3, r3, #2
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d1f0      	bne.n	8004888 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f003 0308 	and.w	r3, r3, #8
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d03a      	beq.n	8004928 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	699b      	ldr	r3, [r3, #24]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d019      	beq.n	80048ee <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80048ba:	4b17      	ldr	r3, [pc, #92]	@ (8004918 <HAL_RCC_OscConfig+0x274>)
 80048bc:	2201      	movs	r2, #1
 80048be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048c0:	f7ff f9e8 	bl	8003c94 <HAL_GetTick>
 80048c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048c6:	e008      	b.n	80048da <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048c8:	f7ff f9e4 	bl	8003c94 <HAL_GetTick>
 80048cc:	4602      	mov	r2, r0
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	1ad3      	subs	r3, r2, r3
 80048d2:	2b02      	cmp	r3, #2
 80048d4:	d901      	bls.n	80048da <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80048d6:	2303      	movs	r3, #3
 80048d8:	e160      	b.n	8004b9c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048da:	4b0d      	ldr	r3, [pc, #52]	@ (8004910 <HAL_RCC_OscConfig+0x26c>)
 80048dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048de:	f003 0302 	and.w	r3, r3, #2
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d0f0      	beq.n	80048c8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80048e6:	2001      	movs	r0, #1
 80048e8:	f000 faa6 	bl	8004e38 <RCC_Delay>
 80048ec:	e01c      	b.n	8004928 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80048ee:	4b0a      	ldr	r3, [pc, #40]	@ (8004918 <HAL_RCC_OscConfig+0x274>)
 80048f0:	2200      	movs	r2, #0
 80048f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048f4:	f7ff f9ce 	bl	8003c94 <HAL_GetTick>
 80048f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048fa:	e00f      	b.n	800491c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048fc:	f7ff f9ca 	bl	8003c94 <HAL_GetTick>
 8004900:	4602      	mov	r2, r0
 8004902:	693b      	ldr	r3, [r7, #16]
 8004904:	1ad3      	subs	r3, r2, r3
 8004906:	2b02      	cmp	r3, #2
 8004908:	d908      	bls.n	800491c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800490a:	2303      	movs	r3, #3
 800490c:	e146      	b.n	8004b9c <HAL_RCC_OscConfig+0x4f8>
 800490e:	bf00      	nop
 8004910:	40021000 	.word	0x40021000
 8004914:	42420000 	.word	0x42420000
 8004918:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800491c:	4b92      	ldr	r3, [pc, #584]	@ (8004b68 <HAL_RCC_OscConfig+0x4c4>)
 800491e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004920:	f003 0302 	and.w	r3, r3, #2
 8004924:	2b00      	cmp	r3, #0
 8004926:	d1e9      	bne.n	80048fc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f003 0304 	and.w	r3, r3, #4
 8004930:	2b00      	cmp	r3, #0
 8004932:	f000 80a6 	beq.w	8004a82 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004936:	2300      	movs	r3, #0
 8004938:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800493a:	4b8b      	ldr	r3, [pc, #556]	@ (8004b68 <HAL_RCC_OscConfig+0x4c4>)
 800493c:	69db      	ldr	r3, [r3, #28]
 800493e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004942:	2b00      	cmp	r3, #0
 8004944:	d10d      	bne.n	8004962 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004946:	4b88      	ldr	r3, [pc, #544]	@ (8004b68 <HAL_RCC_OscConfig+0x4c4>)
 8004948:	69db      	ldr	r3, [r3, #28]
 800494a:	4a87      	ldr	r2, [pc, #540]	@ (8004b68 <HAL_RCC_OscConfig+0x4c4>)
 800494c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004950:	61d3      	str	r3, [r2, #28]
 8004952:	4b85      	ldr	r3, [pc, #532]	@ (8004b68 <HAL_RCC_OscConfig+0x4c4>)
 8004954:	69db      	ldr	r3, [r3, #28]
 8004956:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800495a:	60bb      	str	r3, [r7, #8]
 800495c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800495e:	2301      	movs	r3, #1
 8004960:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004962:	4b82      	ldr	r3, [pc, #520]	@ (8004b6c <HAL_RCC_OscConfig+0x4c8>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800496a:	2b00      	cmp	r3, #0
 800496c:	d118      	bne.n	80049a0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800496e:	4b7f      	ldr	r3, [pc, #508]	@ (8004b6c <HAL_RCC_OscConfig+0x4c8>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4a7e      	ldr	r2, [pc, #504]	@ (8004b6c <HAL_RCC_OscConfig+0x4c8>)
 8004974:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004978:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800497a:	f7ff f98b 	bl	8003c94 <HAL_GetTick>
 800497e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004980:	e008      	b.n	8004994 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004982:	f7ff f987 	bl	8003c94 <HAL_GetTick>
 8004986:	4602      	mov	r2, r0
 8004988:	693b      	ldr	r3, [r7, #16]
 800498a:	1ad3      	subs	r3, r2, r3
 800498c:	2b64      	cmp	r3, #100	@ 0x64
 800498e:	d901      	bls.n	8004994 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004990:	2303      	movs	r3, #3
 8004992:	e103      	b.n	8004b9c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004994:	4b75      	ldr	r3, [pc, #468]	@ (8004b6c <HAL_RCC_OscConfig+0x4c8>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800499c:	2b00      	cmp	r3, #0
 800499e:	d0f0      	beq.n	8004982 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	68db      	ldr	r3, [r3, #12]
 80049a4:	2b01      	cmp	r3, #1
 80049a6:	d106      	bne.n	80049b6 <HAL_RCC_OscConfig+0x312>
 80049a8:	4b6f      	ldr	r3, [pc, #444]	@ (8004b68 <HAL_RCC_OscConfig+0x4c4>)
 80049aa:	6a1b      	ldr	r3, [r3, #32]
 80049ac:	4a6e      	ldr	r2, [pc, #440]	@ (8004b68 <HAL_RCC_OscConfig+0x4c4>)
 80049ae:	f043 0301 	orr.w	r3, r3, #1
 80049b2:	6213      	str	r3, [r2, #32]
 80049b4:	e02d      	b.n	8004a12 <HAL_RCC_OscConfig+0x36e>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	68db      	ldr	r3, [r3, #12]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d10c      	bne.n	80049d8 <HAL_RCC_OscConfig+0x334>
 80049be:	4b6a      	ldr	r3, [pc, #424]	@ (8004b68 <HAL_RCC_OscConfig+0x4c4>)
 80049c0:	6a1b      	ldr	r3, [r3, #32]
 80049c2:	4a69      	ldr	r2, [pc, #420]	@ (8004b68 <HAL_RCC_OscConfig+0x4c4>)
 80049c4:	f023 0301 	bic.w	r3, r3, #1
 80049c8:	6213      	str	r3, [r2, #32]
 80049ca:	4b67      	ldr	r3, [pc, #412]	@ (8004b68 <HAL_RCC_OscConfig+0x4c4>)
 80049cc:	6a1b      	ldr	r3, [r3, #32]
 80049ce:	4a66      	ldr	r2, [pc, #408]	@ (8004b68 <HAL_RCC_OscConfig+0x4c4>)
 80049d0:	f023 0304 	bic.w	r3, r3, #4
 80049d4:	6213      	str	r3, [r2, #32]
 80049d6:	e01c      	b.n	8004a12 <HAL_RCC_OscConfig+0x36e>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	68db      	ldr	r3, [r3, #12]
 80049dc:	2b05      	cmp	r3, #5
 80049de:	d10c      	bne.n	80049fa <HAL_RCC_OscConfig+0x356>
 80049e0:	4b61      	ldr	r3, [pc, #388]	@ (8004b68 <HAL_RCC_OscConfig+0x4c4>)
 80049e2:	6a1b      	ldr	r3, [r3, #32]
 80049e4:	4a60      	ldr	r2, [pc, #384]	@ (8004b68 <HAL_RCC_OscConfig+0x4c4>)
 80049e6:	f043 0304 	orr.w	r3, r3, #4
 80049ea:	6213      	str	r3, [r2, #32]
 80049ec:	4b5e      	ldr	r3, [pc, #376]	@ (8004b68 <HAL_RCC_OscConfig+0x4c4>)
 80049ee:	6a1b      	ldr	r3, [r3, #32]
 80049f0:	4a5d      	ldr	r2, [pc, #372]	@ (8004b68 <HAL_RCC_OscConfig+0x4c4>)
 80049f2:	f043 0301 	orr.w	r3, r3, #1
 80049f6:	6213      	str	r3, [r2, #32]
 80049f8:	e00b      	b.n	8004a12 <HAL_RCC_OscConfig+0x36e>
 80049fa:	4b5b      	ldr	r3, [pc, #364]	@ (8004b68 <HAL_RCC_OscConfig+0x4c4>)
 80049fc:	6a1b      	ldr	r3, [r3, #32]
 80049fe:	4a5a      	ldr	r2, [pc, #360]	@ (8004b68 <HAL_RCC_OscConfig+0x4c4>)
 8004a00:	f023 0301 	bic.w	r3, r3, #1
 8004a04:	6213      	str	r3, [r2, #32]
 8004a06:	4b58      	ldr	r3, [pc, #352]	@ (8004b68 <HAL_RCC_OscConfig+0x4c4>)
 8004a08:	6a1b      	ldr	r3, [r3, #32]
 8004a0a:	4a57      	ldr	r2, [pc, #348]	@ (8004b68 <HAL_RCC_OscConfig+0x4c4>)
 8004a0c:	f023 0304 	bic.w	r3, r3, #4
 8004a10:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	68db      	ldr	r3, [r3, #12]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d015      	beq.n	8004a46 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a1a:	f7ff f93b 	bl	8003c94 <HAL_GetTick>
 8004a1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a20:	e00a      	b.n	8004a38 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a22:	f7ff f937 	bl	8003c94 <HAL_GetTick>
 8004a26:	4602      	mov	r2, r0
 8004a28:	693b      	ldr	r3, [r7, #16]
 8004a2a:	1ad3      	subs	r3, r2, r3
 8004a2c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d901      	bls.n	8004a38 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004a34:	2303      	movs	r3, #3
 8004a36:	e0b1      	b.n	8004b9c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a38:	4b4b      	ldr	r3, [pc, #300]	@ (8004b68 <HAL_RCC_OscConfig+0x4c4>)
 8004a3a:	6a1b      	ldr	r3, [r3, #32]
 8004a3c:	f003 0302 	and.w	r3, r3, #2
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d0ee      	beq.n	8004a22 <HAL_RCC_OscConfig+0x37e>
 8004a44:	e014      	b.n	8004a70 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a46:	f7ff f925 	bl	8003c94 <HAL_GetTick>
 8004a4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a4c:	e00a      	b.n	8004a64 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a4e:	f7ff f921 	bl	8003c94 <HAL_GetTick>
 8004a52:	4602      	mov	r2, r0
 8004a54:	693b      	ldr	r3, [r7, #16]
 8004a56:	1ad3      	subs	r3, r2, r3
 8004a58:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d901      	bls.n	8004a64 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004a60:	2303      	movs	r3, #3
 8004a62:	e09b      	b.n	8004b9c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a64:	4b40      	ldr	r3, [pc, #256]	@ (8004b68 <HAL_RCC_OscConfig+0x4c4>)
 8004a66:	6a1b      	ldr	r3, [r3, #32]
 8004a68:	f003 0302 	and.w	r3, r3, #2
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d1ee      	bne.n	8004a4e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004a70:	7dfb      	ldrb	r3, [r7, #23]
 8004a72:	2b01      	cmp	r3, #1
 8004a74:	d105      	bne.n	8004a82 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a76:	4b3c      	ldr	r3, [pc, #240]	@ (8004b68 <HAL_RCC_OscConfig+0x4c4>)
 8004a78:	69db      	ldr	r3, [r3, #28]
 8004a7a:	4a3b      	ldr	r2, [pc, #236]	@ (8004b68 <HAL_RCC_OscConfig+0x4c4>)
 8004a7c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004a80:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	69db      	ldr	r3, [r3, #28]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	f000 8087 	beq.w	8004b9a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004a8c:	4b36      	ldr	r3, [pc, #216]	@ (8004b68 <HAL_RCC_OscConfig+0x4c4>)
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	f003 030c 	and.w	r3, r3, #12
 8004a94:	2b08      	cmp	r3, #8
 8004a96:	d061      	beq.n	8004b5c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	69db      	ldr	r3, [r3, #28]
 8004a9c:	2b02      	cmp	r3, #2
 8004a9e:	d146      	bne.n	8004b2e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004aa0:	4b33      	ldr	r3, [pc, #204]	@ (8004b70 <HAL_RCC_OscConfig+0x4cc>)
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004aa6:	f7ff f8f5 	bl	8003c94 <HAL_GetTick>
 8004aaa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004aac:	e008      	b.n	8004ac0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004aae:	f7ff f8f1 	bl	8003c94 <HAL_GetTick>
 8004ab2:	4602      	mov	r2, r0
 8004ab4:	693b      	ldr	r3, [r7, #16]
 8004ab6:	1ad3      	subs	r3, r2, r3
 8004ab8:	2b02      	cmp	r3, #2
 8004aba:	d901      	bls.n	8004ac0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004abc:	2303      	movs	r3, #3
 8004abe:	e06d      	b.n	8004b9c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004ac0:	4b29      	ldr	r3, [pc, #164]	@ (8004b68 <HAL_RCC_OscConfig+0x4c4>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d1f0      	bne.n	8004aae <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6a1b      	ldr	r3, [r3, #32]
 8004ad0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ad4:	d108      	bne.n	8004ae8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004ad6:	4b24      	ldr	r3, [pc, #144]	@ (8004b68 <HAL_RCC_OscConfig+0x4c4>)
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	689b      	ldr	r3, [r3, #8]
 8004ae2:	4921      	ldr	r1, [pc, #132]	@ (8004b68 <HAL_RCC_OscConfig+0x4c4>)
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ae8:	4b1f      	ldr	r3, [pc, #124]	@ (8004b68 <HAL_RCC_OscConfig+0x4c4>)
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6a19      	ldr	r1, [r3, #32]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004af8:	430b      	orrs	r3, r1
 8004afa:	491b      	ldr	r1, [pc, #108]	@ (8004b68 <HAL_RCC_OscConfig+0x4c4>)
 8004afc:	4313      	orrs	r3, r2
 8004afe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b00:	4b1b      	ldr	r3, [pc, #108]	@ (8004b70 <HAL_RCC_OscConfig+0x4cc>)
 8004b02:	2201      	movs	r2, #1
 8004b04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b06:	f7ff f8c5 	bl	8003c94 <HAL_GetTick>
 8004b0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004b0c:	e008      	b.n	8004b20 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b0e:	f7ff f8c1 	bl	8003c94 <HAL_GetTick>
 8004b12:	4602      	mov	r2, r0
 8004b14:	693b      	ldr	r3, [r7, #16]
 8004b16:	1ad3      	subs	r3, r2, r3
 8004b18:	2b02      	cmp	r3, #2
 8004b1a:	d901      	bls.n	8004b20 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004b1c:	2303      	movs	r3, #3
 8004b1e:	e03d      	b.n	8004b9c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004b20:	4b11      	ldr	r3, [pc, #68]	@ (8004b68 <HAL_RCC_OscConfig+0x4c4>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d0f0      	beq.n	8004b0e <HAL_RCC_OscConfig+0x46a>
 8004b2c:	e035      	b.n	8004b9a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b2e:	4b10      	ldr	r3, [pc, #64]	@ (8004b70 <HAL_RCC_OscConfig+0x4cc>)
 8004b30:	2200      	movs	r2, #0
 8004b32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b34:	f7ff f8ae 	bl	8003c94 <HAL_GetTick>
 8004b38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b3a:	e008      	b.n	8004b4e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b3c:	f7ff f8aa 	bl	8003c94 <HAL_GetTick>
 8004b40:	4602      	mov	r2, r0
 8004b42:	693b      	ldr	r3, [r7, #16]
 8004b44:	1ad3      	subs	r3, r2, r3
 8004b46:	2b02      	cmp	r3, #2
 8004b48:	d901      	bls.n	8004b4e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004b4a:	2303      	movs	r3, #3
 8004b4c:	e026      	b.n	8004b9c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b4e:	4b06      	ldr	r3, [pc, #24]	@ (8004b68 <HAL_RCC_OscConfig+0x4c4>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d1f0      	bne.n	8004b3c <HAL_RCC_OscConfig+0x498>
 8004b5a:	e01e      	b.n	8004b9a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	69db      	ldr	r3, [r3, #28]
 8004b60:	2b01      	cmp	r3, #1
 8004b62:	d107      	bne.n	8004b74 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004b64:	2301      	movs	r3, #1
 8004b66:	e019      	b.n	8004b9c <HAL_RCC_OscConfig+0x4f8>
 8004b68:	40021000 	.word	0x40021000
 8004b6c:	40007000 	.word	0x40007000
 8004b70:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004b74:	4b0b      	ldr	r3, [pc, #44]	@ (8004ba4 <HAL_RCC_OscConfig+0x500>)
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6a1b      	ldr	r3, [r3, #32]
 8004b84:	429a      	cmp	r2, r3
 8004b86:	d106      	bne.n	8004b96 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b92:	429a      	cmp	r2, r3
 8004b94:	d001      	beq.n	8004b9a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004b96:	2301      	movs	r3, #1
 8004b98:	e000      	b.n	8004b9c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004b9a:	2300      	movs	r3, #0
}
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	3718      	adds	r7, #24
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	bd80      	pop	{r7, pc}
 8004ba4:	40021000 	.word	0x40021000

08004ba8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b084      	sub	sp, #16
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
 8004bb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d101      	bne.n	8004bbc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004bb8:	2301      	movs	r3, #1
 8004bba:	e0d0      	b.n	8004d5e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004bbc:	4b6a      	ldr	r3, [pc, #424]	@ (8004d68 <HAL_RCC_ClockConfig+0x1c0>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f003 0307 	and.w	r3, r3, #7
 8004bc4:	683a      	ldr	r2, [r7, #0]
 8004bc6:	429a      	cmp	r2, r3
 8004bc8:	d910      	bls.n	8004bec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bca:	4b67      	ldr	r3, [pc, #412]	@ (8004d68 <HAL_RCC_ClockConfig+0x1c0>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f023 0207 	bic.w	r2, r3, #7
 8004bd2:	4965      	ldr	r1, [pc, #404]	@ (8004d68 <HAL_RCC_ClockConfig+0x1c0>)
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bda:	4b63      	ldr	r3, [pc, #396]	@ (8004d68 <HAL_RCC_ClockConfig+0x1c0>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f003 0307 	and.w	r3, r3, #7
 8004be2:	683a      	ldr	r2, [r7, #0]
 8004be4:	429a      	cmp	r2, r3
 8004be6:	d001      	beq.n	8004bec <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004be8:	2301      	movs	r3, #1
 8004bea:	e0b8      	b.n	8004d5e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f003 0302 	and.w	r3, r3, #2
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d020      	beq.n	8004c3a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f003 0304 	and.w	r3, r3, #4
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d005      	beq.n	8004c10 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c04:	4b59      	ldr	r3, [pc, #356]	@ (8004d6c <HAL_RCC_ClockConfig+0x1c4>)
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	4a58      	ldr	r2, [pc, #352]	@ (8004d6c <HAL_RCC_ClockConfig+0x1c4>)
 8004c0a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004c0e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f003 0308 	and.w	r3, r3, #8
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d005      	beq.n	8004c28 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004c1c:	4b53      	ldr	r3, [pc, #332]	@ (8004d6c <HAL_RCC_ClockConfig+0x1c4>)
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	4a52      	ldr	r2, [pc, #328]	@ (8004d6c <HAL_RCC_ClockConfig+0x1c4>)
 8004c22:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8004c26:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c28:	4b50      	ldr	r3, [pc, #320]	@ (8004d6c <HAL_RCC_ClockConfig+0x1c4>)
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	689b      	ldr	r3, [r3, #8]
 8004c34:	494d      	ldr	r1, [pc, #308]	@ (8004d6c <HAL_RCC_ClockConfig+0x1c4>)
 8004c36:	4313      	orrs	r3, r2
 8004c38:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f003 0301 	and.w	r3, r3, #1
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d040      	beq.n	8004cc8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	2b01      	cmp	r3, #1
 8004c4c:	d107      	bne.n	8004c5e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c4e:	4b47      	ldr	r3, [pc, #284]	@ (8004d6c <HAL_RCC_ClockConfig+0x1c4>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d115      	bne.n	8004c86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	e07f      	b.n	8004d5e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	2b02      	cmp	r3, #2
 8004c64:	d107      	bne.n	8004c76 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c66:	4b41      	ldr	r3, [pc, #260]	@ (8004d6c <HAL_RCC_ClockConfig+0x1c4>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d109      	bne.n	8004c86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c72:	2301      	movs	r3, #1
 8004c74:	e073      	b.n	8004d5e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c76:	4b3d      	ldr	r3, [pc, #244]	@ (8004d6c <HAL_RCC_ClockConfig+0x1c4>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f003 0302 	and.w	r3, r3, #2
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d101      	bne.n	8004c86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	e06b      	b.n	8004d5e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c86:	4b39      	ldr	r3, [pc, #228]	@ (8004d6c <HAL_RCC_ClockConfig+0x1c4>)
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	f023 0203 	bic.w	r2, r3, #3
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	4936      	ldr	r1, [pc, #216]	@ (8004d6c <HAL_RCC_ClockConfig+0x1c4>)
 8004c94:	4313      	orrs	r3, r2
 8004c96:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004c98:	f7fe fffc 	bl	8003c94 <HAL_GetTick>
 8004c9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c9e:	e00a      	b.n	8004cb6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ca0:	f7fe fff8 	bl	8003c94 <HAL_GetTick>
 8004ca4:	4602      	mov	r2, r0
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	1ad3      	subs	r3, r2, r3
 8004caa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d901      	bls.n	8004cb6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004cb2:	2303      	movs	r3, #3
 8004cb4:	e053      	b.n	8004d5e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cb6:	4b2d      	ldr	r3, [pc, #180]	@ (8004d6c <HAL_RCC_ClockConfig+0x1c4>)
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	f003 020c 	and.w	r2, r3, #12
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	009b      	lsls	r3, r3, #2
 8004cc4:	429a      	cmp	r2, r3
 8004cc6:	d1eb      	bne.n	8004ca0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004cc8:	4b27      	ldr	r3, [pc, #156]	@ (8004d68 <HAL_RCC_ClockConfig+0x1c0>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f003 0307 	and.w	r3, r3, #7
 8004cd0:	683a      	ldr	r2, [r7, #0]
 8004cd2:	429a      	cmp	r2, r3
 8004cd4:	d210      	bcs.n	8004cf8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cd6:	4b24      	ldr	r3, [pc, #144]	@ (8004d68 <HAL_RCC_ClockConfig+0x1c0>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f023 0207 	bic.w	r2, r3, #7
 8004cde:	4922      	ldr	r1, [pc, #136]	@ (8004d68 <HAL_RCC_ClockConfig+0x1c0>)
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ce6:	4b20      	ldr	r3, [pc, #128]	@ (8004d68 <HAL_RCC_ClockConfig+0x1c0>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f003 0307 	and.w	r3, r3, #7
 8004cee:	683a      	ldr	r2, [r7, #0]
 8004cf0:	429a      	cmp	r2, r3
 8004cf2:	d001      	beq.n	8004cf8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	e032      	b.n	8004d5e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f003 0304 	and.w	r3, r3, #4
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d008      	beq.n	8004d16 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d04:	4b19      	ldr	r3, [pc, #100]	@ (8004d6c <HAL_RCC_ClockConfig+0x1c4>)
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	68db      	ldr	r3, [r3, #12]
 8004d10:	4916      	ldr	r1, [pc, #88]	@ (8004d6c <HAL_RCC_ClockConfig+0x1c4>)
 8004d12:	4313      	orrs	r3, r2
 8004d14:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f003 0308 	and.w	r3, r3, #8
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d009      	beq.n	8004d36 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004d22:	4b12      	ldr	r3, [pc, #72]	@ (8004d6c <HAL_RCC_ClockConfig+0x1c4>)
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	691b      	ldr	r3, [r3, #16]
 8004d2e:	00db      	lsls	r3, r3, #3
 8004d30:	490e      	ldr	r1, [pc, #56]	@ (8004d6c <HAL_RCC_ClockConfig+0x1c4>)
 8004d32:	4313      	orrs	r3, r2
 8004d34:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004d36:	f000 f821 	bl	8004d7c <HAL_RCC_GetSysClockFreq>
 8004d3a:	4602      	mov	r2, r0
 8004d3c:	4b0b      	ldr	r3, [pc, #44]	@ (8004d6c <HAL_RCC_ClockConfig+0x1c4>)
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	091b      	lsrs	r3, r3, #4
 8004d42:	f003 030f 	and.w	r3, r3, #15
 8004d46:	490a      	ldr	r1, [pc, #40]	@ (8004d70 <HAL_RCC_ClockConfig+0x1c8>)
 8004d48:	5ccb      	ldrb	r3, [r1, r3]
 8004d4a:	fa22 f303 	lsr.w	r3, r2, r3
 8004d4e:	4a09      	ldr	r2, [pc, #36]	@ (8004d74 <HAL_RCC_ClockConfig+0x1cc>)
 8004d50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004d52:	4b09      	ldr	r3, [pc, #36]	@ (8004d78 <HAL_RCC_ClockConfig+0x1d0>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4618      	mov	r0, r3
 8004d58:	f7fe ff5a 	bl	8003c10 <HAL_InitTick>

  return HAL_OK;
 8004d5c:	2300      	movs	r3, #0
}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	3710      	adds	r7, #16
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}
 8004d66:	bf00      	nop
 8004d68:	40022000 	.word	0x40022000
 8004d6c:	40021000 	.word	0x40021000
 8004d70:	08005fac 	.word	0x08005fac
 8004d74:	2000001c 	.word	0x2000001c
 8004d78:	20000020 	.word	0x20000020

08004d7c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d7c:	b490      	push	{r4, r7}
 8004d7e:	b08a      	sub	sp, #40	@ 0x28
 8004d80:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004d82:	4b29      	ldr	r3, [pc, #164]	@ (8004e28 <HAL_RCC_GetSysClockFreq+0xac>)
 8004d84:	1d3c      	adds	r4, r7, #4
 8004d86:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004d88:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004d8c:	f240 2301 	movw	r3, #513	@ 0x201
 8004d90:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004d92:	2300      	movs	r3, #0
 8004d94:	61fb      	str	r3, [r7, #28]
 8004d96:	2300      	movs	r3, #0
 8004d98:	61bb      	str	r3, [r7, #24]
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d9e:	2300      	movs	r3, #0
 8004da0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004da2:	2300      	movs	r3, #0
 8004da4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004da6:	4b21      	ldr	r3, [pc, #132]	@ (8004e2c <HAL_RCC_GetSysClockFreq+0xb0>)
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004dac:	69fb      	ldr	r3, [r7, #28]
 8004dae:	f003 030c 	and.w	r3, r3, #12
 8004db2:	2b04      	cmp	r3, #4
 8004db4:	d002      	beq.n	8004dbc <HAL_RCC_GetSysClockFreq+0x40>
 8004db6:	2b08      	cmp	r3, #8
 8004db8:	d003      	beq.n	8004dc2 <HAL_RCC_GetSysClockFreq+0x46>
 8004dba:	e02b      	b.n	8004e14 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004dbc:	4b1c      	ldr	r3, [pc, #112]	@ (8004e30 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004dbe:	623b      	str	r3, [r7, #32]
      break;
 8004dc0:	e02b      	b.n	8004e1a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004dc2:	69fb      	ldr	r3, [r7, #28]
 8004dc4:	0c9b      	lsrs	r3, r3, #18
 8004dc6:	f003 030f 	and.w	r3, r3, #15
 8004dca:	3328      	adds	r3, #40	@ 0x28
 8004dcc:	443b      	add	r3, r7
 8004dce:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004dd2:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004dd4:	69fb      	ldr	r3, [r7, #28]
 8004dd6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d012      	beq.n	8004e04 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004dde:	4b13      	ldr	r3, [pc, #76]	@ (8004e2c <HAL_RCC_GetSysClockFreq+0xb0>)
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	0c5b      	lsrs	r3, r3, #17
 8004de4:	f003 0301 	and.w	r3, r3, #1
 8004de8:	3328      	adds	r3, #40	@ 0x28
 8004dea:	443b      	add	r3, r7
 8004dec:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004df0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	4a0e      	ldr	r2, [pc, #56]	@ (8004e30 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004df6:	fb03 f202 	mul.w	r2, r3, r2
 8004dfa:	69bb      	ldr	r3, [r7, #24]
 8004dfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e00:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e02:	e004      	b.n	8004e0e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004e04:	697b      	ldr	r3, [r7, #20]
 8004e06:	4a0b      	ldr	r2, [pc, #44]	@ (8004e34 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004e08:	fb02 f303 	mul.w	r3, r2, r3
 8004e0c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      sysclockfreq = pllclk;
 8004e0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e10:	623b      	str	r3, [r7, #32]
      break;
 8004e12:	e002      	b.n	8004e1a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004e14:	4b06      	ldr	r3, [pc, #24]	@ (8004e30 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004e16:	623b      	str	r3, [r7, #32]
      break;
 8004e18:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004e1a:	6a3b      	ldr	r3, [r7, #32]
}
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	3728      	adds	r7, #40	@ 0x28
 8004e20:	46bd      	mov	sp, r7
 8004e22:	bc90      	pop	{r4, r7}
 8004e24:	4770      	bx	lr
 8004e26:	bf00      	nop
 8004e28:	08005f9c 	.word	0x08005f9c
 8004e2c:	40021000 	.word	0x40021000
 8004e30:	007a1200 	.word	0x007a1200
 8004e34:	003d0900 	.word	0x003d0900

08004e38 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004e38:	b480      	push	{r7}
 8004e3a:	b085      	sub	sp, #20
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004e40:	4b0a      	ldr	r3, [pc, #40]	@ (8004e6c <RCC_Delay+0x34>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a0a      	ldr	r2, [pc, #40]	@ (8004e70 <RCC_Delay+0x38>)
 8004e46:	fba2 2303 	umull	r2, r3, r2, r3
 8004e4a:	0a5b      	lsrs	r3, r3, #9
 8004e4c:	687a      	ldr	r2, [r7, #4]
 8004e4e:	fb02 f303 	mul.w	r3, r2, r3
 8004e52:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004e54:	bf00      	nop
  }
  while (Delay --);
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	1e5a      	subs	r2, r3, #1
 8004e5a:	60fa      	str	r2, [r7, #12]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d1f9      	bne.n	8004e54 <RCC_Delay+0x1c>
}
 8004e60:	bf00      	nop
 8004e62:	bf00      	nop
 8004e64:	3714      	adds	r7, #20
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bc80      	pop	{r7}
 8004e6a:	4770      	bx	lr
 8004e6c:	2000001c 	.word	0x2000001c
 8004e70:	10624dd3 	.word	0x10624dd3

08004e74 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b082      	sub	sp, #8
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d101      	bne.n	8004e86 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004e82:	2301      	movs	r3, #1
 8004e84:	e076      	b.n	8004f74 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d108      	bne.n	8004ea0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004e96:	d009      	beq.n	8004eac <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	61da      	str	r2, [r3, #28]
 8004e9e:	e005      	b.n	8004eac <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2200      	movs	r2, #0
 8004eb0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004eb8:	b2db      	uxtb	r3, r3
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d106      	bne.n	8004ecc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004ec6:	6878      	ldr	r0, [r7, #4]
 8004ec8:	f7fe fdbc 	bl	8003a44 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2202      	movs	r2, #2
 8004ed0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	681a      	ldr	r2, [r3, #0]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004ee2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	685b      	ldr	r3, [r3, #4]
 8004ee8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	689b      	ldr	r3, [r3, #8]
 8004ef0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004ef4:	431a      	orrs	r2, r3
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	68db      	ldr	r3, [r3, #12]
 8004efa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004efe:	431a      	orrs	r2, r3
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	691b      	ldr	r3, [r3, #16]
 8004f04:	f003 0302 	and.w	r3, r3, #2
 8004f08:	431a      	orrs	r2, r3
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	695b      	ldr	r3, [r3, #20]
 8004f0e:	f003 0301 	and.w	r3, r3, #1
 8004f12:	431a      	orrs	r2, r3
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	699b      	ldr	r3, [r3, #24]
 8004f18:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004f1c:	431a      	orrs	r2, r3
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	69db      	ldr	r3, [r3, #28]
 8004f22:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004f26:	431a      	orrs	r2, r3
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6a1b      	ldr	r3, [r3, #32]
 8004f2c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f30:	ea42 0103 	orr.w	r1, r2, r3
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f38:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	430a      	orrs	r2, r1
 8004f42:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	699b      	ldr	r3, [r3, #24]
 8004f48:	0c1a      	lsrs	r2, r3, #16
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f002 0204 	and.w	r2, r2, #4
 8004f52:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	69da      	ldr	r2, [r3, #28]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004f62:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2200      	movs	r2, #0
 8004f68:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2201      	movs	r2, #1
 8004f6e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004f72:	2300      	movs	r3, #0
}
 8004f74:	4618      	mov	r0, r3
 8004f76:	3708      	adds	r7, #8
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	bd80      	pop	{r7, pc}

08004f7c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b08c      	sub	sp, #48	@ 0x30
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	60f8      	str	r0, [r7, #12]
 8004f84:	60b9      	str	r1, [r7, #8]
 8004f86:	607a      	str	r2, [r7, #4]
 8004f88:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004f8e:	2300      	movs	r3, #0
 8004f90:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004f9a:	2b01      	cmp	r3, #1
 8004f9c:	d101      	bne.n	8004fa2 <HAL_SPI_TransmitReceive+0x26>
 8004f9e:	2302      	movs	r3, #2
 8004fa0:	e18a      	b.n	80052b8 <HAL_SPI_TransmitReceive+0x33c>
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	2201      	movs	r2, #1
 8004fa6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004faa:	f7fe fe73 	bl	8003c94 <HAL_GetTick>
 8004fae:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004fb6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004fc0:	887b      	ldrh	r3, [r7, #2]
 8004fc2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004fc4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004fc8:	2b01      	cmp	r3, #1
 8004fca:	d00f      	beq.n	8004fec <HAL_SPI_TransmitReceive+0x70>
 8004fcc:	69fb      	ldr	r3, [r7, #28]
 8004fce:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004fd2:	d107      	bne.n	8004fe4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	689b      	ldr	r3, [r3, #8]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d103      	bne.n	8004fe4 <HAL_SPI_TransmitReceive+0x68>
 8004fdc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004fe0:	2b04      	cmp	r3, #4
 8004fe2:	d003      	beq.n	8004fec <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004fe4:	2302      	movs	r3, #2
 8004fe6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8004fea:	e15b      	b.n	80052a4 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d005      	beq.n	8004ffe <HAL_SPI_TransmitReceive+0x82>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d002      	beq.n	8004ffe <HAL_SPI_TransmitReceive+0x82>
 8004ff8:	887b      	ldrh	r3, [r7, #2]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d103      	bne.n	8005006 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004ffe:	2301      	movs	r3, #1
 8005000:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8005004:	e14e      	b.n	80052a4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800500c:	b2db      	uxtb	r3, r3
 800500e:	2b04      	cmp	r3, #4
 8005010:	d003      	beq.n	800501a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	2205      	movs	r2, #5
 8005016:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	2200      	movs	r2, #0
 800501e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	687a      	ldr	r2, [r7, #4]
 8005024:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	887a      	ldrh	r2, [r7, #2]
 800502a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	887a      	ldrh	r2, [r7, #2]
 8005030:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	68ba      	ldr	r2, [r7, #8]
 8005036:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	887a      	ldrh	r2, [r7, #2]
 800503c:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	887a      	ldrh	r2, [r7, #2]
 8005042:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	2200      	movs	r2, #0
 8005048:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	2200      	movs	r2, #0
 800504e:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800505a:	2b40      	cmp	r3, #64	@ 0x40
 800505c:	d007      	beq.n	800506e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	681a      	ldr	r2, [r3, #0]
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800506c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	68db      	ldr	r3, [r3, #12]
 8005072:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005076:	d178      	bne.n	800516a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d002      	beq.n	8005086 <HAL_SPI_TransmitReceive+0x10a>
 8005080:	8b7b      	ldrh	r3, [r7, #26]
 8005082:	2b01      	cmp	r3, #1
 8005084:	d166      	bne.n	8005154 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800508a:	881a      	ldrh	r2, [r3, #0]
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005096:	1c9a      	adds	r2, r3, #2
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80050a0:	b29b      	uxth	r3, r3
 80050a2:	3b01      	subs	r3, #1
 80050a4:	b29a      	uxth	r2, r3
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80050aa:	e053      	b.n	8005154 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	689b      	ldr	r3, [r3, #8]
 80050b2:	f003 0302 	and.w	r3, r3, #2
 80050b6:	2b02      	cmp	r3, #2
 80050b8:	d11b      	bne.n	80050f2 <HAL_SPI_TransmitReceive+0x176>
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80050be:	b29b      	uxth	r3, r3
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d016      	beq.n	80050f2 <HAL_SPI_TransmitReceive+0x176>
 80050c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050c6:	2b01      	cmp	r3, #1
 80050c8:	d113      	bne.n	80050f2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050ce:	881a      	ldrh	r2, [r3, #0]
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050da:	1c9a      	adds	r2, r3, #2
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80050e4:	b29b      	uxth	r3, r3
 80050e6:	3b01      	subs	r3, #1
 80050e8:	b29a      	uxth	r2, r3
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80050ee:	2300      	movs	r3, #0
 80050f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	689b      	ldr	r3, [r3, #8]
 80050f8:	f003 0301 	and.w	r3, r3, #1
 80050fc:	2b01      	cmp	r3, #1
 80050fe:	d119      	bne.n	8005134 <HAL_SPI_TransmitReceive+0x1b8>
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005104:	b29b      	uxth	r3, r3
 8005106:	2b00      	cmp	r3, #0
 8005108:	d014      	beq.n	8005134 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	68da      	ldr	r2, [r3, #12]
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005114:	b292      	uxth	r2, r2
 8005116:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800511c:	1c9a      	adds	r2, r3, #2
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005126:	b29b      	uxth	r3, r3
 8005128:	3b01      	subs	r3, #1
 800512a:	b29a      	uxth	r2, r3
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005130:	2301      	movs	r3, #1
 8005132:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005134:	f7fe fdae 	bl	8003c94 <HAL_GetTick>
 8005138:	4602      	mov	r2, r0
 800513a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800513c:	1ad3      	subs	r3, r2, r3
 800513e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005140:	429a      	cmp	r2, r3
 8005142:	d807      	bhi.n	8005154 <HAL_SPI_TransmitReceive+0x1d8>
 8005144:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005146:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800514a:	d003      	beq.n	8005154 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800514c:	2303      	movs	r3, #3
 800514e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 8005152:	e0a7      	b.n	80052a4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005158:	b29b      	uxth	r3, r3
 800515a:	2b00      	cmp	r3, #0
 800515c:	d1a6      	bne.n	80050ac <HAL_SPI_TransmitReceive+0x130>
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005162:	b29b      	uxth	r3, r3
 8005164:	2b00      	cmp	r3, #0
 8005166:	d1a1      	bne.n	80050ac <HAL_SPI_TransmitReceive+0x130>
 8005168:	e07c      	b.n	8005264 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	685b      	ldr	r3, [r3, #4]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d002      	beq.n	8005178 <HAL_SPI_TransmitReceive+0x1fc>
 8005172:	8b7b      	ldrh	r3, [r7, #26]
 8005174:	2b01      	cmp	r3, #1
 8005176:	d16b      	bne.n	8005250 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	330c      	adds	r3, #12
 8005182:	7812      	ldrb	r2, [r2, #0]
 8005184:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800518a:	1c5a      	adds	r2, r3, #1
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005194:	b29b      	uxth	r3, r3
 8005196:	3b01      	subs	r3, #1
 8005198:	b29a      	uxth	r2, r3
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800519e:	e057      	b.n	8005250 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	689b      	ldr	r3, [r3, #8]
 80051a6:	f003 0302 	and.w	r3, r3, #2
 80051aa:	2b02      	cmp	r3, #2
 80051ac:	d11c      	bne.n	80051e8 <HAL_SPI_TransmitReceive+0x26c>
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80051b2:	b29b      	uxth	r3, r3
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d017      	beq.n	80051e8 <HAL_SPI_TransmitReceive+0x26c>
 80051b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051ba:	2b01      	cmp	r3, #1
 80051bc:	d114      	bne.n	80051e8 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	330c      	adds	r3, #12
 80051c8:	7812      	ldrb	r2, [r2, #0]
 80051ca:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051d0:	1c5a      	adds	r2, r3, #1
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80051da:	b29b      	uxth	r3, r3
 80051dc:	3b01      	subs	r3, #1
 80051de:	b29a      	uxth	r2, r3
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80051e4:	2300      	movs	r3, #0
 80051e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	689b      	ldr	r3, [r3, #8]
 80051ee:	f003 0301 	and.w	r3, r3, #1
 80051f2:	2b01      	cmp	r3, #1
 80051f4:	d119      	bne.n	800522a <HAL_SPI_TransmitReceive+0x2ae>
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80051fa:	b29b      	uxth	r3, r3
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d014      	beq.n	800522a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	68da      	ldr	r2, [r3, #12]
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800520a:	b2d2      	uxtb	r2, r2
 800520c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005212:	1c5a      	adds	r2, r3, #1
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800521c:	b29b      	uxth	r3, r3
 800521e:	3b01      	subs	r3, #1
 8005220:	b29a      	uxth	r2, r3
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005226:	2301      	movs	r3, #1
 8005228:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800522a:	f7fe fd33 	bl	8003c94 <HAL_GetTick>
 800522e:	4602      	mov	r2, r0
 8005230:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005232:	1ad3      	subs	r3, r2, r3
 8005234:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005236:	429a      	cmp	r2, r3
 8005238:	d803      	bhi.n	8005242 <HAL_SPI_TransmitReceive+0x2c6>
 800523a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800523c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005240:	d102      	bne.n	8005248 <HAL_SPI_TransmitReceive+0x2cc>
 8005242:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005244:	2b00      	cmp	r3, #0
 8005246:	d103      	bne.n	8005250 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005248:	2303      	movs	r3, #3
 800524a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 800524e:	e029      	b.n	80052a4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005254:	b29b      	uxth	r3, r3
 8005256:	2b00      	cmp	r3, #0
 8005258:	d1a2      	bne.n	80051a0 <HAL_SPI_TransmitReceive+0x224>
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800525e:	b29b      	uxth	r3, r3
 8005260:	2b00      	cmp	r3, #0
 8005262:	d19d      	bne.n	80051a0 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005264:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005266:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005268:	68f8      	ldr	r0, [r7, #12]
 800526a:	f000 f8b1 	bl	80053d0 <SPI_EndRxTxTransaction>
 800526e:	4603      	mov	r3, r0
 8005270:	2b00      	cmp	r3, #0
 8005272:	d006      	beq.n	8005282 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005274:	2301      	movs	r3, #1
 8005276:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	2220      	movs	r2, #32
 800527e:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8005280:	e010      	b.n	80052a4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	689b      	ldr	r3, [r3, #8]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d10b      	bne.n	80052a2 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800528a:	2300      	movs	r3, #0
 800528c:	617b      	str	r3, [r7, #20]
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	68db      	ldr	r3, [r3, #12]
 8005294:	617b      	str	r3, [r7, #20]
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	689b      	ldr	r3, [r3, #8]
 800529c:	617b      	str	r3, [r7, #20]
 800529e:	697b      	ldr	r3, [r7, #20]
 80052a0:	e000      	b.n	80052a4 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80052a2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	2201      	movs	r2, #1
 80052a8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	2200      	movs	r2, #0
 80052b0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80052b4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 80052b8:	4618      	mov	r0, r3
 80052ba:	3730      	adds	r7, #48	@ 0x30
 80052bc:	46bd      	mov	sp, r7
 80052be:	bd80      	pop	{r7, pc}

080052c0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b088      	sub	sp, #32
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	60f8      	str	r0, [r7, #12]
 80052c8:	60b9      	str	r1, [r7, #8]
 80052ca:	603b      	str	r3, [r7, #0]
 80052cc:	4613      	mov	r3, r2
 80052ce:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80052d0:	f7fe fce0 	bl	8003c94 <HAL_GetTick>
 80052d4:	4602      	mov	r2, r0
 80052d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052d8:	1a9b      	subs	r3, r3, r2
 80052da:	683a      	ldr	r2, [r7, #0]
 80052dc:	4413      	add	r3, r2
 80052de:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80052e0:	f7fe fcd8 	bl	8003c94 <HAL_GetTick>
 80052e4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80052e6:	4b39      	ldr	r3, [pc, #228]	@ (80053cc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	015b      	lsls	r3, r3, #5
 80052ec:	0d1b      	lsrs	r3, r3, #20
 80052ee:	69fa      	ldr	r2, [r7, #28]
 80052f0:	fb02 f303 	mul.w	r3, r2, r3
 80052f4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80052f6:	e054      	b.n	80053a2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80052fe:	d050      	beq.n	80053a2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005300:	f7fe fcc8 	bl	8003c94 <HAL_GetTick>
 8005304:	4602      	mov	r2, r0
 8005306:	69bb      	ldr	r3, [r7, #24]
 8005308:	1ad3      	subs	r3, r2, r3
 800530a:	69fa      	ldr	r2, [r7, #28]
 800530c:	429a      	cmp	r2, r3
 800530e:	d902      	bls.n	8005316 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005310:	69fb      	ldr	r3, [r7, #28]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d13d      	bne.n	8005392 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	685a      	ldr	r2, [r3, #4]
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005324:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	685b      	ldr	r3, [r3, #4]
 800532a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800532e:	d111      	bne.n	8005354 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	689b      	ldr	r3, [r3, #8]
 8005334:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005338:	d004      	beq.n	8005344 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	689b      	ldr	r3, [r3, #8]
 800533e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005342:	d107      	bne.n	8005354 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	681a      	ldr	r2, [r3, #0]
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005352:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005358:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800535c:	d10f      	bne.n	800537e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	681a      	ldr	r2, [r3, #0]
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800536c:	601a      	str	r2, [r3, #0]
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	681a      	ldr	r2, [r3, #0]
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800537c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	2201      	movs	r2, #1
 8005382:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	2200      	movs	r2, #0
 800538a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800538e:	2303      	movs	r3, #3
 8005390:	e017      	b.n	80053c2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005392:	697b      	ldr	r3, [r7, #20]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d101      	bne.n	800539c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005398:	2300      	movs	r3, #0
 800539a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800539c:	697b      	ldr	r3, [r7, #20]
 800539e:	3b01      	subs	r3, #1
 80053a0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	689a      	ldr	r2, [r3, #8]
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	4013      	ands	r3, r2
 80053ac:	68ba      	ldr	r2, [r7, #8]
 80053ae:	429a      	cmp	r2, r3
 80053b0:	bf0c      	ite	eq
 80053b2:	2301      	moveq	r3, #1
 80053b4:	2300      	movne	r3, #0
 80053b6:	b2db      	uxtb	r3, r3
 80053b8:	461a      	mov	r2, r3
 80053ba:	79fb      	ldrb	r3, [r7, #7]
 80053bc:	429a      	cmp	r2, r3
 80053be:	d19b      	bne.n	80052f8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80053c0:	2300      	movs	r3, #0
}
 80053c2:	4618      	mov	r0, r3
 80053c4:	3720      	adds	r7, #32
 80053c6:	46bd      	mov	sp, r7
 80053c8:	bd80      	pop	{r7, pc}
 80053ca:	bf00      	nop
 80053cc:	2000001c 	.word	0x2000001c

080053d0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b086      	sub	sp, #24
 80053d4:	af02      	add	r7, sp, #8
 80053d6:	60f8      	str	r0, [r7, #12]
 80053d8:	60b9      	str	r1, [r7, #8]
 80053da:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	9300      	str	r3, [sp, #0]
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	2200      	movs	r2, #0
 80053e4:	2180      	movs	r1, #128	@ 0x80
 80053e6:	68f8      	ldr	r0, [r7, #12]
 80053e8:	f7ff ff6a 	bl	80052c0 <SPI_WaitFlagStateUntilTimeout>
 80053ec:	4603      	mov	r3, r0
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d007      	beq.n	8005402 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053f6:	f043 0220 	orr.w	r2, r3, #32
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80053fe:	2303      	movs	r3, #3
 8005400:	e000      	b.n	8005404 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8005402:	2300      	movs	r3, #0
}
 8005404:	4618      	mov	r0, r3
 8005406:	3710      	adds	r7, #16
 8005408:	46bd      	mov	sp, r7
 800540a:	bd80      	pop	{r7, pc}

0800540c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b082      	sub	sp, #8
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d101      	bne.n	800541e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800541a:	2301      	movs	r3, #1
 800541c:	e041      	b.n	80054a2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005424:	b2db      	uxtb	r3, r3
 8005426:	2b00      	cmp	r3, #0
 8005428:	d106      	bne.n	8005438 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2200      	movs	r2, #0
 800542e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005432:	6878      	ldr	r0, [r7, #4]
 8005434:	f7fe fb50 	bl	8003ad8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2202      	movs	r2, #2
 800543c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681a      	ldr	r2, [r3, #0]
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	3304      	adds	r3, #4
 8005448:	4619      	mov	r1, r3
 800544a:	4610      	mov	r0, r2
 800544c:	f000 fa70 	bl	8005930 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2201      	movs	r2, #1
 8005454:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2201      	movs	r2, #1
 800545c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2201      	movs	r2, #1
 8005464:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2201      	movs	r2, #1
 800546c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2201      	movs	r2, #1
 8005474:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2201      	movs	r2, #1
 800547c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2201      	movs	r2, #1
 8005484:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2201      	movs	r2, #1
 800548c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2201      	movs	r2, #1
 8005494:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2201      	movs	r2, #1
 800549c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80054a0:	2300      	movs	r3, #0
}
 80054a2:	4618      	mov	r0, r3
 80054a4:	3708      	adds	r7, #8
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bd80      	pop	{r7, pc}
	...

080054ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80054ac:	b480      	push	{r7}
 80054ae:	b085      	sub	sp, #20
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80054ba:	b2db      	uxtb	r3, r3
 80054bc:	2b01      	cmp	r3, #1
 80054be:	d001      	beq.n	80054c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80054c0:	2301      	movs	r3, #1
 80054c2:	e03a      	b.n	800553a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2202      	movs	r2, #2
 80054c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	68da      	ldr	r2, [r3, #12]
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f042 0201 	orr.w	r2, r2, #1
 80054da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4a18      	ldr	r2, [pc, #96]	@ (8005544 <HAL_TIM_Base_Start_IT+0x98>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d00e      	beq.n	8005504 <HAL_TIM_Base_Start_IT+0x58>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054ee:	d009      	beq.n	8005504 <HAL_TIM_Base_Start_IT+0x58>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a14      	ldr	r2, [pc, #80]	@ (8005548 <HAL_TIM_Base_Start_IT+0x9c>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d004      	beq.n	8005504 <HAL_TIM_Base_Start_IT+0x58>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4a13      	ldr	r2, [pc, #76]	@ (800554c <HAL_TIM_Base_Start_IT+0xa0>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d111      	bne.n	8005528 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	689b      	ldr	r3, [r3, #8]
 800550a:	f003 0307 	and.w	r3, r3, #7
 800550e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	2b06      	cmp	r3, #6
 8005514:	d010      	beq.n	8005538 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	681a      	ldr	r2, [r3, #0]
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f042 0201 	orr.w	r2, r2, #1
 8005524:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005526:	e007      	b.n	8005538 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	681a      	ldr	r2, [r3, #0]
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f042 0201 	orr.w	r2, r2, #1
 8005536:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005538:	2300      	movs	r3, #0
}
 800553a:	4618      	mov	r0, r3
 800553c:	3714      	adds	r7, #20
 800553e:	46bd      	mov	sp, r7
 8005540:	bc80      	pop	{r7}
 8005542:	4770      	bx	lr
 8005544:	40012c00 	.word	0x40012c00
 8005548:	40000400 	.word	0x40000400
 800554c:	40000800 	.word	0x40000800

08005550 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b082      	sub	sp, #8
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	691b      	ldr	r3, [r3, #16]
 800555e:	f003 0302 	and.w	r3, r3, #2
 8005562:	2b02      	cmp	r3, #2
 8005564:	d122      	bne.n	80055ac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	68db      	ldr	r3, [r3, #12]
 800556c:	f003 0302 	and.w	r3, r3, #2
 8005570:	2b02      	cmp	r3, #2
 8005572:	d11b      	bne.n	80055ac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f06f 0202 	mvn.w	r2, #2
 800557c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2201      	movs	r2, #1
 8005582:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	699b      	ldr	r3, [r3, #24]
 800558a:	f003 0303 	and.w	r3, r3, #3
 800558e:	2b00      	cmp	r3, #0
 8005590:	d003      	beq.n	800559a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005592:	6878      	ldr	r0, [r7, #4]
 8005594:	f000 f9b1 	bl	80058fa <HAL_TIM_IC_CaptureCallback>
 8005598:	e005      	b.n	80055a6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800559a:	6878      	ldr	r0, [r7, #4]
 800559c:	f000 f9a4 	bl	80058e8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055a0:	6878      	ldr	r0, [r7, #4]
 80055a2:	f000 f9b3 	bl	800590c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2200      	movs	r2, #0
 80055aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	691b      	ldr	r3, [r3, #16]
 80055b2:	f003 0304 	and.w	r3, r3, #4
 80055b6:	2b04      	cmp	r3, #4
 80055b8:	d122      	bne.n	8005600 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	68db      	ldr	r3, [r3, #12]
 80055c0:	f003 0304 	and.w	r3, r3, #4
 80055c4:	2b04      	cmp	r3, #4
 80055c6:	d11b      	bne.n	8005600 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f06f 0204 	mvn.w	r2, #4
 80055d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2202      	movs	r2, #2
 80055d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	699b      	ldr	r3, [r3, #24]
 80055de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d003      	beq.n	80055ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055e6:	6878      	ldr	r0, [r7, #4]
 80055e8:	f000 f987 	bl	80058fa <HAL_TIM_IC_CaptureCallback>
 80055ec:	e005      	b.n	80055fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055ee:	6878      	ldr	r0, [r7, #4]
 80055f0:	f000 f97a 	bl	80058e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055f4:	6878      	ldr	r0, [r7, #4]
 80055f6:	f000 f989 	bl	800590c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2200      	movs	r2, #0
 80055fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	691b      	ldr	r3, [r3, #16]
 8005606:	f003 0308 	and.w	r3, r3, #8
 800560a:	2b08      	cmp	r3, #8
 800560c:	d122      	bne.n	8005654 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	68db      	ldr	r3, [r3, #12]
 8005614:	f003 0308 	and.w	r3, r3, #8
 8005618:	2b08      	cmp	r3, #8
 800561a:	d11b      	bne.n	8005654 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f06f 0208 	mvn.w	r2, #8
 8005624:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2204      	movs	r2, #4
 800562a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	69db      	ldr	r3, [r3, #28]
 8005632:	f003 0303 	and.w	r3, r3, #3
 8005636:	2b00      	cmp	r3, #0
 8005638:	d003      	beq.n	8005642 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800563a:	6878      	ldr	r0, [r7, #4]
 800563c:	f000 f95d 	bl	80058fa <HAL_TIM_IC_CaptureCallback>
 8005640:	e005      	b.n	800564e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	f000 f950 	bl	80058e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005648:	6878      	ldr	r0, [r7, #4]
 800564a:	f000 f95f 	bl	800590c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2200      	movs	r2, #0
 8005652:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	691b      	ldr	r3, [r3, #16]
 800565a:	f003 0310 	and.w	r3, r3, #16
 800565e:	2b10      	cmp	r3, #16
 8005660:	d122      	bne.n	80056a8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	68db      	ldr	r3, [r3, #12]
 8005668:	f003 0310 	and.w	r3, r3, #16
 800566c:	2b10      	cmp	r3, #16
 800566e:	d11b      	bne.n	80056a8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f06f 0210 	mvn.w	r2, #16
 8005678:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2208      	movs	r2, #8
 800567e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	69db      	ldr	r3, [r3, #28]
 8005686:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800568a:	2b00      	cmp	r3, #0
 800568c:	d003      	beq.n	8005696 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800568e:	6878      	ldr	r0, [r7, #4]
 8005690:	f000 f933 	bl	80058fa <HAL_TIM_IC_CaptureCallback>
 8005694:	e005      	b.n	80056a2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	f000 f926 	bl	80058e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800569c:	6878      	ldr	r0, [r7, #4]
 800569e:	f000 f935 	bl	800590c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2200      	movs	r2, #0
 80056a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	691b      	ldr	r3, [r3, #16]
 80056ae:	f003 0301 	and.w	r3, r3, #1
 80056b2:	2b01      	cmp	r3, #1
 80056b4:	d10e      	bne.n	80056d4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	68db      	ldr	r3, [r3, #12]
 80056bc:	f003 0301 	and.w	r3, r3, #1
 80056c0:	2b01      	cmp	r3, #1
 80056c2:	d107      	bne.n	80056d4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f06f 0201 	mvn.w	r2, #1
 80056cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80056ce:	6878      	ldr	r0, [r7, #4]
 80056d0:	f7fb f894 	bl	80007fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	691b      	ldr	r3, [r3, #16]
 80056da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056de:	2b80      	cmp	r3, #128	@ 0x80
 80056e0:	d10e      	bne.n	8005700 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	68db      	ldr	r3, [r3, #12]
 80056e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056ec:	2b80      	cmp	r3, #128	@ 0x80
 80056ee:	d107      	bne.n	8005700 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80056f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80056fa:	6878      	ldr	r0, [r7, #4]
 80056fc:	f000 fa77 	bl	8005bee <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	691b      	ldr	r3, [r3, #16]
 8005706:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800570a:	2b40      	cmp	r3, #64	@ 0x40
 800570c:	d10e      	bne.n	800572c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	68db      	ldr	r3, [r3, #12]
 8005714:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005718:	2b40      	cmp	r3, #64	@ 0x40
 800571a:	d107      	bne.n	800572c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005724:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005726:	6878      	ldr	r0, [r7, #4]
 8005728:	f000 f8f9 	bl	800591e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	691b      	ldr	r3, [r3, #16]
 8005732:	f003 0320 	and.w	r3, r3, #32
 8005736:	2b20      	cmp	r3, #32
 8005738:	d10e      	bne.n	8005758 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	68db      	ldr	r3, [r3, #12]
 8005740:	f003 0320 	and.w	r3, r3, #32
 8005744:	2b20      	cmp	r3, #32
 8005746:	d107      	bne.n	8005758 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f06f 0220 	mvn.w	r2, #32
 8005750:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005752:	6878      	ldr	r0, [r7, #4]
 8005754:	f000 fa42 	bl	8005bdc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005758:	bf00      	nop
 800575a:	3708      	adds	r7, #8
 800575c:	46bd      	mov	sp, r7
 800575e:	bd80      	pop	{r7, pc}

08005760 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b084      	sub	sp, #16
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
 8005768:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005770:	2b01      	cmp	r3, #1
 8005772:	d101      	bne.n	8005778 <HAL_TIM_ConfigClockSource+0x18>
 8005774:	2302      	movs	r3, #2
 8005776:	e0b3      	b.n	80058e0 <HAL_TIM_ConfigClockSource+0x180>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2201      	movs	r2, #1
 800577c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2202      	movs	r2, #2
 8005784:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	689b      	ldr	r3, [r3, #8]
 800578e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005796:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800579e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	68fa      	ldr	r2, [r7, #12]
 80057a6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80057b0:	d03e      	beq.n	8005830 <HAL_TIM_ConfigClockSource+0xd0>
 80057b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80057b6:	f200 8087 	bhi.w	80058c8 <HAL_TIM_ConfigClockSource+0x168>
 80057ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80057be:	f000 8085 	beq.w	80058cc <HAL_TIM_ConfigClockSource+0x16c>
 80057c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80057c6:	d87f      	bhi.n	80058c8 <HAL_TIM_ConfigClockSource+0x168>
 80057c8:	2b70      	cmp	r3, #112	@ 0x70
 80057ca:	d01a      	beq.n	8005802 <HAL_TIM_ConfigClockSource+0xa2>
 80057cc:	2b70      	cmp	r3, #112	@ 0x70
 80057ce:	d87b      	bhi.n	80058c8 <HAL_TIM_ConfigClockSource+0x168>
 80057d0:	2b60      	cmp	r3, #96	@ 0x60
 80057d2:	d050      	beq.n	8005876 <HAL_TIM_ConfigClockSource+0x116>
 80057d4:	2b60      	cmp	r3, #96	@ 0x60
 80057d6:	d877      	bhi.n	80058c8 <HAL_TIM_ConfigClockSource+0x168>
 80057d8:	2b50      	cmp	r3, #80	@ 0x50
 80057da:	d03c      	beq.n	8005856 <HAL_TIM_ConfigClockSource+0xf6>
 80057dc:	2b50      	cmp	r3, #80	@ 0x50
 80057de:	d873      	bhi.n	80058c8 <HAL_TIM_ConfigClockSource+0x168>
 80057e0:	2b40      	cmp	r3, #64	@ 0x40
 80057e2:	d058      	beq.n	8005896 <HAL_TIM_ConfigClockSource+0x136>
 80057e4:	2b40      	cmp	r3, #64	@ 0x40
 80057e6:	d86f      	bhi.n	80058c8 <HAL_TIM_ConfigClockSource+0x168>
 80057e8:	2b30      	cmp	r3, #48	@ 0x30
 80057ea:	d064      	beq.n	80058b6 <HAL_TIM_ConfigClockSource+0x156>
 80057ec:	2b30      	cmp	r3, #48	@ 0x30
 80057ee:	d86b      	bhi.n	80058c8 <HAL_TIM_ConfigClockSource+0x168>
 80057f0:	2b20      	cmp	r3, #32
 80057f2:	d060      	beq.n	80058b6 <HAL_TIM_ConfigClockSource+0x156>
 80057f4:	2b20      	cmp	r3, #32
 80057f6:	d867      	bhi.n	80058c8 <HAL_TIM_ConfigClockSource+0x168>
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d05c      	beq.n	80058b6 <HAL_TIM_ConfigClockSource+0x156>
 80057fc:	2b10      	cmp	r3, #16
 80057fe:	d05a      	beq.n	80058b6 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005800:	e062      	b.n	80058c8 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6818      	ldr	r0, [r3, #0]
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	6899      	ldr	r1, [r3, #8]
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	685a      	ldr	r2, [r3, #4]
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	68db      	ldr	r3, [r3, #12]
 8005812:	f000 f966 	bl	8005ae2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	689b      	ldr	r3, [r3, #8]
 800581c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005824:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	68fa      	ldr	r2, [r7, #12]
 800582c:	609a      	str	r2, [r3, #8]
      break;
 800582e:	e04e      	b.n	80058ce <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6818      	ldr	r0, [r3, #0]
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	6899      	ldr	r1, [r3, #8]
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	685a      	ldr	r2, [r3, #4]
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	68db      	ldr	r3, [r3, #12]
 8005840:	f000 f94f 	bl	8005ae2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	689a      	ldr	r2, [r3, #8]
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005852:	609a      	str	r2, [r3, #8]
      break;
 8005854:	e03b      	b.n	80058ce <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6818      	ldr	r0, [r3, #0]
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	6859      	ldr	r1, [r3, #4]
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	68db      	ldr	r3, [r3, #12]
 8005862:	461a      	mov	r2, r3
 8005864:	f000 f8c6 	bl	80059f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	2150      	movs	r1, #80	@ 0x50
 800586e:	4618      	mov	r0, r3
 8005870:	f000 f91d 	bl	8005aae <TIM_ITRx_SetConfig>
      break;
 8005874:	e02b      	b.n	80058ce <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6818      	ldr	r0, [r3, #0]
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	6859      	ldr	r1, [r3, #4]
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	68db      	ldr	r3, [r3, #12]
 8005882:	461a      	mov	r2, r3
 8005884:	f000 f8e4 	bl	8005a50 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	2160      	movs	r1, #96	@ 0x60
 800588e:	4618      	mov	r0, r3
 8005890:	f000 f90d 	bl	8005aae <TIM_ITRx_SetConfig>
      break;
 8005894:	e01b      	b.n	80058ce <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6818      	ldr	r0, [r3, #0]
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	6859      	ldr	r1, [r3, #4]
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	68db      	ldr	r3, [r3, #12]
 80058a2:	461a      	mov	r2, r3
 80058a4:	f000 f8a6 	bl	80059f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	2140      	movs	r1, #64	@ 0x40
 80058ae:	4618      	mov	r0, r3
 80058b0:	f000 f8fd 	bl	8005aae <TIM_ITRx_SetConfig>
      break;
 80058b4:	e00b      	b.n	80058ce <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681a      	ldr	r2, [r3, #0]
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	4619      	mov	r1, r3
 80058c0:	4610      	mov	r0, r2
 80058c2:	f000 f8f4 	bl	8005aae <TIM_ITRx_SetConfig>
        break;
 80058c6:	e002      	b.n	80058ce <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80058c8:	bf00      	nop
 80058ca:	e000      	b.n	80058ce <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80058cc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2201      	movs	r2, #1
 80058d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2200      	movs	r2, #0
 80058da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80058de:	2300      	movs	r3, #0
}
 80058e0:	4618      	mov	r0, r3
 80058e2:	3710      	adds	r7, #16
 80058e4:	46bd      	mov	sp, r7
 80058e6:	bd80      	pop	{r7, pc}

080058e8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80058e8:	b480      	push	{r7}
 80058ea:	b083      	sub	sp, #12
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80058f0:	bf00      	nop
 80058f2:	370c      	adds	r7, #12
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bc80      	pop	{r7}
 80058f8:	4770      	bx	lr

080058fa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80058fa:	b480      	push	{r7}
 80058fc:	b083      	sub	sp, #12
 80058fe:	af00      	add	r7, sp, #0
 8005900:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005902:	bf00      	nop
 8005904:	370c      	adds	r7, #12
 8005906:	46bd      	mov	sp, r7
 8005908:	bc80      	pop	{r7}
 800590a:	4770      	bx	lr

0800590c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800590c:	b480      	push	{r7}
 800590e:	b083      	sub	sp, #12
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005914:	bf00      	nop
 8005916:	370c      	adds	r7, #12
 8005918:	46bd      	mov	sp, r7
 800591a:	bc80      	pop	{r7}
 800591c:	4770      	bx	lr

0800591e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800591e:	b480      	push	{r7}
 8005920:	b083      	sub	sp, #12
 8005922:	af00      	add	r7, sp, #0
 8005924:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005926:	bf00      	nop
 8005928:	370c      	adds	r7, #12
 800592a:	46bd      	mov	sp, r7
 800592c:	bc80      	pop	{r7}
 800592e:	4770      	bx	lr

08005930 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005930:	b480      	push	{r7}
 8005932:	b085      	sub	sp, #20
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
 8005938:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	4a29      	ldr	r2, [pc, #164]	@ (80059e8 <TIM_Base_SetConfig+0xb8>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d00b      	beq.n	8005960 <TIM_Base_SetConfig+0x30>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800594e:	d007      	beq.n	8005960 <TIM_Base_SetConfig+0x30>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	4a26      	ldr	r2, [pc, #152]	@ (80059ec <TIM_Base_SetConfig+0xbc>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d003      	beq.n	8005960 <TIM_Base_SetConfig+0x30>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	4a25      	ldr	r2, [pc, #148]	@ (80059f0 <TIM_Base_SetConfig+0xc0>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d108      	bne.n	8005972 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005966:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	685b      	ldr	r3, [r3, #4]
 800596c:	68fa      	ldr	r2, [r7, #12]
 800596e:	4313      	orrs	r3, r2
 8005970:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	4a1c      	ldr	r2, [pc, #112]	@ (80059e8 <TIM_Base_SetConfig+0xb8>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d00b      	beq.n	8005992 <TIM_Base_SetConfig+0x62>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005980:	d007      	beq.n	8005992 <TIM_Base_SetConfig+0x62>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	4a19      	ldr	r2, [pc, #100]	@ (80059ec <TIM_Base_SetConfig+0xbc>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d003      	beq.n	8005992 <TIM_Base_SetConfig+0x62>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	4a18      	ldr	r2, [pc, #96]	@ (80059f0 <TIM_Base_SetConfig+0xc0>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d108      	bne.n	80059a4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005998:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	68db      	ldr	r3, [r3, #12]
 800599e:	68fa      	ldr	r2, [r7, #12]
 80059a0:	4313      	orrs	r3, r2
 80059a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	695b      	ldr	r3, [r3, #20]
 80059ae:	4313      	orrs	r3, r2
 80059b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	68fa      	ldr	r2, [r7, #12]
 80059b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	689a      	ldr	r2, [r3, #8]
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	681a      	ldr	r2, [r3, #0]
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	4a07      	ldr	r2, [pc, #28]	@ (80059e8 <TIM_Base_SetConfig+0xb8>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d103      	bne.n	80059d8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	691a      	ldr	r2, [r3, #16]
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2201      	movs	r2, #1
 80059dc:	615a      	str	r2, [r3, #20]
}
 80059de:	bf00      	nop
 80059e0:	3714      	adds	r7, #20
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bc80      	pop	{r7}
 80059e6:	4770      	bx	lr
 80059e8:	40012c00 	.word	0x40012c00
 80059ec:	40000400 	.word	0x40000400
 80059f0:	40000800 	.word	0x40000800

080059f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80059f4:	b480      	push	{r7}
 80059f6:	b087      	sub	sp, #28
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	60f8      	str	r0, [r7, #12]
 80059fc:	60b9      	str	r1, [r7, #8]
 80059fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	6a1b      	ldr	r3, [r3, #32]
 8005a04:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	6a1b      	ldr	r3, [r3, #32]
 8005a0a:	f023 0201 	bic.w	r2, r3, #1
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	699b      	ldr	r3, [r3, #24]
 8005a16:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005a18:	693b      	ldr	r3, [r7, #16]
 8005a1a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005a1e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	011b      	lsls	r3, r3, #4
 8005a24:	693a      	ldr	r2, [r7, #16]
 8005a26:	4313      	orrs	r3, r2
 8005a28:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005a2a:	697b      	ldr	r3, [r7, #20]
 8005a2c:	f023 030a 	bic.w	r3, r3, #10
 8005a30:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005a32:	697a      	ldr	r2, [r7, #20]
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	4313      	orrs	r3, r2
 8005a38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	693a      	ldr	r2, [r7, #16]
 8005a3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	697a      	ldr	r2, [r7, #20]
 8005a44:	621a      	str	r2, [r3, #32]
}
 8005a46:	bf00      	nop
 8005a48:	371c      	adds	r7, #28
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	bc80      	pop	{r7}
 8005a4e:	4770      	bx	lr

08005a50 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a50:	b480      	push	{r7}
 8005a52:	b087      	sub	sp, #28
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	60f8      	str	r0, [r7, #12]
 8005a58:	60b9      	str	r1, [r7, #8]
 8005a5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	6a1b      	ldr	r3, [r3, #32]
 8005a60:	f023 0210 	bic.w	r2, r3, #16
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	699b      	ldr	r3, [r3, #24]
 8005a6c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	6a1b      	ldr	r3, [r3, #32]
 8005a72:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005a74:	697b      	ldr	r3, [r7, #20]
 8005a76:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005a7a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	031b      	lsls	r3, r3, #12
 8005a80:	697a      	ldr	r2, [r7, #20]
 8005a82:	4313      	orrs	r3, r2
 8005a84:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005a86:	693b      	ldr	r3, [r7, #16]
 8005a88:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005a8c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	011b      	lsls	r3, r3, #4
 8005a92:	693a      	ldr	r2, [r7, #16]
 8005a94:	4313      	orrs	r3, r2
 8005a96:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	697a      	ldr	r2, [r7, #20]
 8005a9c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	693a      	ldr	r2, [r7, #16]
 8005aa2:	621a      	str	r2, [r3, #32]
}
 8005aa4:	bf00      	nop
 8005aa6:	371c      	adds	r7, #28
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	bc80      	pop	{r7}
 8005aac:	4770      	bx	lr

08005aae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005aae:	b480      	push	{r7}
 8005ab0:	b085      	sub	sp, #20
 8005ab2:	af00      	add	r7, sp, #0
 8005ab4:	6078      	str	r0, [r7, #4]
 8005ab6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	689b      	ldr	r3, [r3, #8]
 8005abc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ac4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005ac6:	683a      	ldr	r2, [r7, #0]
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	4313      	orrs	r3, r2
 8005acc:	f043 0307 	orr.w	r3, r3, #7
 8005ad0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	68fa      	ldr	r2, [r7, #12]
 8005ad6:	609a      	str	r2, [r3, #8]
}
 8005ad8:	bf00      	nop
 8005ada:	3714      	adds	r7, #20
 8005adc:	46bd      	mov	sp, r7
 8005ade:	bc80      	pop	{r7}
 8005ae0:	4770      	bx	lr

08005ae2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005ae2:	b480      	push	{r7}
 8005ae4:	b087      	sub	sp, #28
 8005ae6:	af00      	add	r7, sp, #0
 8005ae8:	60f8      	str	r0, [r7, #12]
 8005aea:	60b9      	str	r1, [r7, #8]
 8005aec:	607a      	str	r2, [r7, #4]
 8005aee:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	689b      	ldr	r3, [r3, #8]
 8005af4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005af6:	697b      	ldr	r3, [r7, #20]
 8005af8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005afc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	021a      	lsls	r2, r3, #8
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	431a      	orrs	r2, r3
 8005b06:	68bb      	ldr	r3, [r7, #8]
 8005b08:	4313      	orrs	r3, r2
 8005b0a:	697a      	ldr	r2, [r7, #20]
 8005b0c:	4313      	orrs	r3, r2
 8005b0e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	697a      	ldr	r2, [r7, #20]
 8005b14:	609a      	str	r2, [r3, #8]
}
 8005b16:	bf00      	nop
 8005b18:	371c      	adds	r7, #28
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	bc80      	pop	{r7}
 8005b1e:	4770      	bx	lr

08005b20 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005b20:	b480      	push	{r7}
 8005b22:	b085      	sub	sp, #20
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
 8005b28:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005b30:	2b01      	cmp	r3, #1
 8005b32:	d101      	bne.n	8005b38 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005b34:	2302      	movs	r3, #2
 8005b36:	e046      	b.n	8005bc6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2201      	movs	r2, #1
 8005b3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2202      	movs	r2, #2
 8005b44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	685b      	ldr	r3, [r3, #4]
 8005b4e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	689b      	ldr	r3, [r3, #8]
 8005b56:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b5e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	68fa      	ldr	r2, [r7, #12]
 8005b66:	4313      	orrs	r3, r2
 8005b68:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	68fa      	ldr	r2, [r7, #12]
 8005b70:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	4a16      	ldr	r2, [pc, #88]	@ (8005bd0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d00e      	beq.n	8005b9a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b84:	d009      	beq.n	8005b9a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4a12      	ldr	r2, [pc, #72]	@ (8005bd4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d004      	beq.n	8005b9a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4a10      	ldr	r2, [pc, #64]	@ (8005bd8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d10c      	bne.n	8005bb4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005b9a:	68bb      	ldr	r3, [r7, #8]
 8005b9c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005ba0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	685b      	ldr	r3, [r3, #4]
 8005ba6:	68ba      	ldr	r2, [r7, #8]
 8005ba8:	4313      	orrs	r3, r2
 8005baa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	68ba      	ldr	r2, [r7, #8]
 8005bb2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2201      	movs	r2, #1
 8005bb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005bc4:	2300      	movs	r3, #0
}
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	3714      	adds	r7, #20
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	bc80      	pop	{r7}
 8005bce:	4770      	bx	lr
 8005bd0:	40012c00 	.word	0x40012c00
 8005bd4:	40000400 	.word	0x40000400
 8005bd8:	40000800 	.word	0x40000800

08005bdc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005bdc:	b480      	push	{r7}
 8005bde:	b083      	sub	sp, #12
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005be4:	bf00      	nop
 8005be6:	370c      	adds	r7, #12
 8005be8:	46bd      	mov	sp, r7
 8005bea:	bc80      	pop	{r7}
 8005bec:	4770      	bx	lr

08005bee <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005bee:	b480      	push	{r7}
 8005bf0:	b083      	sub	sp, #12
 8005bf2:	af00      	add	r7, sp, #0
 8005bf4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005bf6:	bf00      	nop
 8005bf8:	370c      	adds	r7, #12
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bc80      	pop	{r7}
 8005bfe:	4770      	bx	lr

08005c00 <memset>:
 8005c00:	4603      	mov	r3, r0
 8005c02:	4402      	add	r2, r0
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d100      	bne.n	8005c0a <memset+0xa>
 8005c08:	4770      	bx	lr
 8005c0a:	f803 1b01 	strb.w	r1, [r3], #1
 8005c0e:	e7f9      	b.n	8005c04 <memset+0x4>

08005c10 <__libc_init_array>:
 8005c10:	b570      	push	{r4, r5, r6, lr}
 8005c12:	2600      	movs	r6, #0
 8005c14:	4d0c      	ldr	r5, [pc, #48]	@ (8005c48 <__libc_init_array+0x38>)
 8005c16:	4c0d      	ldr	r4, [pc, #52]	@ (8005c4c <__libc_init_array+0x3c>)
 8005c18:	1b64      	subs	r4, r4, r5
 8005c1a:	10a4      	asrs	r4, r4, #2
 8005c1c:	42a6      	cmp	r6, r4
 8005c1e:	d109      	bne.n	8005c34 <__libc_init_array+0x24>
 8005c20:	f000 f81a 	bl	8005c58 <_init>
 8005c24:	2600      	movs	r6, #0
 8005c26:	4d0a      	ldr	r5, [pc, #40]	@ (8005c50 <__libc_init_array+0x40>)
 8005c28:	4c0a      	ldr	r4, [pc, #40]	@ (8005c54 <__libc_init_array+0x44>)
 8005c2a:	1b64      	subs	r4, r4, r5
 8005c2c:	10a4      	asrs	r4, r4, #2
 8005c2e:	42a6      	cmp	r6, r4
 8005c30:	d105      	bne.n	8005c3e <__libc_init_array+0x2e>
 8005c32:	bd70      	pop	{r4, r5, r6, pc}
 8005c34:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c38:	4798      	blx	r3
 8005c3a:	3601      	adds	r6, #1
 8005c3c:	e7ee      	b.n	8005c1c <__libc_init_array+0xc>
 8005c3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c42:	4798      	blx	r3
 8005c44:	3601      	adds	r6, #1
 8005c46:	e7f2      	b.n	8005c2e <__libc_init_array+0x1e>
 8005c48:	08005fbc 	.word	0x08005fbc
 8005c4c:	08005fbc 	.word	0x08005fbc
 8005c50:	08005fbc 	.word	0x08005fbc
 8005c54:	08005fc0 	.word	0x08005fc0

08005c58 <_init>:
 8005c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c5a:	bf00      	nop
 8005c5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c5e:	bc08      	pop	{r3}
 8005c60:	469e      	mov	lr, r3
 8005c62:	4770      	bx	lr

08005c64 <_fini>:
 8005c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c66:	bf00      	nop
 8005c68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c6a:	bc08      	pop	{r3}
 8005c6c:	469e      	mov	lr, r3
 8005c6e:	4770      	bx	lr
